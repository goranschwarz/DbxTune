/*******************************************************************************
 * Copyright (C) 2010-2020 Goran Schwarz
 * 
 * This file is part of DbxTune
 * DbxTune is a family of sub-products *Tune, hence the Dbx
 * Here are some of the tools: AseTune, IqTune, RsTune, RaxTune, HanaTune, 
 *          SqlServerTune, PostgresTune, MySqlTune, MariaDbTune, Db2Tune, ...
 * 
 * DbxTune is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DbxTune is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DbxTune.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package com.asetune.utils;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeoutException;

import org.apache.commons.text.StringEscapeUtils;
import org.apache.log4j.Logger;

import com.asetune.CounterController;
import com.asetune.ICounterController.DbmsOption;
import com.asetune.Version;
import com.asetune.cache.DbmsObjectIdCache;
import com.asetune.cache.DbmsObjectIdCache.ObjectInfo;
import com.asetune.cm.CountersModel;
import com.asetune.sql.conn.DbxConnection;
import com.asetune.sql.conn.info.DbmsVersionInfoSqlServer;

public class SqlServerUtils
{
	private static Logger _logger = Logger.getLogger(SqlServerUtils.class);


	/**
	 * Get XML Showplan 
	 * <p>
	 * Do NOT thow any exception, instead log error and return null
	 * 
	 * @param conn                   A Connection
	 * @param planHandleHexStr       SQL-Server plan handle, example: <code>0x060001007e490b0050a8abd50700000001000000000000000000000000000000000000000000000000000000</code>
	 * @return null on error, else String with the plan: <code>&lt;ShowPlanXML xmlns="http://schemas.microsoft.com/sqlserver/2004/07/showplan" ... </code>
	 */
	public static String getXmlQueryPlanNoThrow(DbxConnection conn, String planHandleHexStr)
	{
		try
		{
			return getXmlQueryPlan(conn, planHandleHexStr);
		}
		catch(SQLException e)
		{
			String msg = "Problems getting text from sys.dm_exec_query_plan, about '"+planHandleHexStr+"'. Msg="+e.getErrorCode()+", Text='" + e.getMessage() + "'. Caught: "+e;
			_logger.warn(msg); 

			return null;
		}
	}

	/**
	 * Get XML Showplan 
	 * @param conn                   A Connection
	 * @param planHandleHexStr       SQL-Server plan handle, example: <code>0x060001007e490b0050a8abd50700000001000000000000000000000000000000000000000000000000000000</code>
	 * @return String with the plan: <code>&lt;ShowPlanXML xmlns="http://schemas.microsoft.com/sqlserver/2004/07/showplan" ... </code>
	 * @throws SQLException
	 */
	public static String getXmlQueryPlan(DbxConnection conn, String planHandleHexStr)
	throws SQLException
	{
		//String sql = "select * from sys.dm_exec_query_plan("+planHandleHexStr+") \n";

		String dm_exec_query_plan = "dm_exec_query_plan";
		
		// Check if we can use Actual-Query-Plan instead of Estimated-QueryPlan
		if (CounterController.hasInstance())
		{
			if (CounterController.getInstance().isDbmsOptionEnabled(DbmsOption.SQL_SERVER__LAST_QUERY_PLAN_STATS))
			{
				dm_exec_query_plan = "dm_exec_query_plan_stats";
			}
		}
		else if (conn.getDbmsVersionNumber() > Ver.ver(2019))
		{
			dm_exec_query_plan = "dm_exec_query_plan_stats";
		}


		// convert(varbinary(64), '0x...', 1) in SQL-Server 2008, convert with style 1 (last param) is supported
		String sql = ""
				+ "select *     /* " + Version.getAppName() + ":getXmlQueryPlan */ \n"
				+ "from sys." + dm_exec_query_plan + "( convert(varbinary(64), ?, 1) ) \n";

		// RS> Col# Label      JDBC Type Name              Guessed DBMS type Source Table
		// RS> ---- ---------- --------------------------- ----------------- ------------
		// RS> 1    dbid       java.sql.Types.SMALLINT     smallint          -none-       // ID of the context database that was in effect when the Transact-SQL statement corresponding to this plan was compiled. For ad hoc and prepared SQL statements, the ID of the database where the statements were compiled. Column is nullable.
		// RS> 2    objectid   java.sql.Types.INTEGER      int               -none-       // ID of the object (for example, stored procedure or user-defined function) for this query plan. For ad hoc and prepared batches, this column is null. Column is nullable.
		// RS> 3    number     java.sql.Types.SMALLINT     smallint          -none-       // Numbered stored procedure integer. For example, a group of procedures for the orders application may be named orderproc;1, orderproc;2, and so on. For ad hoc and prepared batches, this column is null. Column is nullable.
		// RS> 4    encrypted  java.sql.Types.BIT          bit               -none-       // Indicates whether the corresponding stored procedure is encrypted. 0 = not encrypted, 1 = encrypted.   Column is not nullable.
		// RS> 5    query_plan java.sql.Types.LONGNVARCHAR xml               -none-       // Contains the compile-time Showplan representation of the query execution plan that is specified with plan_handle. The Showplan is in XML format. One plan is generated for each batch that contains, for example ad hoc Transact-SQL statements, stored procedure calls, and user-defined function calls. Column is nullable.

		String str = null;
		try ( PreparedStatement stmnt = conn.prepareStatement(sql) )
		{
			stmnt.setQueryTimeout(10);
			stmnt.setString(1, planHandleHexStr);
			try ( ResultSet rs = stmnt.executeQuery() )
			{
				while (rs.next())
				{
					str = rs.getString(5);
				}
			}
		}
		return str;
	}


	/**
	 * Get SQL-Text for a SQL-Server "sql_handle"
	 *  
	 * @param conn                   A Connection
	 * @param sqlHandleHexStr        SQL-Server sql_handle, example: <code>0x02000000e3e9cb00e2359cd6a3450ed834ba421db1c25e6e0000000000000000000000000000000000000000</code>
	 * 
	 * @return null on errors, else: String with the SQL Text
	 */
	public static String getSqlTextNoThrow(DbxConnection conn, String sqlHandleHexStr)
	{
		try
		{
			return getSqlText(conn, sqlHandleHexStr);
		}
		catch(SQLException e)
		{
			String msg = "Problems getting text from sys.dm_exec_sql_text, about '"+sqlHandleHexStr+"'. Msg="+e.getErrorCode()+", Text='" + e.getMessage() + "'. Caught: "+e;
			_logger.warn(msg); 

			return null;
		}
	}
	
	/**
	 * Get SQL-Text for a SQL-Server "sql_handle"
	 *  
	 * @param conn                   A Connection
	 * @param sqlHandleHexStr        SQL-Server sql_handle, example: <code>0x02000000e3e9cb00e2359cd6a3450ed834ba421db1c25e6e0000000000000000000000000000000000000000</code>
	 * 
	 * @return String with the SQL Text
	 * @throws SQLException
	 */
	public static String getSqlText(DbxConnection conn, String sqlHandleHexStr)
	throws SQLException
	{
//		String sql = "select text from sys.dm_exec_sql_text("+sqlHandleHexStr+")";

		// convert(varbinary(64), '0x...', 1) in SQL-Server 2008, convert with style 1 (last param) is supported
		String sql = ""
				+ "select text    /* " + Version.getAppName() + ":getSqlText */\n"
				+ "from sys.dm_exec_sql_text( convert(varbinary(64), ?, 1) ) \n";

		String str = null;
		try ( PreparedStatement stmnt = conn.prepareStatement(sql) )
		{
			stmnt.setQueryTimeout(10);
			stmnt.setString(1, sqlHandleHexStr);
			try ( ResultSet rs = stmnt.executeQuery() )
			{
				while (rs.next())
				{
					str = rs.getString(1);
				}
			}
		}
		return str;
	}

	public static Timestamp getStartDate(DbxConnection conn)
	throws SQLException
	{
		String sql = "SELECT sqlserver_start_time FROM sys.dm_os_sys_info";

		Timestamp ts = null;
		try ( PreparedStatement stmnt = conn.prepareStatement(sql) )
		{
			stmnt.setQueryTimeout(10);
			try ( ResultSet rs = stmnt.executeQuery() )
			{
				while (rs.next())
				{
					ts = rs.getTimestamp(1);
				}
			}
		}
		return ts;
	}

	/**
	 * Get LIVE Query plan from SQL-Server
	 * 
	 * @param conn
	 * @param spid
	 * @return
	 */
	public static String getLiveQueryPlanNoThrow(DbxConnection conn, int spid)
	{
		try
		{
			return getLiveQueryPlan(conn, spid);
		}
		catch (Exception e)
		{
			_logger.info("Problems executing sql='select query_plan from sys.dm_exec_query_statistics_xml("+spid+")'. Caught: " + e);
			return null;
		}
	}

	/**
	 * Get LIVE Query plan from SQL-Server
	 * 
	 * @param conn
	 * @param spid
	 * @return
	 * @throws SQLException
	 */
	public static String getLiveQueryPlan(DbxConnection conn, int spid)
	throws SQLException
	{
		String sql = ""
				+ "select query_plan     /* " + Version.getAppName() + ":getLiveQueryPlan */ \n"
				+ "from sys.dm_exec_query_statistics_xml(?)";
		String str = "";
		
		try (PreparedStatement pstmnt = conn.prepareStatement(sql))
		{
			pstmnt.setInt(1, spid);
			try (ResultSet rs = pstmnt.executeQuery())
			{
				while(rs.next())
					str = str + rs.getString(1);
			}
		}
		
		return str;
	}
	
	/**
	 * Get global TraceFlags from SQL-Server
	 * 
	 * @param conn
	 * @return
	 * @throws SQLException
	 */
	public static List<Integer> getGlobalTraceFlags(DbxConnection conn)
	throws SQLException
	{
		List<Integer> list = new ArrayList<>();

		// Get GLOBAL TRACEFLAG's
		// Note: 'dbcc tracestatus(-1)' doesn't even return a ResultSet if there are NO trace flags set... hence the Table Variable
		String sql = ""
			    + "declare @tfInfo table(traceflag int, status int, global int, session int) \n"
			    + "INSERT INTO @tfInfo \n"
			    + "exec('dbcc tracestatus(-1) with no_infomsgs') \n"
			    + "SELECT * FROM @tfInfo \n"
			    + "";

		try (Statement stmnt = conn.createStatement(); ResultSet rs = stmnt.executeQuery(sql))
		{
			while(rs.next())
				list.add(rs.getInt(1));
		}

		return list;
	}

//	/**
//	 * Check what databases have option 'LAST_QUERY_PLAN_STATS' set or TRACEFLAG 2451 set
//	 * @param conn
//	 * @return
//	 * @throws SQLException
//	 */
//	public static List<String> getDatabasesWithLastActualQueryPlansCapability(DbxConnection conn)
//	throws SQLException
//	{
//		List<String> list = new ArrayList<>();
//
//		// Fist get database options 'LAST_QUERY_PLAN_STATS' from ALL databases
//		String sql = ""
//			    + "declare @dbOptions table(dbame varchar(128), dboption varchar(60), value int) \n"
//			    + "INSERT INTO @dbOptions \n"
//			    + "exec sys.sp_MSforeachdb 'select ''?'', name, cast(value as int) from [?].sys.database_scoped_configurations where name = ''LAST_QUERY_PLAN_STATS'' and value != 0' \n"
//			    + "SELECT * FROM @dbOptions \n"
//			    + "";
//
//		try (Statement stmnt = conn.createStatement(); ResultSet rs = stmnt.executeQuery(sql))
//		{
//			while(rs.next())
//				list.add(rs.getString(1));
//		}
//		
//		// Get trace flags
//		List<Integer> traceFlags = getGlobalTraceFlags(conn);
//		if (traceFlags.contains(2451))
//			list.add("TRACEFLAG:2451:ENABLED");
//		
//		return list;
//	}

	/**
	 * Get Database Scoped Configurations for ALL database
	 * 
	 * @param conn
	 * @return A Map&lt;DBName, Map&lt;OptionName, optionValue&gt;&gt;
	 * @throws SQLException
	 */
	public static Map<String, Map<String, Object>> getDatabasesScopedConfig(DbxConnection conn)
	throws SQLException
	{
		String sql = ""
			    + "declare @dbOptions table(dbame nvarchar(128), dboption nvarchar(60), value sql_variant) \n"
			    + "INSERT INTO @dbOptions \n"
			    + "exec sys.sp_MSforeachdb 'select ''?'', name, value from [?].sys.database_scoped_configurations' \n"
			    + "SELECT * FROM @dbOptions \n"
			    + "";

		DbmsVersionInfoSqlServer versionInfo = (DbmsVersionInfoSqlServer) conn.getDbmsVersionInfo();
		if (versionInfo.isAzureDb())
		{
			sql = "select db_name(), name, value from sys.database_scoped_configurations";
		}
		
		return internal_getDatabasesScopedConfig(conn, sql);
	}

	/**
	 * Get Database Scoped Configurations for ALL database
	 * 
	 * @param conn
	 * @param optionName name of the configuration
	 * 
	 * @return A Map&lt;DBName, Map&lt;OptionName, optionValue&gt;&gt;
	 * @throws SQLException
	 */
	public static Map<String, Map<String, Object>> getDatabasesScopedConfig(DbxConnection conn, String optionName)
	throws SQLException
	{
		String sql = ""
			    + "declare @dbOptions table(dbame nvarchar(128), dboption nvarchar(60), value sql_variant) \n"
			    + "INSERT INTO @dbOptions \n"
			    + "exec sys.sp_MSforeachdb 'select ''?'', name, value from [?].sys.database_scoped_configurations where name = ''" + optionName + "''' \n"
			    + "SELECT * FROM @dbOptions \n"
			    + "";

		DbmsVersionInfoSqlServer versionInfo = (DbmsVersionInfoSqlServer) conn.getDbmsVersionInfo();
		if (versionInfo.isAzureDb())
		{
			sql = "select db_name(), name, value from sys.database_scoped_configurations where name = '" + optionName + "'";
		}
		
		return internal_getDatabasesScopedConfig(conn, sql);
	}

	/**
	 * Get NON-Defaults for Database Scoped Configurations for ALL database
	 * 
	 * @param conn
	 * @param optionName name of the configuration
	 * 
	 * @return A Map&lt;DBName, Map&lt;OptionName, optionValue&gt;&gt;
	 * @throws SQLException
	 */
	public static Map<String, Map<String, Object>> getDatabasesScopedConfigNonDefaults(DbxConnection conn, String optionName)
	throws SQLException
	{
		String sql = ""
			    + "declare @dbOptions table(dbame nvarchar(128), dboption nvarchar(60), value sql_variant) \n"
			    + "INSERT INTO @dbOptions \n"
			    + "exec sys.sp_MSforeachdb 'select ''?'', name, value from [?].sys.database_scoped_configurations where name = ''" + optionName + "'' and is_value_default = 0' \n"
			    + "SELECT * FROM @dbOptions \n"
			    + "";

		DbmsVersionInfoSqlServer versionInfo = (DbmsVersionInfoSqlServer) conn.getDbmsVersionInfo();
		if (versionInfo.isAzureDb())
		{
			sql = "select db_name(), name, value from sys.database_scoped_configurations where name = '" + optionName + "' and is_value_default = 0";
		}
		
		return internal_getDatabasesScopedConfig(conn, sql);
	}

	/**
	 * Get NON-Defaults for Database Scoped Configurations for ALL database
	 * 
	 * @param conn
	 * @param optionName name of the configuration
	 * 
	 * @return A Map&lt;DBName, Map&lt;OptionName, optionValue&gt;&gt;
	 * @throws SQLException
	 */
	public static Map<String, Map<String, Object>> internal_getDatabasesScopedConfig(DbxConnection conn, String sql)
	throws SQLException
	{
		Map<String, Map<String, Object>> dbMap = new LinkedHashMap<>();

		try (Statement stmnt = conn.createStatement(); ResultSet rs = stmnt.executeQuery(sql))
		{
			while(rs.next())
			{
				String dbName   = rs.getString(1);
				String dbOption = rs.getString(2);
				Object optVal   = rs.getObject(3);

				// Get CFG Map for a database (if not there create it)
				Map<String, Object> cfgMap = dbMap.get(dbName);
				if (cfgMap == null)
				{
					cfgMap = new LinkedHashMap<>();
					dbMap.put(dbName, cfgMap);
				}

				// put the DB-OPTION in the Options Map
				cfgMap.put(dbOption, optVal);
			}
		}
		
		return dbMap;
	}


	/**
	 * Get a lock summary for a SPID
	 * 
	 * @param conn           The connection to use 
	 * @param spid           The SPID we want to get locks for
	 * @param cmSource       This can be null. If not null, the name will be added in error messages.
	 * @return List&lt;LockRecord&gt; never null
	 * @throws TimeoutException 
	 */
	public static List<LockRecord> getLockSummaryForSpid(DbxConnection conn, int spid, CountersModel cmSource) 
	throws TimeoutException
	{

		// TODO: start using 'sys.dm_tran_locks' instead of 'syslockinfo' hopefully we will get *less* blocking locks on 'dm_tran_locks'

		String sql = ""
			    + "select \n"
			    + "     spid       = req_spid \n"
			    + "    ,dbid       = rsc_dbid \n"
//			    + "    ,dbname     = db_name(rsc_dbid) \n"
			    + "    ,objectid   = rsc_objid \n"
//			    + "    ,schemaName = '' \n"            // filled in at a second pass because object_name() blocks in many cases
//			    + "    ,tableName  = '' \n"            // filled in at a second pass because object_name() blocks in many cases
			    + "    ,indexId    = rsc_indid \n"
//			    + "    ,indexName  = '' \n"            // filled in at a second pass because object_name() blocks in many cases
			    + "    ,rsc_type \n" // Resolved to a String on client side
//			    + "    ,type       = CASE WHEN rsc_type =  0 THEN 'LOCK RESOURCES' \n"
//			    + "                       WHEN rsc_type =  1 THEN 'NULL' \n"
//			    + "                       WHEN rsc_type =  2 THEN 'DB' \n"
//			    + "                       WHEN rsc_type =  3 THEN 'FILE' \n"
//			    + "                       WHEN rsc_type =  4 THEN 'INDEX' \n"
//			    + "                       WHEN rsc_type =  5 THEN 'TABLE' \n"
//			    + "                       WHEN rsc_type =  6 THEN 'PAGE ' \n"
//			    + "                       WHEN rsc_type =  7 THEN 'KEY' \n"
//			    + "                       WHEN rsc_type =  8 THEN 'EXT' \n"
//			    + "                       WHEN rsc_type =  9 THEN 'RID' \n"
//			    + "                       WHEN rsc_type = 10 THEN 'APP' \n"
//			    + "                       WHEN rsc_type = 11 THEN 'MD' \n"
//			    + "                       WHEN rsc_type = 12 THEN 'HBT' \n"
//			    + "                       WHEN rsc_type = 13 THEN 'AU' \n"
//			    + "                       ELSE '(UNKNOWN) - ' + cast(rsc_type as varchar(10)) \n"
//			    + "                  END \n"
			    + "    ,req_mode \n" // Resolved to a String on client side
//			    + "    ,mode       = CASE WHEN req_mode =  0 THEN 'NULL (placeholder)' \n"
//			    + "                       WHEN req_mode =  1 THEN 'Sch-S (Schema stability)' \n"
//			    + "                       WHEN req_mode =  2 THEN 'Sch-M (Schema modification)' \n"
//			    + "                       WHEN req_mode =  3 THEN 'S (Shared)' \n"
//			    + "                       WHEN req_mode =  4 THEN 'U (Update)' \n"
//			    + "                       WHEN req_mode =  5 THEN 'X (Exclusive)' \n"
//			    + "                       WHEN req_mode =  6 THEN 'IS (Intent Shared)' \n"
//			    + "                       WHEN req_mode =  7 THEN 'IU (Intent Update)' \n"
//			    + "                       WHEN req_mode =  8 THEN 'IX (Intent Exclusive)' \n"
//			    + "                       WHEN req_mode =  9 THEN 'SIU (Shared Intent Update)' \n"
//			    + "                       WHEN req_mode = 10 THEN 'SIX (Shared Intent Exclusive)' \n"
//			    + "                       WHEN req_mode = 11 THEN 'UIX (Update Intent Exclusive)' \n"
//			    + "                       WHEN req_mode = 12 THEN 'BU (Used by bulk operations)' \n"
//			    + "                       WHEN req_mode = 13 THEN 'RangeS-S (Shared Key-Range and Shared Resource lock)' \n"
//			    + "                       WHEN req_mode = 14 THEN 'RangeS-U (Shared Key-Range and Update Resource lock)' \n"
//			    + "                       WHEN req_mode = 15 THEN 'RangeIn-N (Insert Key-Range and Null Resource lock)' \n"
//			    + "                       WHEN req_mode = 16 THEN 'RangeIn-S (created by an overlap of RangeI_N and S locks)' \n"
//			    + "                       WHEN req_mode = 17 THEN 'RangeIn-U (created by an overlap of RangeI_N and U locks)' \n"
//			    + "                       WHEN req_mode = 18 THEN 'RangeIn-X (created by an overlap of RangeI_N and X locks)' \n"
//			    + "                       WHEN req_mode = 19 THEN 'RangeX-S (created by an overlap of RangeI_N and RangeS_S locks)' \n"
//			    + "                       WHEN req_mode = 20 THEN 'RangeX-U (created by an overlap of RangeI_N and RangeS_U locks)' \n"
//			    + "                       WHEN req_mode = 21 THEN 'RangeX-X (Exclusive Key-Range and Exclusive Resource lock)' \n"
//			    + "                       ELSE '(UNKNOWN) - ' + cast(req_mode as varchar(10)) \n"
//			    + "                  END \n"
			    + "    ,req_status \n" // Resolved to a String on client side
//			    + "    ,status     = CASE WHEN req_status = 0 THEN 'LOCK REQ STATUS' \n"
//			    + "                       WHEN req_status = 1 THEN 'GRANT' \n"
//			    + "                       WHEN req_status = 2 THEN 'CNVT' \n"
//			    + "                       WHEN req_status = 3 THEN 'WAIT' \n"
//			    + "                       WHEN req_status = 4 THEN 'RELN' \n"
//			    + "                       WHEN req_status = 5 THEN 'BLCKN' \n"
//			    + "                       ELSE '(UNKNOWN) - ' + cast(req_status as varchar(10)) \n"
//			    + "                  END \n"
			    + "    ,lockCount  = count(*) \n"
			    + "from master.dbo.syslockinfo WITH (READUNCOMMITTED) \n"
			    + "where rsc_type != 2  /* rsc_type=2 is 'DB' */ \n"
			    + "  and (req_spid = ? OR req_status = 3)  /* req_status=3 is 'WAIT' */ \n"
			    + "group by req_spid, rsc_dbid, rsc_objid, rsc_indid, rsc_type, req_mode, req_status \n"
			    + "";

		// Below are a POSSIBLE SQL for 'sys.dm_tran_locks'
		// BUT: It doesn't work with 'index_id' (see comments below)
//		String sql = ""
//			    + "select \n"
//			    + "     spid       = request_session_id \n"
//			    + "    ,dbid       = resource_database_id \n"
//			    + "    ,objectid   = resource_associated_entity_id  -- id or hobt \n"
//			    + "--    ,indexId    = rsc_indid  -- THIS IS NOT AVAILABLE IN 'dm_tran_locks' it needs to be derived from 'resource_associated_entity_id' (which may be a HOBT -- that can be checked against: select * from sys.partitions p where p.hobt_id = 72057784525783040 ...) \n"
//			    + "--								+----------------------+-----------+--------+----------------+----------------------+---------+-----------------------+----------------+---------------------+ \n"
//			    + "--								|partition_id          |object_id  |index_id|partition_number|hobt_id               |rows     |filestream_filegroup_id|data_compression|data_compression_desc| \n"
//			    + "--								+----------------------+-----------+--------+----------------+----------------------+---------+-----------------------+----------------+---------------------+ \n"
//			    + "--								|72 057 784 525 783 040|242 153 994|       1|               1|72 057 784 525 783 040|4 301 078|                      0|               0|NONE                 | \n"
//			    + "--								+----------------------+-----------+--------+----------------+----------------------+---------+-----------------------+----------------+---------------------+ \n"
//			    + "    ,resource_type \n"
//			    + "    ,request_mode \n"
//			    + "    ,request_status \n"
//			    + "    ,lockCount  = count(*) \n"
//			    + "from sys.dm_tran_locks WITH (READUNCOMMITTED) \n"
//			    + "where resource_type not in('DATABASE') \n"
//			    + "  and (request_session_id = 62 OR request_status = 'WAIT') -- req_status=3 is 'WAIT' \n"
//			    + "group by request_session_id, resource_database_id, resource_associated_entity_id/*, rsc_indid*/, resource_type, request_mode, request_status ; \n"
//			    + "";

		// Here is another resource to look at 'WhatsUpLocks'
		// https://github.com/erikdarlingdata/DarlingData/blob/07393ce85488b1bb237e276fa34e83d0c7a47858/Helper%20Views/WhatsUpLocks.sql
		// This NEEDS current database context... So 'syslockinfo' might still be better...
		
		List<LockRecord> lockList = new ArrayList<>();
		List<LockRecord> otherSpidsWaiting = null;

//		int stmntTimeout = Configuration.getCombinedConfiguration().getIntProperty("SqlServerUtils.getLockSummaryForSpid.timeout.seconds", 1);
		
		// This can be a bit higher if we in caller gives up after FIRST timeout (consequent calls WILL probably timeout) 
		int stmntTimeout = Configuration.getCombinedConfiguration().getIntProperty("SqlServerUtils.getLockSummaryForSpid.timeout.seconds", 3);
		long execStartTime = System.currentTimeMillis();

		try (PreparedStatement pstmnt = conn.prepareStatement(sql)) // Auto CLOSE
		{
			// Timeout after X second --- if we get blocked when doing: object_name()
			pstmnt.setQueryTimeout(stmntTimeout);
			
			// set SPID
			pstmnt.setInt(1, spid);
			
			try (ResultSet rs = pstmnt.executeQuery()) // Auto CLOSE
			{
				while(rs.next())
				{
//					int    SPID       = rs.getInt   (1);
//					int    dbid       = rs.getInt   (2);
//					String dbname     = rs.getString(3);
//					int    objectid   = rs.getInt   (4);
//					String schemaName = rs.getString(5);
//					String tableName  = rs.getString(6);
//					int    indexId    = rs.getInt   (7);
//					String indexName  = rs.getString(8);
//					String lockType   = rs.getString(9);
//					String lockMode   = rs.getString(10);
//					String lockStatus = rs.getString(11);
//					int    lockCount  = rs.getInt   (12);
					
					int SPID       = rs.getInt(1);
					int dbid       = rs.getInt(2);
					int objectid   = rs.getInt(3);
					int indexId    = rs.getInt(4);
					int lockType   = rs.getInt(5);
					int lockMode   = rs.getInt(6);
					int lockStatus = rs.getInt(7);
					int lockCount  = rs.getInt(8);

					// If this SPID is same as we are checking for... Add it to 'lockList' otherwise add it to 'otherSpidsWaiting'
					if (spid == SPID)
					{
//						lockList.add( new LockRecord(SPID, dbid, dbname, objectid, schemaName, tableName, indexId, indexName, lockType, lockMode, lockStatus, lockCount) );
						lockList.add( new LockRecord(SPID, dbid, objectid, indexId, lockType, lockMode, lockStatus, lockCount) );
					}
					else
					{
						if (otherSpidsWaiting == null)
							otherSpidsWaiting = new ArrayList<>();

						otherSpidsWaiting.add( new LockRecord(SPID, dbid, objectid, indexId, lockType, lockMode, lockStatus, lockCount) );
					}
				}
			}
			
			// Check/Set for SPID's that are BLOCKING *this* SPID 
			if (otherSpidsWaiting != null)
			{
				for (LockRecord lr : lockList)
				{
					// if the LockRecord is already in lockStatus 'WAIT'... then it can't be a "root cause locker"... so get next row
					if (lr._lockStatus == 3)
						continue;

					for (LockRecord wlr : otherSpidsWaiting)
					{
						// only check for 'WAIT' (lookStatus == 3) ... this is not needed since it'a already taken care of in the SQL WHERE Clause
						if (wlr._lockStatus != 3)
							continue;

						// If: dbid && objectid && lockType are matching --> isBlocking
						if (lr._dbid == wlr._dbid && lr._objectid == wlr._objectid && lr._lockType == wlr._lockType)
						{
							// We have a BLOCKING SPID
							if (lr._blockingSpids == null)
								lr._blockingSpids = new ArrayList<>();

							lr._blockingSpids.add(wlr._spid);
						}
					}
				}
			}
		}
		catch (SQLException ex)
		{
			long execTime = TimeUtils.msDiffNow(execStartTime);

			if (ex.getMessage() != null && ex.getMessage().contains("query has timed out"))
			{
				String msg = "getLockSummaryForSpid: Problems getting Lock List (from syslockinfo). from '" + (cmSource == null ? "-unknown-" : cmSource.getName()) + "'. The query has timed out after execTimeInMs=" + execTime + ". Consequent lookups might be skipped.";
				_logger.warn(msg);
				throw new TimeoutException(msg);
			}
			else
			{
				_logger.warn("Problems when executing sql: " + sql + ". SQLException Error=" + ex.getErrorCode() + ", Msg='" + StringUtil.stripNewLine(ex.getMessage()) + "'.", ex);
			}
		}

//		// Add all databases to a SET, which we later loops to get Schema, Table and Index Names
//		Set<String> dbnames = new LinkedHashSet<>();
//		for (LockRecord r : lockList)
//			dbnames.add(r._dbname);
//
//		// Loop above DB's
//		for (String dbname : dbnames)
//		{
//			if (StringUtil.isNullOrBlank(dbname))
//				continue;
//
//			// Lookup SchemaName and TableName for the object id's
//			// This because object_name(objid, dbid) is BLOCKING
//			sql = ""
//				    + "select \n"
//				    + "     SchemaName = (select s.name from [" + dbname + "].sys.objects o inner join [" + dbname + "].sys.schemas s ON s.schema_id = o.schema_id where o.object_id = ?) \n"
//				    + "    ,ObjectName = (select o.name from [" + dbname + "].sys.objects o where o.object_id = ?) \n"
//				    + "    ,IndexName  = (select i.name FROM [" + dbname + "].sys.indexes i where i.object_id = ? and i.index_id = ?) \n"
//				    + "";
//			try (PreparedStatement pstmnt = conn.prepareStatement(sql)) // Auto CLOSE
//			{
//				// Timeout after 1 second --- if we get blocked when doing: object_name()
//				pstmnt.setQueryTimeout(1);
//				
//				for (LockRecord r : lockList)
//				{
//					// set SPID
//					pstmnt.setInt(1, r._objectid);
//					pstmnt.setInt(2, r._objectid);
//					pstmnt.setInt(3, r._objectid);
//					pstmnt.setInt(4, r._indexId);
//				
//					try (ResultSet rs = pstmnt.executeQuery()) // Auto CLOSE
//					{
//						while(rs.next())
//						{
//							String schemaName = rs.getString(1);
//							String tableName  = rs.getString(2);
//							String indexName  = rs.getString(3);
//
//							r._schemaName = schemaName == null ? "" : schemaName;
//							r._tableName  = tableName  == null ? "" : tableName;
//							r._indexName  = indexName  == null ? "" : indexName;
//							
//							if (r._objectid != 0 && r._indexId == 0)
//								r._indexName = "-DATA-";
//						}
//					}
//				}
//			}
//			catch (SQLException ex)
//			{
//				if (ex.getMessage() != null && ex.getMessage().contains("query has timed out"))
//				{
//					_logger.warn("getLockSummaryForSpid: Problems getting schema/table/index name. The query has timed out. But the lock information will still be returned (but without the schema/table/index name.");
//					throw new TimeoutException();
//				}
//				else
//				{
//					_logger.warn("Problems when executing sql: " + sql + ". SQLException Error=" + ex.getErrorCode() + ", Msg='" + StringUtil.stripNewLine(ex.getMessage()) + "'.", ex);
//				}
//			}
//		}
		
		// Lookup ID's to Names (using a CACHED way... keeping already looked-up id's in memory)
		if (DbmsObjectIdCache.hasInstance())
		{
			DbmsObjectIdCache objIdCache = DbmsObjectIdCache.getInstance();

			for (LockRecord r : lockList)
			{
				// When ObjectID is 0... just get the DBName 
				if (r._objectid == 0)
				{
					r._dbname = objIdCache.getDBName(r._dbid);
					continue;
				}

//				ObjectInfo oi = objIdCache.get(conn, r._dbid, r._objectid);
				ObjectInfo oi = objIdCache.getByObjectId(r._dbid, r._objectid);
				if (oi != null)
				{
					r._dbname     = oi.getDBName();
					r._schemaName = oi.getSchemaName();
					r._tableName  = oi.getObjectName();
					r._indexName  = oi.getIndexName(r._indexId);

					if (r._dbname     == null) r._dbname     = "";
					if (r._schemaName == null) r._schemaName = "";
					if (r._tableName  == null) r._tableName  = "";
					if (r._indexName  == null) r._indexName  = "";
				}
			}
		}
		
		return lockList;
	}

	/** 
	 * @return "" if no locks, otherwise a HTML TABLE, with the headers: DB, Table, Type, Count
	 */
	public static String getLockListTableAsHtmlTable(List<LockRecord> list)
	{
		if (list.isEmpty())
			return "";

		StringBuilder sb = new StringBuilder("<TABLE class='dbx-table-basic' BORDER=1>");
		sb.append("<TR> <TH>spid</TH> <TH>dbid</TH> <TH>dbname</TH> <TH>ObjectID</TH> <TH>Schema</TH> <TH>Table</TH> <TH>IndexID</TH> <TH>IndexName</TH> <TH>Type</TH> <TH>Mode</TH> <TH>Status</TH> <TH>Count</TH> </TR>");
		for (LockRecord lr : list)
		{
//			if (lr._lockStatusStr != null && lr._lockStatusStr.equals("WAIT"))
//				sb.append("<TR style='color: red'>");
////			else if (lr._lockStatus != null && lr._lockStatus.equals("BLCKN???")) // FIXME: hmmm there is NO BLOCKING status... how the hell do we know if this row is "root cause" for BLOCKING lock or not 
////				sb.append("<TR style='color: red'>");
//			else
//				sb.append("<TR>");

//			if      (lr._isBlocking     ) sb.append("<TR style='color: red;'>");    // BLOCKING
			if      (lr._blockingSpids != null) sb.append("<TR style='color: red;'>");    // BLOCKING
			else if (lr._lockStatus    == 3   ) sb.append("<TR style='color: orange;'>"); // WAIT
			else                                sb.append("<TR>");

			sb.append("<TD>").append(lr._spid         ).append("</TD>");
			sb.append("<TD>").append(lr._dbid         ).append("</TD>");
			sb.append("<TD>").append(lr._dbname       ).append("</TD>");
			sb.append("<TD>").append(lr._objectid     ).append("</TD>");
			sb.append("<TD>").append(lr._schemaName   ).append("</TD>");
			sb.append("<TD>").append(lr._tableName    ).append("</TD>");
			sb.append("<TD>").append(lr._indexId      ).append("</TD>");
			sb.append("<TD>").append(lr._indexName    ).append("</TD>");
			sb.append("<TD>").append(lr._lockTypeStr  ).append("</TD>");
			sb.append("<TD>").append(lr._lockModeStr  ).append( lr._blockingSpids == null ? "" : "<br>BLOCKING SPIDs: " + lr._blockingSpids  ).append("</TD>");
			sb.append("<TD>").append(lr._lockStatusStr).append("</TD>");
			sb.append("<TD>").append(lr._lockCount    ).append("</TD>");
			sb.append("</TR>");
		}
		sb.append("</TABLE>");
		return sb.toString();
	}

	/** 
	 * @return "" if no locks, otherwise a ASCII TABLE, with the headers: DBName, TableName, LockType, LockCount
	 */
	public static String getLockListTableAsAsciiTable(List<LockRecord> list)
	{
		if (list.isEmpty())
			return "";

		// Table HEAD
		String[] tHead = new String[] {"spid", "dbid", "dbname", "ObjectID", "SchemaName", "TableName", "IndexId", "IndexName", "LockType", "LockMode", "LockStatus", "LockCount"};

		// Table DATA
		List<List<Object>> tData = new ArrayList<>();
		for (LockRecord lr : list)
		{
			List<Object> row = new ArrayList<>();
			
			row.add(lr._spid         );
			row.add(lr._dbid         );
			row.add(lr._dbname       );
			row.add(lr._objectid     );
			row.add(lr._schemaName   );
			row.add(lr._tableName    );
			row.add(lr._indexId      );
			row.add(lr._indexName    );
			row.add(lr._lockTypeStr  );
			row.add(lr._lockModeStr  );
			row.add(lr._lockStatusStr);
			row.add(lr._lockCount    );
			
			tData.add(row);
		}

		return StringUtil.toTableString(Arrays.asList(tHead), tData);
	}

	/**
	 * Get a lock summary for a SPID
	 * 
	 * @param lockList       The lockList produced by: getLockSummaryForSpid(DbxConnection conn, int spid)
	 * @param asHtml         Produce a HTML table (if false a ASCII table will be produced)
	 * @param htmlBeginEnd   (if asHtml=true) should we wrap the HTML with begin/end tags
	 * @return
	 */
	public static String getLockSummaryForSpid(List<LockRecord> lockList, boolean asHtml, boolean htmlBeginEnd)
	{
		if (lockList.isEmpty())
			return null;
	
		if (asHtml)
		{
			String htmlTable = getLockListTableAsHtmlTable(lockList);
			if (htmlBeginEnd)
				return "<html>" + htmlTable + "</html>";
			else
				return htmlTable;
		}
		else
			return getLockListTableAsAsciiTable(lockList);
	}

	/**
	 * Get a lock summary for a SPID
	 * 
	 * @param conn           The connection to use 
	 * @param spid           The SPID we want to get locks for
	 * @param cmSource       This can be null. If not null, the name will be added in error messages.
	 * @param asHtml         Produce a HTML table (if false a ASCII table will be produced)
	 * @param htmlBeginEnd   (if asHtml=true) should we wrap the HTML with begin/end tags
	 * @return
	 * @throws TimeoutException 
	 */
	public static String getLockSummaryForSpid(DbxConnection conn, int spid, CountersModel cmSource, boolean asHtml, boolean htmlBeginEnd) 
	throws TimeoutException
	{
		List<LockRecord> lockList = getLockSummaryForSpid(conn, spid, cmSource);

		return getLockSummaryForSpid(lockList, asHtml, htmlBeginEnd);
	}

	/**
	 * LockRecord used by: getLockSummaryForSpid(spid)
	 */
	public static class LockRecord
	{
		public int     _spid          = 0;
		public int     _dbid          = 0;
		public String  _dbname        = "";
		public int     _objectid      = 0;
		public String  _schemaName    = "";
		public String  _tableName     = "";
		public int     _indexId       = 0;
		public String  _indexName     = "";
		public int     _lockType      = -1;
		public String  _lockTypeStr   = "";
		public int     _lockMode      = -1;
		public String  _lockModeStr   = "";
		public int     _lockStatus    = -1;
		public String  _lockStatusStr = "";
		public int     _lockCount     = 0;
//		public boolean _isBlocking    = false; // If the record is BLOCKING Other SPID's (set at a second pass)
		public List<Integer> _blockingSpids = null;

//		public LockRecord(int spid, int dbid, String dbname, int objectid, String schemaName, String tableName, int indexId, String indexName, String lockType, String lockMode, String lockStatus, int lockCount)
//		{
//			_spid       = spid       ;
//			_dbid       = dbid       ;
//			_dbname     = dbname     == null ? "" : dbname;
//			_objectid   = objectid   ;
//			_schemaName = schemaName == null ? "" : schemaName;
//			_tableName  = tableName  == null ? "" : tableName;
//			_indexId    = indexId    ;
//			_indexName  = indexName  == null ? "" : indexName;
//			_lockType   = lockType   == null ? "" : lockType;
//			_lockMode   = lockMode   == null ? "" : lockMode;
//			_lockStatus = lockStatus == null ? "" : lockStatus;
//			_lockCount  = lockCount  ;
//		}
		public LockRecord(int spid, int dbid, int objectid, int indexId, int lockType, int lockMode, int lockStatus, int lockCount)
		{
			_spid          = spid       ;
			_dbid          = dbid       ;
			_objectid      = objectid   ;
			_indexId       = indexId    ;
			_lockType      = lockType   ;
			_lockTypeStr   = lockTypeStr  (lockType);
			_lockMode      = lockMode   ;
			_lockModeStr   = lockModeStr  (lockMode);
			_lockStatus    = lockStatus ;
			_lockStatusStr = lockStatusStr(lockStatus);
			_lockCount     = lockCount  ;
		}

		public static String lockTypeStr(int type)
		{
			switch (type)
			{
				case  0: return "LOCK RESOURCES";
				case  1: return "NULL";
				case  2: return "DB";
				case  3: return "FILE";
				case  4: return "INDEX";
				case  5: return "TABLE";
				case  6: return "PAGE";
				case  7: return "KEY";
				case  8: return "EXT";
				case  9: return "RID";
				case 10: return "APP";
				case 11: return "MD";
				case 12: return "HBT";
				case 13: return "AU";
			}
			return "(UNKNOWN) - " + type;
		}

		public static String lockModeStr(int mode)
		{
			switch (mode)
			{
				case  0: return "NULL (placeholder)";
				case  1: return "Sch-S (Schema stability)";
				case  2: return "Sch-M (Schema modification)";
				case  3: return "S (Shared)";
				case  4: return "U (Update)";
				case  5: return "X (Exclusive)";
				case  6: return "IS (Intent Shared)";
				case  7: return "IU (Intent Update)";
				case  8: return "IX (Intent Exclusive)";
				case  9: return "SIU (Shared Intent Update)";
				case 10: return "SIX (Shared Intent Exclusive)";
				case 11: return "UIX (Update Intent Exclusive)";
				case 12: return "BU (Used by bulk operations)";
				case 13: return "RangeS-S (Shared Key-Range and Shared Resource lock)";
				case 14: return "RangeS-U (Shared Key-Range and Update Resource lock)";
				case 15: return "RangeIn-N (Insert Key-Range and Null Resource lock)";
				case 16: return "RangeIn-S (created by an overlap of RangeI_N and S locks)";
				case 17: return "RangeIn-U (created by an overlap of RangeI_N and U locks)";
				case 18: return "RangeIn-X (created by an overlap of RangeI_N and X locks)";
				case 19: return "RangeX-S (created by an overlap of RangeI_N and RangeS_S locks)";
				case 20: return "RangeX-U (created by an overlap of RangeI_N and RangeS_U locks)";
				case 21: return "RangeX-X (Exclusive Key-Range and Exclusive Resource lock)";
			}
			return "(UNKNOWN) - " + mode;
		}

		public static String lockStatusStr(int status)
		{
			switch (status)
			{
				case 0: return "LOCK REQ STATUS";
				case 1: return "GRANT";
				case 2: return "CNVT";
				case 3: return "WAIT";
				case 4: return "RELN";
				case 5: return "BLCKN";
			}
			return "(UNKNOWN) - " + status;
		}
	}

	public static String getSqlTextFromXmlPlan(String xmlPlan)
	{
		if (StringUtil.isNullOrBlank(xmlPlan))
			return "";

		if ( ! StringUtil.startsWithIgnoreBlankIgnoreCase(xmlPlan, "<ShowPlanXML") )
			return "";

		// Copy strong or XML Parse
		int startPos = xmlPlan.indexOf("StatementText=\"");
		if (startPos != -1)
		{
			startPos += "StatementText=\"".length();
			int endPos = xmlPlan.indexOf("StatementId=\"", startPos);
			if (endPos != -1)
			{
				endPos -= 2; // |StatementText="  ... " | // ends with |" | so 2 characters should be removed from substring
				String tmp = xmlPlan.substring(startPos, endPos);

				// Translate HTML chars into "actual" characters...
				tmp = StringEscapeUtils.unescapeHtml4(tmp);

				return tmp;
			}
		}

		return "";
	}

//public static void test(String inStr)
//{
//	System.out.println();
//
//	String sqlText = getSqlTextFromXmlPlan(inStr);
//	System.out.println("SQL=|" + sqlText + "|.");
//	try 
//	{
//		List<String> tableList = SqlParserUtils.getTables(sqlText, true); 
//		System.out.println("Tables=" + tableList);
//	}
//	catch (ParseException pex) { pex.printStackTrace();; }
//}
//public static void main(String[] args)
//{
//	test("<ShowPlanXML xmlns=\"http://schemas.microsoft.com/sqlserver/2004/07/showplan\" Version=\"1.539\" Build=\"15.0.4033.1\"><BatchSequence><Batch><Statements><StmtSimple StatementText=\"select 'filestore' from [filestore].sys.database_query_store_options where desired_state != 0\" StatementId=\"1\" StatementCompId=\"19\" StatementType=\"SELECT\" RetrievedFromCache=\"true\" StatementSubTreeCost=\"0.00153116\" StatementEstRows=\"510\" SecurityPolicyApplied=\"false\" StatementOptmLevel=\"FULL\" QueryHash=\"0xD1399B1175C329D1\" QueryPlanHash=\"0x0BA03612B137E054\" StatementOptmEarlyAbortReason=\"GoodEnoughPlanFound\" CardinalityEstimationModelVersion=\"150\" ParameterizedText=\"(@1 tinyint)SELECT 'filestore' FROM [filestore].[sys].[database_query_store_options] WHERE [desired_state]&lt;&gt;@1\"><StatementSetOptions QUOTED_IDENTIFIER=\"false\" ARITHABORT=\"false\" CONCAT_NULL_YIELDS_NULL=\"true\" ANSI_NULLS=\"true\" ANSI_PADDING=\"true\" ANSI_WARNINGS=\"true\" NUMERIC_ROUNDABORT=\"false\"/><QueryPlan CachedPlanSize=\"24\" CompileTime=\"1\" CompileCPU=\"1\" CompileMemory=\"368\"><MemoryGrantInfo SerialRequiredMemory=\"0\" SerialDesiredMemory=\"0\" GrantedMemory=\"0\" MaxUsedMemory=\"0\"/><OptimizerHardwareDependentProperties EstimatedAvailableMemoryGrant=\"1315430\" EstimatedPagesCached=\"328857\" EstimatedAvailableDegreeOfParallelism=\"2\" MaxCompileMemory=\"31491912\"/><RelOp NodeId=\"0\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"510\" EstimateIO=\"0\" EstimateCPU=\"5.1e-05\" AvgRowSize=\"15\" EstimatedTotalSubtreeCost=\"0.00153116\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Expr1006\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1006\"/><ScalarOperator ScalarString=\"'filestore'\"><Const ConstValue=\"'filestore'\"/></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"1\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"510\" EstimateIO=\"0\" EstimateCPU=\"0.00048\" AvgRowSize=\"9\" EstimatedTotalSubtreeCost=\"0.00148016\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList/><Filter StartupExpression=\"0\"><RelOp NodeId=\"2\" PhysicalOp=\"Table-valued function\" LogicalOp=\"Table-valued function\" EstimateRows=\"1000\" EstimateIO=\"0\" EstimateCPU=\"0.00100016\" AvgRowSize=\"9\" EstimatedTotalSubtreeCost=\"0.00100016\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Table=\"[QUERY_STORE_OPTIONS]\" Column=\"desired_state\"/></OutputList><TableValuedFunction><DefinedValues><DefinedValue><ColumnReference Table=\"[QUERY_STORE_OPTIONS]\" Column=\"desired_state\"/></DefinedValue></DefinedValues><Object Table=\"[QUERY_STORE_OPTIONS]\"/></TableValuedFunction></RelOp><Predicate><ScalarOperator ScalarString=\"QUERY_STORE_OPTIONS.[desired_state]&lt;&gt;(0)\"><Compare CompareOp=\"NE\"><ScalarOperator><Identifier><ColumnReference Table=\"[QUERY_STORE_OPTIONS]\" Column=\"desired_state\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Predicate></Filter></RelOp></ComputeScalar></RelOp><ParameterList><ColumnReference Column=\"@1\" ParameterDataType=\"tinyint\" ParameterCompiledValue=\"(0)\"/></ParameterList></QueryPlan></StmtSimple></Statements></Batch></BatchSequence></ShowPlanXML>");
//	test("<ShowPlanXML xmlns=\"http://schemas.microsoft.com/sqlserver/2004/07/showplan\" Version=\"1.539\" Build=\"15.0.4033.1\"><BatchSequence><Batch><Statements><StmtSimple StatementText=\"(@P0 nvarchar(4000))select agarochkon0_.formular_ref as formular9_8_0_, agarochkon0_.id as id1_8_0_, agarochkon0_.id as id1_8_1_, agarochkon0_.uuid as uuid2_8_1_, agarochkon0_.agarandel as agarande3_8_1_, agarochkon0_.agt_bolag_ref as agt_bola8_8_1_, agarochkon0_.formular_ref as formular9_8_1_, agarochkon0_.person_el_org_nummer as person_e4_8_1_, agarochkon0_.kundbolaget as kundbola5_8_1_, agarochkon0_.namn as namn6_8_1_, agarochkon0_.person as person7_8_1_, agareentit1_.id as id1_8_2_, agareentit1_.uuid as uuid2_8_2_, agareentit1_.agarandel as agarande3_8_2_, agareentit1_.agt_bolag_ref as agt_bola8_8_2_, agareentit1_.formular_ref as formular9_8_2_, agareentit1_.person_el_org_nummer as person_e4_8_2_, agareentit1_.kundbolaget as kundbola5_8_2_, agareentit1_.namn as namn6_8_2_, agareentit1_.person as person7_8_2_ from agare agarochkon0_ left outer join agare agareentit1_ on agarochkon0_.agt_bolag_ref=agareentit1_.id where agarochkon0_.formular_ref=@P0\" StatementId=\"1\" StatementCompId=\"1\" StatementType=\"SELECT\" RetrievedFromCache=\"true\" StatementSubTreeCost=\"0.0158579\" StatementEstRows=\"2.70758\" SecurityPolicyApplied=\"false\" StatementOptmLevel=\"FULL\" QueryHash=\"0x48CEA19DC0977D4A\" QueryPlanHash=\"0x297731F77B874302\" StatementOptmEarlyAbortReason=\"GoodEnoughPlanFound\" CardinalityEstimationModelVersion=\"150\"><StatementSetOptions QUOTED_IDENTIFIER=\"true\" ARITHABORT=\"false\" CONCAT_NULL_YIELDS_NULL=\"true\" ANSI_NULLS=\"true\" ANSI_PADDING=\"true\" ANSI_WARNINGS=\"true\" NUMERIC_ROUNDABORT=\"false\"/><QueryPlan CachedPlanSize=\"56\" CompileTime=\"3\" CompileCPU=\"3\" CompileMemory=\"512\"><MemoryGrantInfo SerialRequiredMemory=\"0\" SerialDesiredMemory=\"0\" GrantedMemory=\"0\" MaxUsedMemory=\"0\"/><OptimizerHardwareDependentProperties EstimatedAvailableMemoryGrant=\"1315430\" EstimatedPagesCached=\"328857\" EstimatedAvailableDegreeOfParallelism=\"2\" MaxCompileMemory=\"31345144\"/><OptimizerStatsUsage><StatisticsInfo LastUpdate=\"2021-12-09T01:42:54.71\" ModificationCount=\"18\" SamplingPercent=\"100\" Statistics=\"[INDEX_Agare__Formular_ref__FK]\" Table=\"[Agare]\" Schema=\"[dbo]\" Database=\"[kyc]\"/><StatisticsInfo LastUpdate=\"2021-12-09T01:42:54.61\" ModificationCount=\"18\" SamplingPercent=\"100\" Statistics=\"[INDEX_Agare__Agt_bolag_ref__FK]\" Table=\"[Agare]\" Schema=\"[dbo]\" Database=\"[kyc]\"/><StatisticsInfo LastUpdate=\"2021-10-26T18:08:36.19\" ModificationCount=\"990\" SamplingPercent=\"100\" Statistics=\"[CONSTRAINT_Agare_PK]\" Table=\"[Agare]\" Schema=\"[dbo]\" Database=\"[kyc]\"/><StatisticsInfo LastUpdate=\"2021-12-09T01:42:54.66\" ModificationCount=\"18\" SamplingPercent=\"100\" Statistics=\"[UQ__Agare__65A475E6A001D095]\" Table=\"[Agare]\" Schema=\"[dbo]\" Database=\"[kyc]\"/></OptimizerStatsUsage><RelOp NodeId=\"0\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Left Outer Join\" EstimateRows=\"2.70758\" EstimateIO=\"0\" EstimateCPU=\"1.1171e-05\" AvgRowSize=\"1274\" EstimatedTotalSubtreeCost=\"0.0158579\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Id\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"UUID\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Namn\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Person_el_org_nummer\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Kundbolaget\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Person\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Agarandel\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Formular_ref\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Agt_bolag_ref\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Id\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"UUID\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Namn\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Person_el_org_nummer\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Kundbolaget\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Person\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Agarandel\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Formular_ref\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Agt_bolag_ref\"/></OutputList><NestedLoops Optimized=\"0\"><OuterReferences><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Agt_bolag_ref\"/></OuterReferences><RelOp NodeId=\"2\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Inner Join\" EstimateRows=\"2.67249\" EstimateIO=\"0\" EstimateCPU=\"1.1171e-05\" AvgRowSize=\"590\" EstimatedTotalSubtreeCost=\"0.00968253\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Id\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"UUID\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Namn\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Person_el_org_nummer\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Kundbolaget\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Person\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Agarandel\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Formular_ref\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Agt_bolag_ref\"/></OutputList><NestedLoops Optimized=\"0\"><OuterReferences><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Id\"/></OuterReferences><RelOp NodeId=\"3\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Inner Join\" EstimateRows=\"2.67249\" EstimatedRowsRead=\"2.67249\" EstimateIO=\"0.003125\" EstimateCPU=\"0.00015994\" AvgRowSize=\"172\" EstimatedTotalSubtreeCost=\"0.00328494\" TableCardinality=\"40377\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Id\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Formular_ref\"/></OutputList><NestedLoops Optimized=\"0\"><OuterReferences><ColumnReference Column=\"Expr1004\"/><ColumnReference Column=\"Expr1005\"/><ColumnReference Column=\"Expr1003\"/></OuterReferences><RelOp NodeId=\"4\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"0\" AvgRowSize=\"271\" EstimatedTotalSubtreeCost=\"0\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Expr1004\"/><ColumnReference Column=\"Expr1005\"/><ColumnReference Column=\"Expr1003\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ValueVector><ColumnReference Column=\"Expr1004\"/><ColumnReference Column=\"Expr1005\"/><ColumnReference Column=\"Expr1003\"/></ValueVector><ScalarOperator ScalarString=\"GetRangeThroughConvert([@P0],[@P0],(62))\"><Intrinsic FunctionName=\"GetRangeThroughConvert\"><ScalarOperator><Identifier><ColumnReference Column=\"@P0\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Column=\"@P0\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(62)\"/></ScalarOperator></Intrinsic></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"5\" PhysicalOp=\"Constant Scan\" LogicalOp=\"Constant Scan\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"0\" AvgRowSize=\"0\" EstimatedTotalSubtreeCost=\"0\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList/><ConstantScan/></RelOp></ComputeScalar></RelOp><RelOp NodeId=\"6\" PhysicalOp=\"Index Seek\" LogicalOp=\"Index Seek\" EstimateRows=\"2.67249\" EstimatedRowsRead=\"2.67249\" EstimateIO=\"0.003125\" EstimateCPU=\"0.00015994\" AvgRowSize=\"172\" EstimatedTotalSubtreeCost=\"0.00328494\" TableCardinality=\"40377\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Id\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Formular_ref\"/></OutputList><IndexScan Ordered=\"1\" ScanDirection=\"FORWARD\" ForcedIndex=\"0\" ForceSeek=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Id\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Formular_ref\"/></DefinedValue></DefinedValues><Object Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Index=\"[INDEX_Agare__Formular_ref__FK]\" Alias=\"[agarochkon0_]\" IndexKind=\"NonClustered\" Storage=\"RowStore\"/><SeekPredicates><SeekPredicateNew><SeekKeys><StartRange ScanType=\"GT\"><RangeColumns><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Formular_ref\"/></RangeColumns><RangeExpressions><ScalarOperator ScalarString=\"[Expr1004]\"><Identifier><ColumnReference Column=\"Expr1004\"/></Identifier></ScalarOperator></RangeExpressions></StartRange><EndRange ScanType=\"LT\"><RangeColumns><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Formular_ref\"/></RangeColumns><RangeExpressions><ScalarOperator ScalarString=\"[Expr1005]\"><Identifier><ColumnReference Column=\"Expr1005\"/></Identifier></ScalarOperator></RangeExpressions></EndRange></SeekKeys></SeekPredicateNew></SeekPredicates><Predicate><ScalarOperator ScalarString=\"CONVERT_IMPLICIT(nvarchar(255),[kyc].[dbo].[Agare].[Formular_ref] as [agarochkon0_].[Formular_ref],0)=[@P0]\"><Compare CompareOp=\"EQ\"><ScalarOperator><Convert DataType=\"nvarchar\" Length=\"510\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Identifier><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Formular_ref\"/></Identifier></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Identifier><ColumnReference Column=\"@P0\"/></Identifier></ScalarOperator></Compare></ScalarOperator></Predicate></IndexScan></RelOp></NestedLoops></RelOp><RelOp NodeId=\"8\" PhysicalOp=\"Clustered Index Seek\" LogicalOp=\"Clustered Index Seek\" EstimateRows=\"1\" EstimateIO=\"0.003125\" EstimateCPU=\"0.0001581\" AvgRowSize=\"530\" EstimatedTotalSubtreeCost=\"0.00638487\" TableCardinality=\"40377\" Parallel=\"0\" EstimateRebinds=\"1.67249\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"UUID\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Namn\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Person_el_org_nummer\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Kundbolaget\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Person\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Agarandel\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Agt_bolag_ref\"/></OutputList><IndexScan Lookup=\"1\" Ordered=\"1\" ScanDirection=\"FORWARD\" ForcedIndex=\"0\" ForceSeek=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"UUID\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Namn\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Person_el_org_nummer\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Kundbolaget\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Person\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Agarandel\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Agt_bolag_ref\"/></DefinedValue></DefinedValues><Object Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Index=\"[CONSTRAINT_Agare_PK]\" Alias=\"[agarochkon0_]\" TableReferenceId=\"-1\" IndexKind=\"Clustered\" Storage=\"RowStore\"/><SeekPredicates><SeekPredicateNew><SeekKeys><Prefix ScanType=\"EQ\"><RangeColumns><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Id\"/></RangeColumns><RangeExpressions><ScalarOperator ScalarString=\"[kyc].[dbo].[Agare].[Id] as [agarochkon0_].[Id]\"><Identifier><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Id\"/></Identifier></ScalarOperator></RangeExpressions></Prefix></SeekKeys></SeekPredicateNew></SeekPredicates></IndexScan></RelOp></NestedLoops></RelOp><RelOp NodeId=\"9\" PhysicalOp=\"Clustered Index Seek\" LogicalOp=\"Clustered Index Seek\" EstimateRows=\"1\" EstimatedRowsRead=\"1\" EstimateIO=\"0.003125\" EstimateCPU=\"0.0001581\" AvgRowSize=\"694\" EstimatedTotalSubtreeCost=\"0.00616393\" TableCardinality=\"40377\" Parallel=\"0\" EstimateRebinds=\"1.59385\" EstimateRewinds=\"0.0786434\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Id\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"UUID\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Namn\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Person_el_org_nummer\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Kundbolaget\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Person\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Agarandel\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Formular_ref\"/><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Agt_bolag_ref\"/></OutputList><IndexScan Ordered=\"1\" ScanDirection=\"FORWARD\" ForcedIndex=\"0\" ForceSeek=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Id\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"UUID\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Namn\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Person_el_org_nummer\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Kundbolaget\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Person\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Agarandel\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Formular_ref\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Agt_bolag_ref\"/></DefinedValue></DefinedValues><Object Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Index=\"[CONSTRAINT_Agare_PK]\" Alias=\"[agareentit1_]\" IndexKind=\"Clustered\" Storage=\"RowStore\"/><SeekPredicates><SeekPredicateNew><SeekKeys><Prefix ScanType=\"EQ\"><RangeColumns><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agareentit1_]\" Column=\"Id\"/></RangeColumns><RangeExpressions><ScalarOperator ScalarString=\"[kyc].[dbo].[Agare].[Agt_bolag_ref] as [agarochkon0_].[Agt_bolag_ref]\"><Identifier><ColumnReference Database=\"[kyc]\" Schema=\"[dbo]\" Table=\"[Agare]\" Alias=\"[agarochkon0_]\" Column=\"Agt_bolag_ref\"/></Identifier></ScalarOperator></RangeExpressions></Prefix></SeekKeys></SeekPredicateNew></SeekPredicates></IndexScan></RelOp></NestedLoops></RelOp><ParameterList><ColumnReference Column=\"@P0\" ParameterDataType=\"nvarchar(4000)\" ParameterCompiledValue=\"N'2c99812a75d4bd100175d9b9e09b0162'\"/></ParameterList></QueryPlan></StmtSimple></Statements></Batch></BatchSequence></ShowPlanXML>");
//	test("<ShowPlanXML xmlns=\"http://schemas.microsoft.com/sqlserver/2004/07/showplan\" Version=\"1.539\" Build=\"15.0.4033.1\"><BatchSequence><Batch><Statements><StmtSimple StatementText=\"&#x0A;declare @dblist nvarchar(1024)&#x0A;select&#x0A;@dblist =&#x0A;CASE&#x0A;WHEN @dblist is null THEN name&#x0A;--&#x09;&#x09;&#x09;&#x09;ELSE @dblist     + ', ' + name&#x0A;ELSE @dblist     + ' '  + name&#x0A;END&#x0A;from sys.databases&#x0A;where name not in ('model', 'tempdb')&#x0A;  and recovery_model_desc = 'FULL'\" StatementId=\"1\" StatementCompId=\"1\" StatementType=\"SELECT\" RetrievedFromCache=\"true\" StatementSubTreeCost=\"0.0198402\" StatementEstRows=\"9.69152\" SecurityPolicyApplied=\"false\" StatementOptmLevel=\"FULL\" QueryHash=\"0x8995AECCE586BCF6\" QueryPlanHash=\"0x5700FDE661DECB34\" StatementOptmEarlyAbortReason=\"GoodEnoughPlanFound\" CardinalityEstimationModelVersion=\"150\"><StatementSetOptions QUOTED_IDENTIFIER=\"false\" ARITHABORT=\"false\" CONCAT_NULL_YIELDS_NULL=\"true\" ANSI_NULLS=\"true\" ANSI_PADDING=\"true\" ANSI_WARNINGS=\"true\" NUMERIC_ROUNDABORT=\"false\"/><QueryPlan NonParallelPlanReason=\"CouldNotGenerateValidParallelPlan\" CachedPlanSize=\"144\" CompileTime=\"26\" CompileCPU=\"26\" CompileMemory=\"3712\"><MemoryGrantInfo SerialRequiredMemory=\"0\" SerialDesiredMemory=\"0\" GrantedMemory=\"0\" MaxUsedMemory=\"0\"/><OptimizerHardwareDependentProperties EstimatedAvailableMemoryGrant=\"1315430\" EstimatedPagesCached=\"328857\" EstimatedAvailableDegreeOfParallelism=\"2\" MaxCompileMemory=\"30975784\"/><OptimizerStatsUsage><StatisticsInfo LastUpdate=\"2022-02-08T23:39:23.28\" ModificationCount=\"606\" SamplingPercent=\"100\" Statistics=\"[clst]\" Table=\"[sysobjvalues]\" Schema=\"[sys]\" Database=\"[master]\"/><StatisticsInfo LastUpdate=\"2020-03-14T17:35:11.48\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[cl]\" Table=\"[syspalvalues]\" Schema=\"[sys]\" Database=\"[mssqlsystemresource]\"/><StatisticsInfo LastUpdate=\"2009-04-13T12:59:17.03\" ModificationCount=\"30\" SamplingPercent=\"100\" Statistics=\"[clst]\" Table=\"[sysdbreg]\" Schema=\"[sys]\" Database=\"[master]\"/><StatisticsInfo LastUpdate=\"2022-02-09T00:39:25.51\" ModificationCount=\"404\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000004_0000003C]\" Table=\"[sysobjvalues]\" Schema=\"[sys]\" Database=\"[master]\"/><StatisticsInfo LastUpdate=\"2022-02-08T00:35:35.85\" ModificationCount=\"312\" SamplingPercent=\"100\" Statistics=\"[clst]\" Table=\"[syssingleobjrefs]\" Schema=\"[sys]\" Database=\"[master]\"/><StatisticsInfo LastUpdate=\"2022-02-08T00:35:35.86\" ModificationCount=\"312\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000001_0000004A]\" Table=\"[syssingleobjrefs]\" Schema=\"[sys]\" Database=\"[master]\"/><StatisticsInfo LastUpdate=\"2022-02-08T00:35:35.86\" ModificationCount=\"312\" SamplingPercent=\"100\" Statistics=\"[nc1]\" Table=\"[syssingleobjrefs]\" Schema=\"[sys]\" Database=\"[master]\"/><StatisticsInfo LastUpdate=\"2022-02-08T23:39:23.29\" ModificationCount=\"606\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000003_0000003C]\" Table=\"[sysobjvalues]\" Schema=\"[sys]\" Database=\"[master]\"/><StatisticsInfo LastUpdate=\"2022-02-08T23:39:23.29\" ModificationCount=\"606\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000002_0000003C]\" Table=\"[sysobjvalues]\" Schema=\"[sys]\" Database=\"[master]\"/></OptimizerStatsUsage><RelOp NodeId=\"0\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"9.69152\" EstimateIO=\"0\" EstimateCPU=\"9.69152e-07\" AvgRowSize=\"1035\" EstimatedTotalSubtreeCost=\"0.0198402\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Expr1086\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1086\"/><ScalarOperator ScalarString=\"CONVERT_IMPLICIT(nvarchar(1024),CASE WHEN [@dblist] IS NULL THEN CONVERT(nvarchar(128),isnull(DBPROP.[cl_logical_database_name],[master].[sys].[sysdbreg].[name]),0) ELSE [@dblist]+N' '+CONVERT(nvarchar(128),isnull(DBPROP.[cl_logical_database_name],[master].[sys].[sysdbreg].[name]),0) END,0)\"><Convert DataType=\"nvarchar\" Length=\"2048\" Style=\"0\" Implicit=\"1\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"IS\"><ScalarOperator><Identifier><ColumnReference Column=\"@dblist\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Convert DataType=\"nvarchar\" Length=\"256\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Intrinsic FunctionName=\"isnull\"><ScalarOperator><Identifier><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/></Identifier></ScalarOperator></Intrinsic></ScalarOperator></Convert></ScalarOperator></Then><Else><ScalarOperator><Arithmetic Operation=\"ADD\"><ScalarOperator><Arithmetic Operation=\"ADD\"><ScalarOperator><Identifier><ColumnReference Column=\"@dblist\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"N' '\"/></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Convert DataType=\"nvarchar\" Length=\"256\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Intrinsic FunctionName=\"isnull\"><ScalarOperator><Identifier><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/></Identifier></ScalarOperator></Intrinsic></ScalarOperator></Convert></ScalarOperator></Arithmetic></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"1\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Left Outer Join\" EstimateRows=\"9.69152\" EstimateIO=\"0\" EstimateCPU=\"4.66648e-05\" AvgRowSize=\"269\" EstimatedTotalSubtreeCost=\"0.0198392\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/></OutputList><NestedLoops Optimized=\"0\"><Predicate><ScalarOperator ScalarString=\"[master].[sys].[sysobjvalues].[objid] as [rda].[objid]=[master].[sys].[sysdbreg].[id]\"><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysobjvalues]\" Alias=\"[rda]\" Column=\"objid\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/></Identifier></ScalarOperator></Compare></ScalarOperator></Predicate><RelOp NodeId=\"2\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Left Outer Join\" EstimateRows=\"11.1638\" EstimateIO=\"0\" EstimateCPU=\"4.45703e-05\" AvgRowSize=\"273\" EstimatedTotalSubtreeCost=\"0.0148938\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/></OutputList><NestedLoops Optimized=\"0\"><OuterReferences><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/></OuterReferences><RelOp NodeId=\"3\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Left Outer Join\" EstimateRows=\"10.6628\" EstimateIO=\"0\" EstimateCPU=\"2.43752e-05\" AvgRowSize=\"273\" EstimatedTotalSubtreeCost=\"0.0100334\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/></OutputList><NestedLoops Optimized=\"0\"><Predicate><ScalarOperator ScalarString=\"SYSFULLTEXTLANGUAGES.[lcid]=DBPROP.[default_fulltext_language]\"><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Table=\"[SYSFULLTEXTLANGUAGES]\" Column=\"lcid\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Table=\"[DBPROP]\" Column=\"default_fulltext_language\"/></Identifier></ScalarOperator></Compare></ScalarOperator></Predicate><RelOp NodeId=\"4\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Left Outer Join\" EstimateRows=\"5.83138\" EstimateIO=\"0\" EstimateCPU=\"2.43752e-05\" AvgRowSize=\"277\" EstimatedTotalSubtreeCost=\"0.0100013\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_fulltext_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/></OutputList><NestedLoops Optimized=\"0\"><OuterReferences><ColumnReference Table=\"[DBPROP]\" Column=\"default_language\"/></OuterReferences><RelOp NodeId=\"5\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Left Outer Join\" EstimateRows=\"1.00007\" EstimateIO=\"0\" EstimateCPU=\"4.18e-06\" AvgRowSize=\"281\" EstimatedTotalSubtreeCost=\"0.00992641\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_fulltext_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/></OutputList><NestedLoops Optimized=\"0\"><OuterReferences><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/></OuterReferences><RelOp NodeId=\"6\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"2.68e-06\" AvgRowSize=\"281\" EstimatedTotalSubtreeCost=\"0.00663865\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_fulltext_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/></OutputList><Filter StartupExpression=\"0\"><RelOp NodeId=\"7\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Left Outer Join\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"4.18e-06\" AvgRowSize=\"347\" EstimatedTotalSubtreeCost=\"0.00663597\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"status\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_fulltext_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syspalvalues]\" Alias=\"[ro]\" Column=\"name\"/></OutputList><NestedLoops Optimized=\"0\"><OuterReferences><ColumnReference Table=\"[DBPROP]\" Column=\"recovery_model\"/></OuterReferences><RelOp NodeId=\"8\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"1.584e-06\" AvgRowSize=\"286\" EstimatedTotalSubtreeCost=\"0.00334869\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"status\"/><ColumnReference Table=\"[DBPROP]\" Column=\"recovery_model\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_fulltext_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/></OutputList><Filter StartupExpression=\"0\"><RelOp NodeId=\"9\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"1.8\" EstimateIO=\"0\" EstimateCPU=\"1.8e-07\" AvgRowSize=\"416\" EstimatedTotalSubtreeCost=\"0.0033471\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"status\"/><ColumnReference Table=\"[DBPROP]\" Column=\"recovery_model\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_fulltext_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/><ColumnReference Column=\"Expr1110\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1110\"/><ScalarOperator ScalarString=\"CONVERT(nvarchar(128),isnull(DBPROP.[cl_logical_database_name],[master].[sys].[sysdbreg].[name]),0)\"><Convert DataType=\"nvarchar\" Length=\"256\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Intrinsic FunctionName=\"isnull\"><ScalarOperator><Identifier><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/></Identifier></ScalarOperator></Intrinsic></ScalarOperator></Convert></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"10\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Left Outer Join\" EstimateRows=\"1.8\" EstimateIO=\"0\" EstimateCPU=\"7.524e-06\" AvgRowSize=\"286\" EstimatedTotalSubtreeCost=\"0.00334692\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"status\"/><ColumnReference Table=\"[DBPROP]\" Column=\"recovery_model\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_fulltext_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/></OutputList><NestedLoops Optimized=\"0\"><OuterReferences><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/></OuterReferences><RelOp NodeId=\"11\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"1.8\" EstimateIO=\"0\" EstimateCPU=\"3.564e-05\" AvgRowSize=\"147\" EstimatedTotalSubtreeCost=\"0.00333744\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"status\"/></OutputList><Filter StartupExpression=\"0\"><RelOp NodeId=\"12\" PhysicalOp=\"Clustered Index Seek\" LogicalOp=\"Clustered Index Seek\" EstimateRows=\"18\" EstimatedRowsRead=\"18\" EstimateIO=\"0.003125\" EstimateCPU=\"0.0001768\" AvgRowSize=\"147\" EstimatedTotalSubtreeCost=\"0.0033018\" TableCardinality=\"18\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"status\"/></OutputList><IndexScan Ordered=\"1\" ScanDirection=\"FORWARD\" ForcedIndex=\"0\" ForceSeek=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"name\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"status\"/></DefinedValue></DefinedValues><Object Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Index=\"[clst]\" IndexKind=\"Clustered\" Storage=\"RowStore\"/><SeekPredicates><SeekPredicateNew><SeekKeys><EndRange ScanType=\"LT\"><RangeColumns><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/></RangeColumns><RangeExpressions><ScalarOperator ScalarString=\"(32767)\"><Const ConstValue=\"(32767)\"/></ScalarOperator></RangeExpressions></EndRange></SeekKeys></SeekPredicateNew></SeekPredicates></IndexScan></RelOp><Predicate><ScalarOperator ScalarString=\"repl_sys_db_visible([master].[sys].[sysdbreg].[id])=(1) AND has_access('DB',CASE WHEN serverproperty('EngineEdition')=5 THEN CONVERT_IMPLICIT(int,db_id(),0) ELSE [master].[sys].[sysdbreg].[id] END)=(1)\"><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Intrinsic FunctionName=\"repl_sys_db_visible\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/></Identifier></ScalarOperator></Intrinsic></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Intrinsic FunctionName=\"has_access\"><ScalarOperator><Const ConstValue=\"'DB'\"/></ScalarOperator><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"ConstExpr1087\"><ScalarOperator><Intrinsic FunctionName=\"serverproperty\"><ScalarOperator><Const ConstValue=\"'EngineEdition'\"/></ScalarOperator></Intrinsic></ScalarOperator></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"5\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Convert DataType=\"int\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Identifier><ColumnReference Column=\"ConstExpr1088\"><ScalarOperator><Intrinsic FunctionName=\"db_id\"><ScalarOperator><Const ConstValue=\"\"/></ScalarOperator></Intrinsic></ScalarOperator></ColumnReference></Identifier></ScalarOperator></Convert></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator><ScalarOperator><Const ConstValue=\"\"/></ScalarOperator><ScalarOperator><Const ConstValue=\"\"/></ScalarOperator></Intrinsic></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Predicate></Filter></RelOp><RelOp NodeId=\"13\" PhysicalOp=\"Table-valued function\" LogicalOp=\"Table-valued function\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"1.157e-06\" AvgRowSize=\"148\" EstimatedTotalSubtreeCost=\"1.957e-06\" Parallel=\"0\" EstimateRebinds=\"0.8\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Table=\"[DBPROP]\" Column=\"recovery_model\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"default_fulltext_language\"/><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/></OutputList><TableValuedFunction><DefinedValues><DefinedValue><ColumnReference Table=\"[DBPROP]\" Column=\"recovery_model\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[DBPROP]\" Column=\"default_language\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[DBPROP]\" Column=\"default_fulltext_language\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[DBPROP]\" Column=\"cl_logical_database_name\"/></DefinedValue></DefinedValues><Object Table=\"[DBPROP]\"/><ParameterList><ScalarOperator ScalarString=\"CASE WHEN serverproperty('EngineEdition')=5 THEN CONVERT_IMPLICIT(int,db_id(),0) ELSE [master].[sys].[sysdbreg].[id] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Intrinsic FunctionName=\"serverproperty\"><ScalarOperator><Const ConstValue=\"'EngineEdition'\"/></ScalarOperator></Intrinsic></ScalarOperator><ScalarOperator><Const ConstValue=\"5\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Convert DataType=\"int\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Intrinsic FunctionName=\"db_id\"><ScalarOperator><Const ConstValue=\"\"/></ScalarOperator></Intrinsic></ScalarOperator></Convert></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></ParameterList></TableValuedFunction></RelOp></NestedLoops></RelOp></ComputeScalar></RelOp><Predicate><ScalarOperator ScalarString=\"[Expr1110]&lt;&gt;N'tempdb' AND [Expr1110]&lt;&gt;N'model'\"><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"NE\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1110\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"N'tempdb'\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"NE\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1110\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"N'model'\"/></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Predicate></Filter></RelOp><RelOp NodeId=\"14\" PhysicalOp=\"Clustered Index Seek\" LogicalOp=\"Clustered Index Seek\" EstimateRows=\"1\" EstimatedRowsRead=\"1\" EstimateIO=\"0.003125\" EstimateCPU=\"0.0001581\" AvgRowSize=\"71\" EstimatedTotalSubtreeCost=\"0.0032831\" TableCardinality=\"905\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syspalvalues]\" Alias=\"[ro]\" Column=\"name\"/></OutputList><IndexScan Ordered=\"1\" ScanDirection=\"FORWARD\" ForcedIndex=\"0\" ForceSeek=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syspalvalues]\" Alias=\"[ro]\" Column=\"name\"/></DefinedValue></DefinedValues><Object Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syspalvalues]\" Index=\"[cl]\" Alias=\"[ro]\" IndexKind=\"Clustered\" Storage=\"RowStore\"/><SeekPredicates><SeekPredicateNew><SeekKeys><Prefix ScanType=\"EQ\"><RangeColumns><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syspalvalues]\" Alias=\"[ro]\" Column=\"class\"/><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syspalvalues]\" Alias=\"[ro]\" Column=\"value\"/></RangeColumns><RangeExpressions><ScalarOperator ScalarString=\"'DBRO'\"><Const ConstValue=\"'DBRO'\"/></ScalarOperator><ScalarOperator ScalarString=\"DBPROP.[recovery_model]\"><Identifier><ColumnReference Table=\"[DBPROP]\" Column=\"recovery_model\"/></Identifier></ScalarOperator></RangeExpressions></Prefix></SeekKeys></SeekPredicateNew></SeekPredicates></IndexScan></RelOp></NestedLoops></RelOp><Predicate><ScalarOperator ScalarString=\"CASE WHEN serverproperty('EngineEdition')=5 THEN CONVERT_IMPLICIT(nvarchar(60),CASE WHEN CONVERT(bit,[master].[sys].[sysdbreg].[status]&amp;(8),0)=(1) THEN N'SIMPLE' ELSE CASE WHEN CONVERT(bit,[master].[sys].[sysdbreg].[status]&amp;(4),0)=(1) THEN N'BULK_LOGGED' ELSE N'FULL' END END,0) ELSE [mssqlsystemresource].[sys].[syspalvalues].[name] as [ro].[name] END=N'FULL'\"><Compare CompareOp=\"EQ\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"ConstExpr1108\"><ScalarOperator><Intrinsic FunctionName=\"serverproperty\"><ScalarOperator><Const ConstValue=\"'EngineEdition'\"/></ScalarOperator></Intrinsic></ScalarOperator></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"5\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Convert DataType=\"nvarchar\" Length=\"120\" Style=\"0\" Implicit=\"1\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Convert DataType=\"bit\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"status\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(8)\"/></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"N'SIMPLE'\"/></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Convert DataType=\"bit\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"status\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(4)\"/></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"N'BULK_LOGGED'\"/></ScalarOperator></Then><Else><ScalarOperator><Const ConstValue=\"N'FULL'\"/></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syspalvalues]\" Alias=\"[ro]\" Column=\"name\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator><ScalarOperator><Const ConstValue=\"N'FULL'\"/></ScalarOperator></Compare></ScalarOperator></Predicate></Filter></RelOp><RelOp NodeId=\"15\" PhysicalOp=\"Clustered Index Seek\" LogicalOp=\"Clustered Index Seek\" EstimateRows=\"1\" EstimatedRowsRead=\"1\" EstimateIO=\"0.003125\" EstimateCPU=\"0.0001581\" AvgRowSize=\"11\" EstimatedTotalSubtreeCost=\"0.0032831\" TableCardinality=\"225\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList/><IndexScan Ordered=\"1\" ScanDirection=\"FORWARD\" ForcedIndex=\"0\" ForceSeek=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues/><Object Database=\"[master]\" Schema=\"[sys]\" Table=\"[syssingleobjrefs]\" Index=\"[clst]\" Alias=\"[ssr]\" IndexKind=\"Clustered\" Storage=\"RowStore\"/><SeekPredicates><SeekPredicateNew><SeekKeys><Prefix ScanType=\"EQ\"><RangeColumns><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syssingleobjrefs]\" Alias=\"[ssr]\" Column=\"depid\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syssingleobjrefs]\" Alias=\"[ssr]\" Column=\"class\"/></RangeColumns><RangeExpressions><ScalarOperator ScalarString=\"[master].[sys].[sysdbreg].[id]\"><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/></Identifier></ScalarOperator><ScalarOperator ScalarString=\"(108)\"><Const ConstValue=\"(108)\"/></ScalarOperator></RangeExpressions></Prefix></SeekKeys></SeekPredicateNew></SeekPredicates><Predicate><ScalarOperator ScalarString=\"[master].[sys].[syssingleobjrefs].[depid] as [ssr].[depid]&lt;(32767)\"><Compare CompareOp=\"LT\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syssingleobjrefs]\" Alias=\"[ssr]\" Column=\"depid\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(32767)\"/></ScalarOperator></Compare></ScalarOperator></Predicate></IndexScan></RelOp></NestedLoops></RelOp><RelOp NodeId=\"16\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"5.83095\" EstimateIO=\"0\" EstimateCPU=\"1.632e-05\" AvgRowSize=\"9\" EstimatedTotalSubtreeCost=\"5.04807e-05\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"7.28871e-05\" EstimatedExecutionMode=\"Row\"><OutputList/><Filter StartupExpression=\"0\"><RelOp NodeId=\"17\" PhysicalOp=\"Table-valued function\" LogicalOp=\"Table-valued function\" EstimateRows=\"34\" EstimateIO=\"0\" EstimateCPU=\"3.4157e-05\" AvgRowSize=\"11\" EstimatedTotalSubtreeCost=\"3.41595e-05\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"7.28871e-05\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Table=\"[SYSLANG]\" Column=\"lcid\"/></OutputList><TableValuedFunction><DefinedValues><DefinedValue><ColumnReference Table=\"[SYSLANG]\" Column=\"lcid\"/></DefinedValue></DefinedValues><Object Table=\"[SYSLANG]\"/><ParameterList><ScalarOperator ScalarString=\"(0)\"><Const ConstValue=\"(0)\"/></ScalarOperator><ScalarOperator ScalarString=\"NULL\"><Const ConstValue=\"NULL\"/></ScalarOperator><ScalarOperator ScalarString=\"(0)\"><Const ConstValue=\"(0)\"/></ScalarOperator><ScalarOperator ScalarString=\"NULL\"><Const ConstValue=\"NULL\"/></ScalarOperator><ScalarOperator ScalarString=\"(0)\"><Const ConstValue=\"(0)\"/></ScalarOperator><ScalarOperator ScalarString=\"NULL\"><Const ConstValue=\"NULL\"/></ScalarOperator></ParameterList></TableValuedFunction></RelOp><Predicate><ScalarOperator ScalarString=\"SYSLANG.[lcid]=DBPROP.[default_language]\"><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Table=\"[SYSLANG]\" Column=\"lcid\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Table=\"[DBPROP]\" Column=\"default_language\"/></Identifier></ScalarOperator></Compare></ScalarOperator></Predicate></Filter></RelOp></NestedLoops></RelOp><RelOp NodeId=\"18\" PhysicalOp=\"Table-valued function\" LogicalOp=\"Table-valued function\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"1.157e-06\" AvgRowSize=\"11\" EstimatedTotalSubtreeCost=\"5.98838e-06\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"4.83138\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Table=\"[SYSFULLTEXTLANGUAGES]\" Column=\"lcid\"/></OutputList><TableValuedFunction><DefinedValues><DefinedValue><ColumnReference Table=\"[SYSFULLTEXTLANGUAGES]\" Column=\"lcid\"/></DefinedValue></DefinedValues><Object Table=\"[SYSFULLTEXTLANGUAGES]\"/></TableValuedFunction></RelOp></NestedLoops></RelOp><RelOp NodeId=\"19\" PhysicalOp=\"Clustered Index Seek\" LogicalOp=\"Clustered Index Seek\" EstimateRows=\"1\" EstimatedRowsRead=\"1\" EstimateIO=\"0.003125\" EstimateCPU=\"0.0001581\" AvgRowSize=\"11\" EstimatedTotalSubtreeCost=\"0.00481078\" TableCardinality=\"666\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"9.66275\" EstimatedExecutionMode=\"Row\"><OutputList/><IndexScan Ordered=\"1\" ScanDirection=\"FORWARD\" ForcedIndex=\"0\" ForceSeek=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues/><Object Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysobjvalues]\" Index=\"[clst]\" Alias=\"[coll]\" IndexKind=\"Clustered\" Storage=\"RowStore\"/><SeekPredicates><SeekPredicateNew><SeekKeys><Prefix ScanType=\"EQ\"><RangeColumns><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysobjvalues]\" Alias=\"[coll]\" Column=\"valclass\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysobjvalues]\" Alias=\"[coll]\" Column=\"objid\"/><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysobjvalues]\" Alias=\"[coll]\" Column=\"subobjid\"/></RangeColumns><RangeExpressions><ScalarOperator ScalarString=\"(102)\"><Const ConstValue=\"(102)\"/></ScalarOperator><ScalarOperator ScalarString=\"[master].[sys].[sysdbreg].[id]\"><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysdbreg]\" Column=\"id\"/></Identifier></ScalarOperator><ScalarOperator ScalarString=\"(0)\"><Const ConstValue=\"(0)\"/></ScalarOperator></RangeExpressions></Prefix></SeekKeys></SeekPredicateNew></SeekPredicates><Predicate><ScalarOperator ScalarString=\"[master].[sys].[sysobjvalues].[objid] as [coll].[objid]&lt;(32767)\"><Compare CompareOp=\"LT\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysobjvalues]\" Alias=\"[coll]\" Column=\"objid\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(32767)\"/></ScalarOperator></Compare></ScalarOperator></Predicate></IndexScan></RelOp></NestedLoops></RelOp><RelOp NodeId=\"20\" PhysicalOp=\"Clustered Index Seek\" LogicalOp=\"Clustered Index Seek\" EstimateRows=\"1\" EstimatedRowsRead=\"1\" EstimateIO=\"0.003125\" EstimateCPU=\"0.0001581\" AvgRowSize=\"15\" EstimatedTotalSubtreeCost=\"0.00489\" TableCardinality=\"666\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"10.1638\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysobjvalues]\" Alias=\"[rda]\" Column=\"objid\"/></OutputList><IndexScan Ordered=\"1\" ScanDirection=\"FORWARD\" ForcedIndex=\"0\" ForceSeek=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysobjvalues]\" Alias=\"[rda]\" Column=\"objid\"/></DefinedValue></DefinedValues><Object Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysobjvalues]\" Index=\"[clst]\" Alias=\"[rda]\" IndexKind=\"Clustered\" Storage=\"RowStore\"/><SeekPredicates><SeekPredicateNew><SeekKeys><Prefix ScanType=\"EQ\"><RangeColumns><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysobjvalues]\" Alias=\"[rda]\" Column=\"valclass\"/></RangeColumns><RangeExpressions><ScalarOperator ScalarString=\"(116)\"><Const ConstValue=\"(116)\"/></ScalarOperator></RangeExpressions></Prefix><EndRange ScanType=\"LT\"><RangeColumns><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysobjvalues]\" Alias=\"[rda]\" Column=\"objid\"/></RangeColumns><RangeExpressions><ScalarOperator ScalarString=\"(32767)\"><Const ConstValue=\"(32767)\"/></ScalarOperator></RangeExpressions></EndRange></SeekKeys></SeekPredicateNew></SeekPredicates><Predicate><ScalarOperator ScalarString=\"[master].[sys].[sysobjvalues].[valnum] as [rda].[valnum]=(0)\"><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysobjvalues]\" Alias=\"[rda]\" Column=\"valnum\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Predicate></IndexScan></RelOp></NestedLoops></RelOp></ComputeScalar></RelOp></QueryPlan></StmtSimple><StmtSimple StatementText=\" &#x0A;&#x0A;print 'OUTPUT-DBLIST: ' + @dblist&#x0A;\" StatementId=\"2\" StatementCompId=\"2\" StatementType=\"PRINT\" RetrievedFromCache=\"true\"/></Statements></Batch></BatchSequence></ShowPlanXML>");
//	test("<ShowPlanXML xmlns=\"http://schemas.microsoft.com/sqlserver/2004/07/showplan\" Version=\"1.539\" Build=\"15.0.4033.1\"><BatchSequence><Batch><Statements><StmtCond StatementText=\"/* SqlServerTune:CmTableSize */ &#x0A;-- Note: Below SQL Statement is executed in every database that is 'online', more or less like: sp_msforeachdb &#x0A;-- Note: object_schema_name() and object_name() can be used for 'dirty-reads', they may block... hence the 'ugly' fullname sub-selects in the select column list &#x0A;-- Note: To enable/disable DbxTune Cached Lookups for ObjectID to name translation is done with property 'SqlServerTune.objectIdCahe.bulkLoadOnStart=true|false'. Current Status=ENABLED &#x0A; &#x0A;-- Drop temp tables (if they already exists &#x0A;if (object_id('tempdb..#dstat')   is not null)\" StatementId=\"1\" StatementCompId=\"1\" StatementType=\"COND\" RetrievedFromCache=\"true\"><Condition/><Then><Statements><StmtSimple StatementText=\" drop table #dstat\" StatementId=\"2\" StatementCompId=\"2\" StatementType=\"DROP OBJECT\" RetrievedFromCache=\"true\"/></Statements></Then></StmtCond><StmtCond StatementText=\" &#x0A;if (object_id('tempdb..#ncistat') is not null)\" StatementId=\"3\" StatementCompId=\"4\" StatementType=\"COND\" RetrievedFromCache=\"true\"><Condition/><Then><Statements><StmtSimple StatementText=\" drop table #ncistat\" StatementId=\"4\" StatementCompId=\"5\" StatementType=\"DROP OBJECT\" RetrievedFromCache=\"true\"/></Statements></Then></StmtCond><StmtSimple StatementText=\" &#x0A; &#x0A;-- temptable: #dstat -- DATA STAT &#x0A;    select /* SqlServerTune:CmTableSize */ &#x0A;         object_id &#x0A;        ,StatsUpdated                     = nullif( max(isnull(stats_date(object_id, index_id), '2000-01-01')), '2000-01-01') -- this to get rid of: Warning: Null value is eliminated by an aggregate or other SET operation. &#x0A;        ,HasClusteredIndex                = convert(bit, case when sum(index_id) = 1 then 1 else 0 end) &#x0A;        ,PartitionCount                   = count(partition_number) &#x0A;        ,row_count                        = sum(row_count) &#x0A;        ,RowsPerPage                      = convert(decimal(12,1), sum(row_count)*1.0 / case when sum(used_page_count) = 0 THEN 1 else sum(used_page_count) end) &#x0A; &#x0A;        ,ReservedSizeMB                   = convert(decimal(12,1), sum(reserved_page_count) / 128.0) &#x0A;        ,UsedSizeMB                       = convert(decimal(12,1), sum(used_page_count)     / 128.0) &#x0A;        ,UnUsedSizeMB                     = convert(decimal(12,1), (sum(reserved_page_count) - sum(used_page_count)) / 128.0) &#x0A; &#x0A;        ,LobReservedSizeMB                = convert(decimal(12,1), sum(lob_reserved_page_count) / 128.0) &#x0A;        ,LobUsedSizeMB                    = convert(decimal(12,1), sum(lob_used_page_count)     / 128.0) &#x0A;        ,LobUnUsedSizeMB                  = convert(decimal(12,1), (sum(lob_reserved_page_count) - sum(lob_used_page_count)) / 128.0) &#x0A; &#x0A;        ,reserved_page_count              = sum(reserved_page_count) &#x0A;        ,used_page_count                  = sum(used_page_count) &#x0A;        ,unused_page_count                = sum(reserved_page_count) - sum(used_page_count) &#x0A; &#x0A;        ,in_row_data_page_count           = sum(in_row_data_page_count) &#x0A;        ,in_row_used_page_count           = sum(in_row_used_page_count) &#x0A;        ,in_row_reserved_page_count       = sum(in_row_reserved_page_count) &#x0A;        ,lob_used_page_count              = sum(lob_used_page_count) &#x0A;        ,lob_reserved_page_count          = sum(lob_reserved_page_count) &#x0A;        ,row_overflow_used_page_count     = sum(row_overflow_used_page_count) &#x0A;        ,row_overflow_reserved_page_count = sum(row_overflow_reserved_page_count) &#x0A;    into #dstat &#x0A;    from sys.dm_db_partition_stats &#x0A;    where index_id in (0,1) &#x0A;      and OBJECTPROPERTY(object_id, 'IsUserTable') = 1 &#x0A;      and row_count &gt; 0 &#x0A;    group by object_id\" StatementId=\"5\" StatementCompId=\"7\" StatementType=\"SELECT INTO\" RetrievedFromCache=\"true\" StatementSubTreeCost=\"0.0539189\" StatementEstRows=\"1.47021\" SecurityPolicyApplied=\"false\" StatementOptmLevel=\"FULL\" QueryHash=\"0x35DB63D7F4AD6AA6\" QueryPlanHash=\"0x6CB137129BE6ACEB\" StatementOptmEarlyAbortReason=\"GoodEnoughPlanFound\" CardinalityEstimationModelVersion=\"150\"><StatementSetOptions QUOTED_IDENTIFIER=\"true\" ARITHABORT=\"false\" CONCAT_NULL_YIELDS_NULL=\"true\" ANSI_NULLS=\"true\" ANSI_PADDING=\"true\" ANSI_WARNINGS=\"true\" NUMERIC_ROUNDABORT=\"false\"/><QueryPlan NonParallelPlanReason=\"CouldNotGenerateValidParallelPlan\" CachedPlanSize=\"224\" CompileTime=\"9\" CompileCPU=\"9\" CompileMemory=\"2144\"><MemoryGrantInfo SerialRequiredMemory=\"1024\" SerialDesiredMemory=\"1088\" GrantedMemory=\"0\" MaxUsedMemory=\"0\"/><OptimizerHardwareDependentProperties EstimatedAvailableMemoryGrant=\"1315430\" EstimatedPagesCached=\"328857\" EstimatedAvailableDegreeOfParallelism=\"2\" MaxCompileMemory=\"31018928\"/><OptimizerStatsUsage><StatisticsInfo LastUpdate=\"2021-08-17T14:31:34.43\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000002_00000005]\" Table=\"[sysrowsets]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T13:39:17.72\" ModificationCount=\"163\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000004_00000036]\" Table=\"[sysidxstats]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T14:31:34.43\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000003_00000005]\" Table=\"[sysrowsets]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T13:39:17.65\" ModificationCount=\"163\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000002_00000036]\" Table=\"[sysidxstats]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T14:31:34.44\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000006_00000005]\" Table=\"[sysrowsets]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T13:39:17.64\" ModificationCount=\"163\" SamplingPercent=\"100\" Statistics=\"[clst]\" Table=\"[sysidxstats]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T14:31:34.43\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000004_00000005]\" Table=\"[sysrowsets]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T14:31:34.43\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000005_00000005]\" Table=\"[sysrowsets]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T13:38:56.44\" ModificationCount=\"403\" SamplingPercent=\"100\" Statistics=\"[nc]\" Table=\"[sysidxstats]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T14:31:34.42\" ModificationCount=\"11\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000007_00000036]\" Table=\"[sysidxstats]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/></OptimizerStatsUsage><RelOp NodeId=\"0\" PhysicalOp=\"Table Insert\" LogicalOp=\"Insert\" EstimateRows=\"1.47021\" EstimateIO=\"0.01\" EstimateCPU=\"1.47021e-06\" AvgRowSize=\"9\" EstimatedTotalSubtreeCost=\"0.0539189\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList/><Update DMLRequestSort=\"0\"><Object Table=\"[#dstat]\" Storage=\"RowStore\"/><SetPredicate><ScalarOperator ScalarString=\"[#dstat].[object_id] = [Union1033],[#dstat].[StatsUpdated] = [Expr1059],[#dstat].[HasClusteredIndex] = [Expr1060],[#dstat].[PartitionCount] = [Expr1048],[#dstat].[row_count] = [Expr1049],[#dstat].[RowsPerPage] = [Expr1061],[#dstat].[ReservedSizeMB] = [Expr1062],[#dstat].[UsedSizeMB] = [Expr1063],[#dstat].[UnUsedSizeMB] = [Expr1064],[#dstat].[LobReservedSizeMB] = [Expr1065],[#dstat].[LobUsedSizeMB] = [Expr1066],[#dstat].[LobUnUsedSizeMB] = [Expr1067],[#dstat].[reserved_page_count] = [Expr1051],[#dstat].[used_page_count] = [Expr1050],[#dstat].[unused_page_count] = [Expr1068],[#dstat].[in_row_data_page_count] = [Expr1054],[#dstat].[in_row_used_page_count] = [Expr1055],[#dstat].[in_row_reserved_page_count] = [Expr1056],[#dstat].[lob_used_page_count] = [Expr1053],[#dstat].[lob_reserved_page_count] = [Expr1052],[#dstat].[row_overflow_used_page_count] = [Expr1057],[#dstat].[row_overflow_reserved_page_count] = [Expr1058]\"><ScalarExpressionList><ScalarOperator><MultipleAssign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"object_id\"/><ScalarOperator><Identifier><ColumnReference Column=\"Union1033\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"StatsUpdated\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1059\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"HasClusteredIndex\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1060\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"PartitionCount\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1048\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"row_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1049\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"RowsPerPage\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1061\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"ReservedSizeMB\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1062\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"UsedSizeMB\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1063\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"UnUsedSizeMB\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1064\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"LobReservedSizeMB\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1065\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"LobUsedSizeMB\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1066\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"LobUnUsedSizeMB\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1067\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"reserved_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1051\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"used_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1050\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"unused_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1068\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"in_row_data_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1054\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"in_row_used_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1055\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"in_row_reserved_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1056\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"lob_used_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1053\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"lob_reserved_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1052\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"row_overflow_used_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1057\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#dstat]\" Column=\"row_overflow_reserved_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1058\"/></Identifier></ScalarOperator></Assign></MultipleAssign></ScalarOperator></ScalarExpressionList></ScalarOperator></SetPredicate><RelOp NodeId=\"1\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"1.47021\" EstimateIO=\"0\" EstimateCPU=\"1.47021e-07\" AvgRowSize=\"177\" EstimatedTotalSubtreeCost=\"0.0439175\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Union1033\"/><ColumnReference Column=\"Expr1048\"/><ColumnReference Column=\"Expr1049\"/><ColumnReference Column=\"Expr1050\"/><ColumnReference Column=\"Expr1051\"/><ColumnReference Column=\"Expr1052\"/><ColumnReference Column=\"Expr1053\"/><ColumnReference Column=\"Expr1054\"/><ColumnReference Column=\"Expr1055\"/><ColumnReference Column=\"Expr1056\"/><ColumnReference Column=\"Expr1057\"/><ColumnReference Column=\"Expr1058\"/><ColumnReference Column=\"Expr1059\"/><ColumnReference Column=\"Expr1060\"/><ColumnReference Column=\"Expr1061\"/><ColumnReference Column=\"Expr1062\"/><ColumnReference Column=\"Expr1063\"/><ColumnReference Column=\"Expr1064\"/><ColumnReference Column=\"Expr1065\"/><ColumnReference Column=\"Expr1066\"/><ColumnReference Column=\"Expr1067\"/><ColumnReference Column=\"Expr1068\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1059\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1046]='2000-01-01 00:00:00.000' THEN NULL ELSE [Expr1046] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1046\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"'2000-01-01 00:00:00.000'\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1046\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1060\"/><ScalarOperator ScalarString=\"CONVERT(bit,CASE WHEN [Expr1047]=(1) THEN (1) ELSE (0) END,0)\"><Convert DataType=\"bit\" Style=\"0\" Implicit=\"0\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1047\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Then><Else><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1061\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CONVERT_IMPLICIT(numeric(19,0),[Expr1049],0)*(1.0)/CONVERT_IMPLICIT(numeric(19,0),CASE WHEN [Expr1050]=(0) THEN (1) ELSE [Expr1050] END,0),0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Arithmetic Operation=\"MULT\"><ScalarOperator><Convert DataType=\"numeric\" Precision=\"19\" Scale=\"0\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1049\"/></Identifier></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Const ConstValue=\"(1.0)\"/></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Convert DataType=\"numeric\" Precision=\"19\" Scale=\"0\" Style=\"0\" Implicit=\"1\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1050\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1050\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1062\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CONVERT_IMPLICIT(numeric(19,0),[Expr1051],0)/(128.0),0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Convert DataType=\"numeric\" Precision=\"19\" Scale=\"0\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1051\"/></Identifier></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Const ConstValue=\"(128.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1063\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CONVERT_IMPLICIT(numeric(19,0),[Expr1050],0)/(128.0),0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Convert DataType=\"numeric\" Precision=\"19\" Scale=\"0\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1050\"/></Identifier></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Const ConstValue=\"(128.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1064\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CONVERT_IMPLICIT(numeric(19,0),[Expr1051]-[Expr1050],0)/(128.0),0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Convert DataType=\"numeric\" Precision=\"19\" Scale=\"0\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Arithmetic Operation=\"SUB\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1051\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Column=\"Expr1050\"/></Identifier></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Const ConstValue=\"(128.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1065\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CONVERT_IMPLICIT(numeric(19,0),[Expr1052],0)/(128.0),0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Convert DataType=\"numeric\" Precision=\"19\" Scale=\"0\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1052\"/></Identifier></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Const ConstValue=\"(128.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1066\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CONVERT_IMPLICIT(numeric(19,0),[Expr1053],0)/(128.0),0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Convert DataType=\"numeric\" Precision=\"19\" Scale=\"0\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1053\"/></Identifier></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Const ConstValue=\"(128.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1067\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CONVERT_IMPLICIT(numeric(19,0),[Expr1052]-[Expr1053],0)/(128.0),0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Convert DataType=\"numeric\" Precision=\"19\" Scale=\"0\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Arithmetic Operation=\"SUB\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1052\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Column=\"Expr1053\"/></Identifier></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Const ConstValue=\"(128.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1068\"/><ScalarOperator ScalarString=\"[Expr1051]-[Expr1050]\"><Arithmetic Operation=\"SUB\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1051\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Column=\"Expr1050\"/></Identifier></ScalarOperator></Arithmetic></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"2\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"1.47021\" EstimateIO=\"0\" EstimateCPU=\"0\" AvgRowSize=\"108\" EstimatedTotalSubtreeCost=\"0.0439173\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Union1033\"/><ColumnReference Column=\"Expr1046\"/><ColumnReference Column=\"Expr1047\"/><ColumnReference Column=\"Expr1048\"/><ColumnReference Column=\"Expr1049\"/><ColumnReference Column=\"Expr1050\"/><ColumnReference Column=\"Expr1051\"/><ColumnReference Column=\"Expr1052\"/><ColumnReference Column=\"Expr1053\"/><ColumnReference Column=\"Expr1054\"/><ColumnReference Column=\"Expr1055\"/><ColumnReference Column=\"Expr1056\"/><ColumnReference Column=\"Expr1057\"/><ColumnReference Column=\"Expr1058\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1048\"/><ScalarOperator ScalarString=\"CONVERT_IMPLICIT(int,[Expr1076],0)\"><Convert DataType=\"int\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1076\"/></Identifier></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1050\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1077]=(0) THEN NULL ELSE [Expr1078] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1077\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1078\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1051\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1079]=(0) THEN NULL ELSE [Expr1080] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1079\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1080\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1052\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1081]=(0) THEN NULL ELSE [Expr1082] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1081\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1082\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1053\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1083]=(0) THEN NULL ELSE [Expr1084] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1083\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1084\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1054\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1085]=(0) THEN NULL ELSE [Expr1086] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1085\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1086\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1055\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1087]=(0) THEN NULL ELSE [Expr1088] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1087\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1088\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1056\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1089]=(0) THEN NULL ELSE [Expr1090] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1089\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1090\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1057\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1091]=(0) THEN NULL ELSE [Expr1092] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1091\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1092\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1058\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1093]=(0) THEN NULL ELSE [Expr1094] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1093\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1094\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"3\" PhysicalOp=\"Stream Aggregate\" LogicalOp=\"Aggregate\" EstimateRows=\"1.47021\" EstimateIO=\"0\" EstimateCPU=\"1.9351e-06\" AvgRowSize=\"108\" EstimatedTotalSubtreeCost=\"0.0439173\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Union1033\"/><ColumnReference Column=\"Expr1046\"/><ColumnReference Column=\"Expr1047\"/><ColumnReference Column=\"Expr1049\"/><ColumnReference Column=\"Expr1076\"/><ColumnReference Column=\"Expr1077\"/><ColumnReference Column=\"Expr1078\"/><ColumnReference Column=\"Expr1079\"/><ColumnReference Column=\"Expr1080\"/><ColumnReference Column=\"Expr1081\"/><ColumnReference Column=\"Expr1082\"/><ColumnReference Column=\"Expr1083\"/><ColumnReference Column=\"Expr1084\"/><ColumnReference Column=\"Expr1085\"/><ColumnReference Column=\"Expr1086\"/><ColumnReference Column=\"Expr1087\"/><ColumnReference Column=\"Expr1088\"/><ColumnReference Column=\"Expr1089\"/><ColumnReference Column=\"Expr1090\"/><ColumnReference Column=\"Expr1091\"/><ColumnReference Column=\"Expr1092\"/><ColumnReference Column=\"Expr1093\"/><ColumnReference Column=\"Expr1094\"/></OutputList><StreamAggregate><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1076\"/><ScalarOperator ScalarString=\"Count(*)\"><Aggregate AggType=\"countstar\" Distinct=\"0\"/></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1046\"/><ScalarOperator ScalarString=\"MAX(isnull(stats_date([Union1033],[Union1034]),'2000-01-01 00:00:00.000'))\"><Aggregate Distinct=\"0\" AggType=\"MAX\"><ScalarOperator><Intrinsic FunctionName=\"isnull\"><ScalarOperator><Intrinsic FunctionName=\"stats_date\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1033\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Column=\"Union1034\"/></Identifier></ScalarOperator></Intrinsic></ScalarOperator><ScalarOperator><Const ConstValue=\"'2000-01-01 00:00:00.000'\"/></ScalarOperator></Intrinsic></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1047\"/><ScalarOperator ScalarString=\"SUM([Union1034])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1034\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1049\"/><ScalarOperator ScalarString=\"SUM([Union1045])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1045\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1077\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1043])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1043\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1078\"/><ScalarOperator ScalarString=\"SUM([Union1043])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1043\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1079\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1044])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1044\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1080\"/><ScalarOperator ScalarString=\"SUM([Union1044])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1044\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1081\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1040])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1040\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1082\"/><ScalarOperator ScalarString=\"SUM([Union1040])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1040\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1083\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1039])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1039\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1084\"/><ScalarOperator ScalarString=\"SUM([Union1039])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1039\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1085\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1036])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1036\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1086\"/><ScalarOperator ScalarString=\"SUM([Union1036])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1036\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1087\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1037])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1037\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1088\"/><ScalarOperator ScalarString=\"SUM([Union1037])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1037\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1089\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1038])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1038\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1090\"/><ScalarOperator ScalarString=\"SUM([Union1038])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1038\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1091\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1041])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1041\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1092\"/><ScalarOperator ScalarString=\"SUM([Union1041])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1041\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1093\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1042])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1042\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1094\"/><ScalarOperator ScalarString=\"SUM([Union1042])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1042\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue></DefinedValues><GroupBy><ColumnReference Column=\"Union1033\"/></GroupBy><RelOp NodeId=\"4\" PhysicalOp=\"Sort\" LogicalOp=\"Sort\" EstimateRows=\"2\" EstimateIO=\"0.0112613\" EstimateCPU=\"0.000103216\" AvgRowSize=\"96\" EstimatedTotalSubtreeCost=\"0.0439154\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Union1033\"/><ColumnReference Column=\"Union1034\"/><ColumnReference Column=\"Union1036\"/><ColumnReference Column=\"Union1037\"/><ColumnReference Column=\"Union1038\"/><ColumnReference Column=\"Union1039\"/><ColumnReference Column=\"Union1040\"/><ColumnReference Column=\"Union1041\"/><ColumnReference Column=\"Union1042\"/><ColumnReference Column=\"Union1043\"/><ColumnReference Column=\"Union1044\"/><ColumnReference Column=\"Union1045\"/></OutputList><MemoryFractions Input=\"0.5\" Output=\"1\"/><Sort Distinct=\"0\"><OrderBy><OrderByColumn Ascending=\"1\"><ColumnReference Column=\"Union1033\"/></OrderByColumn></OrderBy><RelOp NodeId=\"5\" PhysicalOp=\"Concatenation\" LogicalOp=\"Concatenation\" EstimateRows=\"2\" EstimateIO=\"0\" EstimateCPU=\"2e-07\" AvgRowSize=\"96\" EstimatedTotalSubtreeCost=\"0.0325509\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Union1033\"/><ColumnReference Column=\"Union1034\"/><ColumnReference Column=\"Union1036\"/><ColumnReference Column=\"Union1037\"/><ColumnReference Column=\"Union1038\"/><ColumnReference Column=\"Union1039\"/><ColumnReference Column=\"Union1040\"/><ColumnReference Column=\"Union1041\"/><ColumnReference Column=\"Union1042\"/><ColumnReference Column=\"Union1043\"/><ColumnReference Column=\"Union1044\"/><ColumnReference Column=\"Union1045\"/></OutputList><Concat><DefinedValues><DefinedValue><ColumnReference Column=\"Union1033\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1034\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1036\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/><ColumnReference Column=\"Expr1022\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1037\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/><ColumnReference Column=\"Expr1023\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1038\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Column=\"Expr1024\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1039\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/><ColumnReference Column=\"Expr1025\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1040\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/><ColumnReference Column=\"Expr1026\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1041\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Column=\"Expr1027\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1042\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Column=\"Expr1028\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1043\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/><ColumnReference Column=\"Expr1029\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1044\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/><ColumnReference Column=\"Expr1030\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1045\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/><ColumnReference Column=\"Expr1031\"/></DefinedValue></DefinedValues><RelOp NodeId=\"6\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"4.8e-07\" AvgRowSize=\"96\" EstimatedTotalSubtreeCost=\"0.0127538\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></OutputList><Filter StartupExpression=\"0\"><RelOp NodeId=\"7\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Inner Join\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"4.18e-06\" AvgRowSize=\"96\" EstimatedTotalSubtreeCost=\"0.0127533\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></OutputList><NestedLoops Optimized=\"0\"><OuterReferences><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"rowset\"/></OuterReferences><RelOp NodeId=\"8\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"0.0014946\" AvgRowSize=\"23\" EstimatedTotalSubtreeCost=\"0.012748\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"rowset\"/></OutputList><Filter StartupExpression=\"0\"><RelOp NodeId=\"9\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"4.7e-05\" AvgRowSize=\"40\" EstimatedTotalSubtreeCost=\"0.0112534\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"rowset\"/><ColumnReference Column=\"Expr1069\"/><ColumnReference Column=\"Expr1070\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1069\"/><ScalarOperator ScalarString=\"objectproperty([sonarqube].[sys].[sysidxstats].[id],'IsUserTable')\"><Intrinsic FunctionName=\"objectproperty\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"'IsUserTable'\"/></ScalarOperator></Intrinsic></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1070\"/><ScalarOperator ScalarString=\"objectproperty([sonarqube].[sys].[sysidxstats].[id],'TableIsMemoryOptimized')\"><Intrinsic FunctionName=\"objectproperty\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"'TableIsMemoryOptimized'\"/></ScalarOperator></Intrinsic></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"10\" PhysicalOp=\"Clustered Index Scan\" LogicalOp=\"Clustered Index Scan\" EstimateRows=\"1\" EstimatedRowsRead=\"470\" EstimateIO=\"0.0105324\" EstimateCPU=\"0.000674\" AvgRowSize=\"28\" EstimatedTotalSubtreeCost=\"0.0112064\" TableCardinality=\"470\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"rowset\"/></OutputList><IndexScan Ordered=\"0\" ForcedIndex=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"rowset\"/></DefinedValue></DefinedValues><Object Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Index=\"[clst]\" IndexKind=\"Clustered\" Storage=\"RowStore\"/><Predicate><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysidxstats].[type]&lt;&gt;(5) AND [sonarqube].[sys].[sysidxstats].[type]&lt;&gt;(6) AND ([sonarqube].[sys].[sysidxstats].[status]&amp;(1))=(1) AND ([sonarqube].[sys].[sysidxstats].[status]&amp;(67108864))=(0) AND ([sonarqube].[sys].[sysidxstats].[indid]=(0) OR [sonarqube].[sys].[sysidxstats].[indid]=(1))\"><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"NE\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"type\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(5)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"NE\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"type\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(6)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"status\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"status\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(67108864)\"/></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Logical Operation=\"OR\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Logical></ScalarOperator></Predicate></IndexScan></RelOp></ComputeScalar></RelOp><Predicate><ScalarOperator ScalarString=\"[Expr1069]=(1) AND ([sonarqube].[sys].[sysidxstats].[indid]&lt;&gt;(0) OR [Expr1070]=(0))\"><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1069\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Logical Operation=\"OR\"><ScalarOperator><Compare CompareOp=\"NE\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1070\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Logical></ScalarOperator></Predicate></Filter></RelOp><RelOp NodeId=\"11\" PhysicalOp=\"Table-valued function\" LogicalOp=\"Table-valued function\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"1.157e-06\" AvgRowSize=\"88\" EstimatedTotalSubtreeCost=\"1.157e-06\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></OutputList><TableValuedFunction><DefinedValues><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></DefinedValue></DefinedValues><Object Table=\"[PARTITIONCOUNTS]\"/><ParameterList><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysidxstats].[id]\"><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/></Identifier></ScalarOperator><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysidxstats].[indid]\"><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/></Identifier></ScalarOperator><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysidxstats].[rowset]\"><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"rowset\"/></Identifier></ScalarOperator></ParameterList></TableValuedFunction></RelOp></NestedLoops></RelOp><Predicate><ScalarOperator ScalarString=\"PARTITIONCOUNTS.[row_count]&gt;(0)\"><Compare CompareOp=\"GT\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Predicate></Filter></RelOp><RelOp NodeId=\"12\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"6.99629e-06\" AvgRowSize=\"96\" EstimatedTotalSubtreeCost=\"0.0197969\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Column=\"Expr1022\"/><ColumnReference Column=\"Expr1023\"/><ColumnReference Column=\"Expr1024\"/><ColumnReference Column=\"Expr1025\"/><ColumnReference Column=\"Expr1026\"/><ColumnReference Column=\"Expr1027\"/><ColumnReference Column=\"Expr1028\"/><ColumnReference Column=\"Expr1029\"/><ColumnReference Column=\"Expr1030\"/><ColumnReference Column=\"Expr1031\"/></OutputList><Filter StartupExpression=\"0\"><RelOp NodeId=\"13\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"7.95033\" EstimateIO=\"0\" EstimateCPU=\"7.95033e-07\" AvgRowSize=\"100\" EstimatedTotalSubtreeCost=\"0.0197899\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Column=\"Expr1022\"/><ColumnReference Column=\"Expr1023\"/><ColumnReference Column=\"Expr1024\"/><ColumnReference Column=\"Expr1025\"/><ColumnReference Column=\"Expr1026\"/><ColumnReference Column=\"Expr1027\"/><ColumnReference Column=\"Expr1028\"/><ColumnReference Column=\"Expr1029\"/><ColumnReference Column=\"Expr1030\"/><ColumnReference Column=\"Expr1031\"/><ColumnReference Column=\"Expr1073\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1073\"/><ScalarOperator ScalarString=\"objectproperty([sonarqube].[sys].[sysrowsets].[idmajor] as [rs].[idmajor],'IsUserTable')\"><Intrinsic FunctionName=\"objectproperty\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"'IsUserTable'\"/></ScalarOperator></Intrinsic></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"14\" PhysicalOp=\"Stream Aggregate\" LogicalOp=\"Aggregate\" EstimateRows=\"7.95033\" EstimateIO=\"0\" EstimateCPU=\"8.74537e-06\" AvgRowSize=\"96\" EstimatedTotalSubtreeCost=\"0.0197891\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Column=\"Expr1022\"/><ColumnReference Column=\"Expr1023\"/><ColumnReference Column=\"Expr1024\"/><ColumnReference Column=\"Expr1025\"/><ColumnReference Column=\"Expr1026\"/><ColumnReference Column=\"Expr1027\"/><ColumnReference Column=\"Expr1028\"/><ColumnReference Column=\"Expr1029\"/><ColumnReference Column=\"Expr1030\"/><ColumnReference Column=\"Expr1031\"/></OutputList><StreamAggregate><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1022\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[in_row_data_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1023\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[in_row_used_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1024\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[in_row_reserved_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1025\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[lob_used_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1026\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[lob_reserved_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1027\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[row_overflow_used_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1028\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[row_overflow_reserved_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1029\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[used_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1030\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[reserved_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1031\"/><ScalarOperator ScalarString=\"SUM([Expr1074])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1074\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue></DefinedValues><GroupBy><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"numpart\"/></GroupBy><RelOp NodeId=\"15\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"7.95033\" EstimateIO=\"0\" EstimateCPU=\"7.95033e-07\" AvgRowSize=\"100\" EstimatedTotalSubtreeCost=\"0.0197803\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"numpart\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/><ColumnReference Column=\"Expr1074\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1074\"/><ScalarOperator ScalarString=\"CASE WHEN [sonarqube].[sys].[sysrowsets].[ownertype] as [rs].[ownertype]=(4) OR [sonarqube].[sys].[sysrowsets].[ownertype] as [rs].[ownertype]=(2) THEN  -PARTITIONCOUNTS.[row_count] ELSE PARTITIONCOUNTS.[row_count] END\"><IF><Condition><ScalarOperator><Logical Operation=\"OR\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(4)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(2)\"/></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Condition><Then><ScalarOperator><Arithmetic Operation=\"MINUS\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></Identifier></ScalarOperator></Arithmetic></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"16\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Inner Join\" EstimateRows=\"7.95033\" EstimateIO=\"0\" EstimateCPU=\"3.32324e-05\" AvgRowSize=\"101\" EstimatedTotalSubtreeCost=\"0.0197795\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"numpart\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></OutputList><NestedLoops Optimized=\"0\"><OuterReferences><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"rowsetid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/></OuterReferences><RelOp NodeId=\"17\" PhysicalOp=\"Sort\" LogicalOp=\"Sort\" EstimateRows=\"7.95033\" EstimateIO=\"0.0112613\" EstimateCPU=\"0.000137124\" AvgRowSize=\"28\" EstimatedTotalSubtreeCost=\"0.0197382\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"rowsetid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"numpart\"/></OutputList><MemoryFractions Input=\"0.5\" Output=\"0.5\"/><Sort Distinct=\"0\"><OrderBy><OrderByColumn Ascending=\"1\"><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/></OrderByColumn><OrderByColumn Ascending=\"1\"><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/></OrderByColumn><OrderByColumn Ascending=\"1\"><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"numpart\"/></OrderByColumn></OrderBy><RelOp NodeId=\"19\" PhysicalOp=\"Clustered Index Scan\" LogicalOp=\"Clustered Index Scan\" EstimateRows=\"7.95033\" EstimatedRowsRead=\"349\" EstimateIO=\"0.0068287\" EstimateCPU=\"0.0005409\" AvgRowSize=\"32\" EstimatedTotalSubtreeCost=\"0.0073696\" TableCardinality=\"349\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"rowsetid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"numpart\"/></OutputList><IndexScan Ordered=\"0\" ForcedIndex=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"rowsetid\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"numpart\"/></DefinedValue></DefinedValues><Object Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Index=\"[clust]\" Alias=\"[rs]\" IndexKind=\"Clustered\" Storage=\"RowStore\"/><Predicate><ScalarOperator ScalarString=\"([sonarqube].[sys].[sysrowsets].[idminor] as [rs].[idminor]=(0) OR [sonarqube].[sys].[sysrowsets].[idminor] as [rs].[idminor]=(1)) AND ([sonarqube].[sys].[sysrowsets].[ownertype] as [rs].[ownertype]=(4) OR [sonarqube].[sys].[sysrowsets].[ownertype] as [rs].[ownertype]=(3) OR [sonarqube].[sys].[sysrowsets].[ownertype] as [rs].[ownertype]=(2) OR CONVERT(bit,[sonarqube].[sys].[sysrowsets].[status] as [rs].[status]&amp;(65536),0)=(1) AND [sonarqube].[sys].[sysrowsets].[ownertype] as [rs].[ownertype]=(1))\"><Logical Operation=\"AND\"><ScalarOperator><Logical Operation=\"OR\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator><ScalarOperator><Logical Operation=\"OR\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(4)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(3)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(2)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Convert DataType=\"bit\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"status\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(65536)\"/></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Logical></ScalarOperator></Logical></ScalarOperator></Predicate></IndexScan></RelOp></Sort></RelOp><RelOp NodeId=\"20\" PhysicalOp=\"Table-valued function\" LogicalOp=\"Table-valued function\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"1.157e-06\" AvgRowSize=\"88\" EstimatedTotalSubtreeCost=\"8.10733e-06\" Parallel=\"0\" EstimateRebinds=\"6.95033\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></OutputList><TableValuedFunction><DefinedValues><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></DefinedValue></DefinedValues><Object Table=\"[PARTITIONCOUNTS]\"/><ParameterList><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysrowsets].[idmajor] as [rs].[idmajor]\"><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/></Identifier></ScalarOperator><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysrowsets].[idminor] as [rs].[idminor]\"><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/></Identifier></ScalarOperator><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysrowsets].[rowsetid] as [rs].[rowsetid]\"><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"rowsetid\"/></Identifier></ScalarOperator></ParameterList></TableValuedFunction></RelOp></NestedLoops></RelOp></ComputeScalar></RelOp></StreamAggregate></RelOp></ComputeScalar></RelOp><Predicate><ScalarOperator ScalarString=\"[Expr1073]=(1) AND [Expr1031]&gt;(0)\"><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1073\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"GT\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1031\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Predicate></Filter></RelOp></Concat></RelOp></Sort></RelOp></StreamAggregate></RelOp></ComputeScalar></RelOp></ComputeScalar></RelOp></Update></RelOp></QueryPlan></StmtSimple><StmtSimple StatementText=\" &#x0A; &#x0A;-- temptable: #ncistat -- NONCLUSTERED INDEX STAT &#x0A;    select /* SqlServerTune:CmTableSize */ &#x0A;         object_id &#x0A;        ,StatsUpdated                     = nullif( max(isnull(stats_date(object_id, index_id), '2000-01-01')), '2000-01-01') -- this to get rid of: Warning: Null value is eliminated by an aggregate or other SET operation. &#x0A;        ,NcIndexCount                     = count(*) &#x0A;        ,ReservedSizeMB                   = convert(decimal(12,1), sum(reserved_page_count) / 128.0) &#x0A;        ,UsedSizeMB                       = convert(decimal(12,1), sum(used_page_count)     / 128.0) &#x0A;        ,UnUsedSizeMB                     = convert(decimal(12,1), (sum(reserved_page_count) - sum(used_page_count)) / 128.0) &#x0A; &#x0A;        ,reserved_page_count              = sum(reserved_page_count) &#x0A;        ,used_page_count                  = sum(used_page_count) &#x0A;        ,unused_page_count                = sum(reserved_page_count) - sum(used_page_count) &#x0A; &#x0A;        ,in_row_data_page_count           = sum(in_row_data_page_count) &#x0A;        ,in_row_used_page_count           = sum(in_row_used_page_count) &#x0A;        ,in_row_reserved_page_count       = sum(in_row_reserved_page_count) &#x0A;        ,lob_used_page_count              = sum(lob_used_page_count) &#x0A;        ,lob_reserved_page_count          = sum(lob_reserved_page_count) &#x0A;        ,row_overflow_used_page_count     = sum(row_overflow_used_page_count) &#x0A;        ,row_overflow_reserved_page_count = sum(row_overflow_reserved_page_count) &#x0A;    into #ncistat &#x0A;    from sys.dm_db_partition_stats &#x0A;    where index_id &gt;= 2 &#x0A;      and OBJECTPROPERTY(object_id, 'IsUserTable') = 1 &#x0A;      and row_count &gt; 0 &#x0A;    group by object_id\" StatementId=\"6\" StatementCompId=\"8\" StatementType=\"SELECT INTO\" RetrievedFromCache=\"true\" StatementSubTreeCost=\"0.05374\" StatementEstRows=\"1.47021\" SecurityPolicyApplied=\"false\" StatementOptmLevel=\"FULL\" QueryHash=\"0x09243762D9D53D67\" QueryPlanHash=\"0x38D35DE2B0148877\" StatementOptmEarlyAbortReason=\"GoodEnoughPlanFound\" CardinalityEstimationModelVersion=\"150\"><StatementSetOptions QUOTED_IDENTIFIER=\"true\" ARITHABORT=\"false\" CONCAT_NULL_YIELDS_NULL=\"true\" ANSI_NULLS=\"true\" ANSI_PADDING=\"true\" ANSI_WARNINGS=\"true\" NUMERIC_ROUNDABORT=\"false\"/><QueryPlan NonParallelPlanReason=\"CouldNotGenerateValidParallelPlan\" CachedPlanSize=\"200\" CompileTime=\"8\" CompileCPU=\"8\" CompileMemory=\"1992\"><MemoryGrantInfo SerialRequiredMemory=\"1024\" SerialDesiredMemory=\"1088\" GrantedMemory=\"0\" MaxUsedMemory=\"0\"/><OptimizerHardwareDependentProperties EstimatedAvailableMemoryGrant=\"1315430\" EstimatedPagesCached=\"328857\" EstimatedAvailableDegreeOfParallelism=\"2\" MaxCompileMemory=\"31018928\"/><OptimizerStatsUsage><StatisticsInfo LastUpdate=\"2021-08-17T14:31:34.43\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000002_00000005]\" Table=\"[sysrowsets]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T13:39:17.72\" ModificationCount=\"163\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000004_00000036]\" Table=\"[sysidxstats]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T14:31:34.43\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000003_00000005]\" Table=\"[sysrowsets]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T13:39:17.65\" ModificationCount=\"163\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000002_00000036]\" Table=\"[sysidxstats]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T14:31:34.44\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000006_00000005]\" Table=\"[sysrowsets]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T13:39:17.64\" ModificationCount=\"163\" SamplingPercent=\"100\" Statistics=\"[clst]\" Table=\"[sysidxstats]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T14:31:34.43\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000004_00000005]\" Table=\"[sysrowsets]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T14:31:34.43\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000005_00000005]\" Table=\"[sysrowsets]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T13:38:56.44\" ModificationCount=\"403\" SamplingPercent=\"100\" Statistics=\"[nc]\" Table=\"[sysidxstats]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/><StatisticsInfo LastUpdate=\"2021-08-17T14:31:34.42\" ModificationCount=\"11\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000007_00000036]\" Table=\"[sysidxstats]\" Schema=\"[sys]\" Database=\"[sonarqube]\"/></OptimizerStatsUsage><RelOp NodeId=\"0\" PhysicalOp=\"Table Insert\" LogicalOp=\"Insert\" EstimateRows=\"1.47021\" EstimateIO=\"0.01\" EstimateCPU=\"1.47021e-06\" AvgRowSize=\"9\" EstimatedTotalSubtreeCost=\"0.05374\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList/><Update DMLRequestSort=\"0\"><Object Table=\"[#ncistat]\" Storage=\"RowStore\"/><SetPredicate><ScalarOperator ScalarString=\"[#ncistat].[object_id] = [Union1033],[#ncistat].[StatsUpdated] = [Expr1057],[#ncistat].[NcIndexCount] = [Expr1047],[#ncistat].[ReservedSizeMB] = [Expr1058],[#ncistat].[UsedSizeMB] = [Expr1059],[#ncistat].[UnUsedSizeMB] = [Expr1060],[#ncistat].[reserved_page_count] = [Expr1048],[#ncistat].[used_page_count] = [Expr1049],[#ncistat].[unused_page_count] = [Expr1061],[#ncistat].[in_row_data_page_count] = [Expr1050],[#ncistat].[in_row_used_page_count] = [Expr1051],[#ncistat].[in_row_reserved_page_count] = [Expr1052],[#ncistat].[lob_used_page_count] = [Expr1053],[#ncistat].[lob_reserved_page_count] = [Expr1054],[#ncistat].[row_overflow_used_page_count] = [Expr1055],[#ncistat].[row_overflow_reserved_page_count] = [Expr1056]\"><ScalarExpressionList><ScalarOperator><MultipleAssign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"object_id\"/><ScalarOperator><Identifier><ColumnReference Column=\"Union1033\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"StatsUpdated\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1057\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"NcIndexCount\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1047\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"ReservedSizeMB\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1058\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"UsedSizeMB\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1059\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"UnUsedSizeMB\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1060\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"reserved_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1048\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"used_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1049\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"unused_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1061\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"in_row_data_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1050\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"in_row_used_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1051\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"in_row_reserved_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1052\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"lob_used_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1053\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"lob_reserved_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1054\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"row_overflow_used_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1055\"/></Identifier></ScalarOperator></Assign><Assign><ColumnReference Table=\"[#ncistat]\" Column=\"row_overflow_reserved_page_count\"/><ScalarOperator><Identifier><ColumnReference Column=\"Expr1056\"/></Identifier></ScalarOperator></Assign></MultipleAssign></ScalarOperator></ScalarExpressionList></ScalarOperator></SetPredicate><RelOp NodeId=\"1\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"1.47021\" EstimateIO=\"0\" EstimateCPU=\"1.47021e-07\" AvgRowSize=\"131\" EstimatedTotalSubtreeCost=\"0.0437386\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Union1033\"/><ColumnReference Column=\"Expr1047\"/><ColumnReference Column=\"Expr1048\"/><ColumnReference Column=\"Expr1049\"/><ColumnReference Column=\"Expr1050\"/><ColumnReference Column=\"Expr1051\"/><ColumnReference Column=\"Expr1052\"/><ColumnReference Column=\"Expr1053\"/><ColumnReference Column=\"Expr1054\"/><ColumnReference Column=\"Expr1055\"/><ColumnReference Column=\"Expr1056\"/><ColumnReference Column=\"Expr1057\"/><ColumnReference Column=\"Expr1058\"/><ColumnReference Column=\"Expr1059\"/><ColumnReference Column=\"Expr1060\"/><ColumnReference Column=\"Expr1061\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1057\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1046]='2000-01-01 00:00:00.000' THEN NULL ELSE [Expr1046] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1046\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"'2000-01-01 00:00:00.000'\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1046\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1058\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CONVERT_IMPLICIT(numeric(19,0),[Expr1048],0)/(128.0),0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Convert DataType=\"numeric\" Precision=\"19\" Scale=\"0\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1048\"/></Identifier></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Const ConstValue=\"(128.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1059\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CONVERT_IMPLICIT(numeric(19,0),[Expr1049],0)/(128.0),0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Convert DataType=\"numeric\" Precision=\"19\" Scale=\"0\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1049\"/></Identifier></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Const ConstValue=\"(128.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1060\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CONVERT_IMPLICIT(numeric(19,0),[Expr1048]-[Expr1049],0)/(128.0),0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Convert DataType=\"numeric\" Precision=\"19\" Scale=\"0\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Arithmetic Operation=\"SUB\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1048\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Column=\"Expr1049\"/></Identifier></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Const ConstValue=\"(128.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1061\"/><ScalarOperator ScalarString=\"[Expr1048]-[Expr1049]\"><Arithmetic Operation=\"SUB\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1048\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Column=\"Expr1049\"/></Identifier></ScalarOperator></Arithmetic></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"2\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"1.47021\" EstimateIO=\"0\" EstimateCPU=\"0\" AvgRowSize=\"96\" EstimatedTotalSubtreeCost=\"0.0437384\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Union1033\"/><ColumnReference Column=\"Expr1046\"/><ColumnReference Column=\"Expr1047\"/><ColumnReference Column=\"Expr1048\"/><ColumnReference Column=\"Expr1049\"/><ColumnReference Column=\"Expr1050\"/><ColumnReference Column=\"Expr1051\"/><ColumnReference Column=\"Expr1052\"/><ColumnReference Column=\"Expr1053\"/><ColumnReference Column=\"Expr1054\"/><ColumnReference Column=\"Expr1055\"/><ColumnReference Column=\"Expr1056\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1047\"/><ScalarOperator ScalarString=\"CONVERT_IMPLICIT(int,[Expr1069],0)\"><Convert DataType=\"int\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1069\"/></Identifier></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1048\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1070]=(0) THEN NULL ELSE [Expr1071] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1070\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1071\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1049\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1072]=(0) THEN NULL ELSE [Expr1073] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1072\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1073\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1050\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1074]=(0) THEN NULL ELSE [Expr1075] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1074\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1075\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1051\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1076]=(0) THEN NULL ELSE [Expr1077] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1076\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1077\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1052\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1078]=(0) THEN NULL ELSE [Expr1079] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1078\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1079\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1053\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1080]=(0) THEN NULL ELSE [Expr1081] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1080\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1081\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1054\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1082]=(0) THEN NULL ELSE [Expr1083] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1082\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1083\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1055\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1084]=(0) THEN NULL ELSE [Expr1085] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1084\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1085\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1056\"/><ScalarOperator ScalarString=\"CASE WHEN [Expr1086]=(0) THEN NULL ELSE [Expr1087] END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1086\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Column=\"Expr1087\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"3\" PhysicalOp=\"Stream Aggregate\" LogicalOp=\"Aggregate\" EstimateRows=\"1.47021\" EstimateIO=\"0\" EstimateCPU=\"1.9351e-06\" AvgRowSize=\"96\" EstimatedTotalSubtreeCost=\"0.0437384\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Union1033\"/><ColumnReference Column=\"Expr1046\"/><ColumnReference Column=\"Expr1069\"/><ColumnReference Column=\"Expr1070\"/><ColumnReference Column=\"Expr1071\"/><ColumnReference Column=\"Expr1072\"/><ColumnReference Column=\"Expr1073\"/><ColumnReference Column=\"Expr1074\"/><ColumnReference Column=\"Expr1075\"/><ColumnReference Column=\"Expr1076\"/><ColumnReference Column=\"Expr1077\"/><ColumnReference Column=\"Expr1078\"/><ColumnReference Column=\"Expr1079\"/><ColumnReference Column=\"Expr1080\"/><ColumnReference Column=\"Expr1081\"/><ColumnReference Column=\"Expr1082\"/><ColumnReference Column=\"Expr1083\"/><ColumnReference Column=\"Expr1084\"/><ColumnReference Column=\"Expr1085\"/><ColumnReference Column=\"Expr1086\"/><ColumnReference Column=\"Expr1087\"/></OutputList><StreamAggregate><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1069\"/><ScalarOperator ScalarString=\"Count(*)\"><Aggregate AggType=\"countstar\" Distinct=\"0\"/></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1046\"/><ScalarOperator ScalarString=\"MAX(isnull(stats_date([Union1033],[Union1034]),'2000-01-01 00:00:00.000'))\"><Aggregate Distinct=\"0\" AggType=\"MAX\"><ScalarOperator><Intrinsic FunctionName=\"isnull\"><ScalarOperator><Intrinsic FunctionName=\"stats_date\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1033\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Column=\"Union1034\"/></Identifier></ScalarOperator></Intrinsic></ScalarOperator><ScalarOperator><Const ConstValue=\"'2000-01-01 00:00:00.000'\"/></ScalarOperator></Intrinsic></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1070\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1044])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1044\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1071\"/><ScalarOperator ScalarString=\"SUM([Union1044])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1044\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1072\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1043])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1043\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1073\"/><ScalarOperator ScalarString=\"SUM([Union1043])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1043\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1074\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1036])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1036\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1075\"/><ScalarOperator ScalarString=\"SUM([Union1036])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1036\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1076\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1037])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1037\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1077\"/><ScalarOperator ScalarString=\"SUM([Union1037])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1037\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1078\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1038])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1038\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1079\"/><ScalarOperator ScalarString=\"SUM([Union1038])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1038\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1080\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1039])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1039\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1081\"/><ScalarOperator ScalarString=\"SUM([Union1039])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1039\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1082\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1040])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1040\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1083\"/><ScalarOperator ScalarString=\"SUM([Union1040])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1040\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1084\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1041])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1041\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1085\"/><ScalarOperator ScalarString=\"SUM([Union1041])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1041\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1086\"/><ScalarOperator ScalarString=\"COUNT_BIG([Union1042])\"><Aggregate Distinct=\"0\" AggType=\"COUNT_BIG\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1042\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1087\"/><ScalarOperator ScalarString=\"SUM([Union1042])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1042\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue></DefinedValues><GroupBy><ColumnReference Column=\"Union1033\"/></GroupBy><RelOp NodeId=\"4\" PhysicalOp=\"Sort\" LogicalOp=\"Sort\" EstimateRows=\"2\" EstimateIO=\"0.0112613\" EstimateCPU=\"0.000103208\" AvgRowSize=\"88\" EstimatedTotalSubtreeCost=\"0.0437365\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Union1033\"/><ColumnReference Column=\"Union1034\"/><ColumnReference Column=\"Union1036\"/><ColumnReference Column=\"Union1037\"/><ColumnReference Column=\"Union1038\"/><ColumnReference Column=\"Union1039\"/><ColumnReference Column=\"Union1040\"/><ColumnReference Column=\"Union1041\"/><ColumnReference Column=\"Union1042\"/><ColumnReference Column=\"Union1043\"/><ColumnReference Column=\"Union1044\"/></OutputList><MemoryFractions Input=\"0.5\" Output=\"1\"/><Sort Distinct=\"0\"><OrderBy><OrderByColumn Ascending=\"1\"><ColumnReference Column=\"Union1033\"/></OrderByColumn></OrderBy><RelOp NodeId=\"5\" PhysicalOp=\"Concatenation\" LogicalOp=\"Concatenation\" EstimateRows=\"2\" EstimateIO=\"0\" EstimateCPU=\"2e-07\" AvgRowSize=\"88\" EstimatedTotalSubtreeCost=\"0.032372\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Union1033\"/><ColumnReference Column=\"Union1034\"/><ColumnReference Column=\"Union1036\"/><ColumnReference Column=\"Union1037\"/><ColumnReference Column=\"Union1038\"/><ColumnReference Column=\"Union1039\"/><ColumnReference Column=\"Union1040\"/><ColumnReference Column=\"Union1041\"/><ColumnReference Column=\"Union1042\"/><ColumnReference Column=\"Union1043\"/><ColumnReference Column=\"Union1044\"/></OutputList><Concat><DefinedValues><DefinedValue><ColumnReference Column=\"Union1033\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1034\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1036\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/><ColumnReference Column=\"Expr1022\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1037\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/><ColumnReference Column=\"Expr1023\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1038\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Column=\"Expr1024\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1039\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/><ColumnReference Column=\"Expr1025\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1040\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/><ColumnReference Column=\"Expr1026\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1041\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Column=\"Expr1027\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1042\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Column=\"Expr1028\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1043\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/><ColumnReference Column=\"Expr1029\"/></DefinedValue><DefinedValue><ColumnReference Column=\"Union1044\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/><ColumnReference Column=\"Expr1030\"/></DefinedValue></DefinedValues><RelOp NodeId=\"6\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"4.8e-07\" AvgRowSize=\"88\" EstimatedTotalSubtreeCost=\"0.0127068\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/></OutputList><Filter StartupExpression=\"0\"><RelOp NodeId=\"7\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Inner Join\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"4.18e-06\" AvgRowSize=\"96\" EstimatedTotalSubtreeCost=\"0.0127063\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></OutputList><NestedLoops Optimized=\"0\"><OuterReferences><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"rowset\"/></OuterReferences><RelOp NodeId=\"8\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"0.0014476\" AvgRowSize=\"23\" EstimatedTotalSubtreeCost=\"0.012701\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"rowset\"/></OutputList><Filter StartupExpression=\"0\"><RelOp NodeId=\"9\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"4.7e-05\" AvgRowSize=\"40\" EstimatedTotalSubtreeCost=\"0.0112534\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"rowset\"/><ColumnReference Column=\"Expr1062\"/><ColumnReference Column=\"Expr1063\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1062\"/><ScalarOperator ScalarString=\"objectproperty([sonarqube].[sys].[sysidxstats].[id],'IsUserTable')\"><Intrinsic FunctionName=\"objectproperty\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"'IsUserTable'\"/></ScalarOperator></Intrinsic></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1063\"/><ScalarOperator ScalarString=\"objectproperty([sonarqube].[sys].[sysidxstats].[id],'TableIsMemoryOptimized')\"><Intrinsic FunctionName=\"objectproperty\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"'TableIsMemoryOptimized'\"/></ScalarOperator></Intrinsic></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"10\" PhysicalOp=\"Clustered Index Scan\" LogicalOp=\"Clustered Index Scan\" EstimateRows=\"1\" EstimatedRowsRead=\"470\" EstimateIO=\"0.0105324\" EstimateCPU=\"0.000674\" AvgRowSize=\"28\" EstimatedTotalSubtreeCost=\"0.0112064\" TableCardinality=\"470\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"rowset\"/></OutputList><IndexScan Ordered=\"0\" ForcedIndex=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"rowset\"/></DefinedValue></DefinedValues><Object Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Index=\"[clst]\" IndexKind=\"Clustered\" Storage=\"RowStore\"/><Predicate><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysidxstats].[indid]&gt;=(2) AND [sonarqube].[sys].[sysidxstats].[indid]&lt;(256000) AND [sonarqube].[sys].[sysidxstats].[type]&lt;&gt;(5) AND [sonarqube].[sys].[sysidxstats].[type]&lt;&gt;(6) AND ([sonarqube].[sys].[sysidxstats].[status]&amp;(1))=(1) AND ([sonarqube].[sys].[sysidxstats].[status]&amp;(67108864))=(0)\"><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"GE\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(2)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"LT\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(256000)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"NE\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"type\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(5)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"NE\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"type\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(6)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"status\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"status\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(67108864)\"/></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Predicate></IndexScan></RelOp></ComputeScalar></RelOp><Predicate><ScalarOperator ScalarString=\"[Expr1062]=(1) AND ([sonarqube].[sys].[sysidxstats].[indid]&lt;&gt;(0) OR [Expr1063]=(0))\"><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1062\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Logical Operation=\"OR\"><ScalarOperator><Compare CompareOp=\"NE\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1063\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Logical></ScalarOperator></Predicate></Filter></RelOp><RelOp NodeId=\"11\" PhysicalOp=\"Table-valued function\" LogicalOp=\"Table-valued function\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"1.157e-06\" AvgRowSize=\"88\" EstimatedTotalSubtreeCost=\"1.157e-06\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></OutputList><TableValuedFunction><DefinedValues><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></DefinedValue></DefinedValues><Object Table=\"[PARTITIONCOUNTS]\"/><ParameterList><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysidxstats].[id]\"><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"id\"/></Identifier></ScalarOperator><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysidxstats].[indid]\"><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"indid\"/></Identifier></ScalarOperator><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysidxstats].[rowset]\"><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Column=\"rowset\"/></Identifier></ScalarOperator></ParameterList></TableValuedFunction></RelOp></NestedLoops></RelOp><Predicate><ScalarOperator ScalarString=\"PARTITIONCOUNTS.[row_count]&gt;(0)\"><Compare CompareOp=\"GT\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Predicate></Filter></RelOp><RelOp NodeId=\"12\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"7.4294e-06\" AvgRowSize=\"88\" EstimatedTotalSubtreeCost=\"0.019665\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Column=\"Expr1022\"/><ColumnReference Column=\"Expr1023\"/><ColumnReference Column=\"Expr1024\"/><ColumnReference Column=\"Expr1025\"/><ColumnReference Column=\"Expr1026\"/><ColumnReference Column=\"Expr1027\"/><ColumnReference Column=\"Expr1028\"/><ColumnReference Column=\"Expr1029\"/><ColumnReference Column=\"Expr1030\"/></OutputList><Filter StartupExpression=\"0\"><RelOp NodeId=\"13\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"8.4425\" EstimateIO=\"0\" EstimateCPU=\"8.4425e-07\" AvgRowSize=\"100\" EstimatedTotalSubtreeCost=\"0.0196576\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Column=\"Expr1022\"/><ColumnReference Column=\"Expr1023\"/><ColumnReference Column=\"Expr1024\"/><ColumnReference Column=\"Expr1025\"/><ColumnReference Column=\"Expr1026\"/><ColumnReference Column=\"Expr1027\"/><ColumnReference Column=\"Expr1028\"/><ColumnReference Column=\"Expr1029\"/><ColumnReference Column=\"Expr1030\"/><ColumnReference Column=\"Expr1031\"/><ColumnReference Column=\"Expr1066\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1066\"/><ScalarOperator ScalarString=\"objectproperty([sonarqube].[sys].[sysrowsets].[idmajor] as [rs].[idmajor],'IsUserTable')\"><Intrinsic FunctionName=\"objectproperty\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"'IsUserTable'\"/></ScalarOperator></Intrinsic></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"14\" PhysicalOp=\"Stream Aggregate\" LogicalOp=\"Aggregate\" EstimateRows=\"8.4425\" EstimateIO=\"0\" EstimateCPU=\"9.3169e-06\" AvgRowSize=\"96\" EstimatedTotalSubtreeCost=\"0.0196567\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Column=\"Expr1022\"/><ColumnReference Column=\"Expr1023\"/><ColumnReference Column=\"Expr1024\"/><ColumnReference Column=\"Expr1025\"/><ColumnReference Column=\"Expr1026\"/><ColumnReference Column=\"Expr1027\"/><ColumnReference Column=\"Expr1028\"/><ColumnReference Column=\"Expr1029\"/><ColumnReference Column=\"Expr1030\"/><ColumnReference Column=\"Expr1031\"/></OutputList><StreamAggregate><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1022\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[in_row_data_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1023\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[in_row_used_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1024\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[in_row_reserved_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1025\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[lob_used_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1026\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[lob_reserved_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1027\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[row_overflow_used_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1028\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[row_overflow_reserved_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1029\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[used_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1030\"/><ScalarOperator ScalarString=\"SUM(PARTITIONCOUNTS.[reserved_page_count])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1031\"/><ScalarOperator ScalarString=\"SUM([Expr1067])\"><Aggregate Distinct=\"0\" AggType=\"SUM\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1067\"/></Identifier></ScalarOperator></Aggregate></ScalarOperator></DefinedValue></DefinedValues><GroupBy><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"numpart\"/></GroupBy><RelOp NodeId=\"15\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"8.49274\" EstimateIO=\"0\" EstimateCPU=\"8.49274e-07\" AvgRowSize=\"100\" EstimatedTotalSubtreeCost=\"0.0196474\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"numpart\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/><ColumnReference Column=\"Expr1067\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1067\"/><ScalarOperator ScalarString=\"CASE WHEN [sonarqube].[sys].[sysrowsets].[ownertype] as [rs].[ownertype]=(4) OR [sonarqube].[sys].[sysrowsets].[ownertype] as [rs].[ownertype]=(2) THEN  -PARTITIONCOUNTS.[row_count] ELSE PARTITIONCOUNTS.[row_count] END\"><IF><Condition><ScalarOperator><Logical Operation=\"OR\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(4)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(2)\"/></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Condition><Then><ScalarOperator><Arithmetic Operation=\"MINUS\"><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></Identifier></ScalarOperator></Arithmetic></ScalarOperator></Then><Else><ScalarOperator><Identifier><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></Identifier></ScalarOperator></Else></IF></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"16\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Inner Join\" EstimateRows=\"8.49274\" EstimateIO=\"0\" EstimateCPU=\"3.54997e-05\" AvgRowSize=\"101\" EstimatedTotalSubtreeCost=\"0.0196466\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"numpart\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></OutputList><NestedLoops Optimized=\"0\"><OuterReferences><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"rowsetid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/></OuterReferences><RelOp NodeId=\"17\" PhysicalOp=\"Sort\" LogicalOp=\"Sort\" EstimateRows=\"8.49274\" EstimateIO=\"0.0112613\" EstimateCPU=\"0.000140916\" AvgRowSize=\"28\" EstimatedTotalSubtreeCost=\"0.0196024\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"rowsetid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"numpart\"/></OutputList><MemoryFractions Input=\"0.5\" Output=\"0.5\"/><Sort Distinct=\"0\"><OrderBy><OrderByColumn Ascending=\"1\"><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/></OrderByColumn><OrderByColumn Ascending=\"1\"><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/></OrderByColumn><OrderByColumn Ascending=\"1\"><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"numpart\"/></OrderByColumn></OrderBy><RelOp NodeId=\"19\" PhysicalOp=\"Clustered Index Scan\" LogicalOp=\"Clustered Index Scan\" EstimateRows=\"8.49274\" EstimatedRowsRead=\"349\" EstimateIO=\"0.0068287\" EstimateCPU=\"0.0005409\" AvgRowSize=\"32\" EstimatedTotalSubtreeCost=\"0.0073696\" TableCardinality=\"349\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"rowsetid\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"numpart\"/></OutputList><IndexScan Ordered=\"0\" ForcedIndex=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"rowsetid\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/></DefinedValue><DefinedValue><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"numpart\"/></DefinedValue></DefinedValues><Object Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Index=\"[clust]\" Alias=\"[rs]\" IndexKind=\"Clustered\" Storage=\"RowStore\"/><Predicate><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysrowsets].[idminor] as [rs].[idminor]&gt;=(2) AND ([sonarqube].[sys].[sysrowsets].[ownertype] as [rs].[ownertype]=(4) OR [sonarqube].[sys].[sysrowsets].[ownertype] as [rs].[ownertype]=(3) OR [sonarqube].[sys].[sysrowsets].[ownertype] as [rs].[ownertype]=(2) OR CONVERT(bit,[sonarqube].[sys].[sysrowsets].[status] as [rs].[status]&amp;(65536),0)=(1) AND [sonarqube].[sys].[sysrowsets].[ownertype] as [rs].[ownertype]=(1))\"><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"GE\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(2)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Logical Operation=\"OR\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(4)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(3)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(2)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Convert DataType=\"bit\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"status\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(65536)\"/></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"ownertype\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Logical></ScalarOperator></Logical></ScalarOperator></Predicate></IndexScan></RelOp></Sort></RelOp><RelOp NodeId=\"20\" PhysicalOp=\"Table-valued function\" LogicalOp=\"Table-valued function\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"1.157e-06\" AvgRowSize=\"88\" EstimatedTotalSubtreeCost=\"8.64974e-06\" Parallel=\"0\" EstimateRebinds=\"7.49274\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></OutputList><TableValuedFunction><DefinedValues><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_data_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"in_row_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"lob_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_overflow_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"[PARTITIONCOUNTS]\" Column=\"row_count\"/></DefinedValue></DefinedValues><Object Table=\"[PARTITIONCOUNTS]\"/><ParameterList><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysrowsets].[idmajor] as [rs].[idmajor]\"><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idmajor\"/></Identifier></ScalarOperator><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysrowsets].[idminor] as [rs].[idminor]\"><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"idminor\"/></Identifier></ScalarOperator><ScalarOperator ScalarString=\"[sonarqube].[sys].[sysrowsets].[rowsetid] as [rs].[rowsetid]\"><Identifier><ColumnReference Database=\"[sonarqube]\" Schema=\"[sys]\" Table=\"[sysrowsets]\" Alias=\"[rs]\" Column=\"rowsetid\"/></Identifier></ScalarOperator></ParameterList></TableValuedFunction></RelOp></NestedLoops></RelOp></ComputeScalar></RelOp></StreamAggregate></RelOp></ComputeScalar></RelOp><Predicate><ScalarOperator ScalarString=\"[Expr1066]=(1) AND [Expr1031]&gt;(0)\"><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1066\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"GT\"><ScalarOperator><Identifier><ColumnReference Column=\"Expr1031\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Predicate></Filter></RelOp></Concat></RelOp></Sort></RelOp></StreamAggregate></RelOp></ComputeScalar></RelOp></ComputeScalar></RelOp></Update></RelOp></QueryPlan></StmtSimple><StmtSimple StatementText=\" &#x0A; &#x0A;-- Joint the two temp tables &#x0A;select /* SqlServerTune:CmTableSize */ &#x0A;      DbName     = convert(varchar(128), '') /* using DbmsObjectIdCache to do DbxTune cached lookups */ &#x0A;    , SchemaName = convert(varchar(128), '') /* using DbmsObjectIdCache to do DbxTune cached lookups */ &#x0A;    , TableName  = convert(varchar(128), '') /* using DbmsObjectIdCache to do DbxTune cached lookups */ &#x0A;    , dstat.HasClusteredIndex &#x0A;    , NcIndexCount        = isnull(ncistat.NcIndexCount, 0) &#x0A;    , dstat.PartitionCount &#x0A;    , RowCountAbs         = dstat.row_count &#x0A;    , RowCountDiff        = dstat.row_count &#x0A;    , DataRowsPerPage     = dstat.RowsPerPage &#x0A;    , DataVsIndexPct      = convert(decimal(12,1), case when dstat.UsedSizeMB = 0 then null else (ncistat.UsedSizeMB / dstat.UsedSizeMB) * 100.0 end) &#x0A; &#x0A;    , TotalReservedSizeMB = dstat.ReservedSizeMB + isnull(ncistat.ReservedSizeMB, 0.0) &#x0A;    , TotalUsedSizeMB     = dstat.UsedSizeMB     + isnull(ncistat.UsedSizeMB    , 0.0) &#x0A;    , TotalUnUsedSizeMB   = dstat.UnUsedSizeMB   + isnull(ncistat.UnUsedSizeMB  , 0.0) &#x0A;    -- pct = TotalUnUsedSizeMB/TotalReservedSizeMB &#x0A;    , TotalUnUsedPct      = convert(decimal(12,1),  case when dstat.ReservedSizeMB + isnull(ncistat.ReservedSizeMB, 0.0) = 0 then null else (dstat.UnUsedSizeMB + isnull(ncistat.UnUsedSizeMB  , 0.0))/(dstat.ReservedSizeMB + isnull(ncistat.ReservedSizeMB, 0.0)) * 100.0 end) &#x0A; &#x0A;    , HasLobData          = convert(bit, case when dstat.lob_reserved_page_count &gt; 0 then 1 else 0 end) &#x0A; &#x0A;    , DataReservedSizeMB  = dstat.ReservedSizeMB &#x0A;    , DataUsedSizeMB      = dstat.UsedSizeMB &#x0A;    , DataUnUsedSizeMB    = dstat.UnUsedSizeMB &#x0A;    , DataUnUsedPct       = convert(decimal(12,1),  case when dstat.ReservedSizeMB = 0 then null else (dstat.UnUsedSizeMB/dstat.ReservedSizeMB) * 100.0 end) &#x0A; &#x0A;    , IndexReservedSizeMB = ncistat.ReservedSizeMB &#x0A;    , IndexUsedSizeMB     = ncistat.UsedSizeMB &#x0A;    , IndexUnUsedSizeMB   = ncistat.UnUsedSizeMB &#x0A;    , IndexUnUsedPct      = convert(decimal(12,1),  case when ncistat.ReservedSizeMB = 0 then null else (ncistat.UnUsedSizeMB/ncistat.ReservedSizeMB) * 100.0 end) &#x0A; &#x0A;    , LobReservedSizeMB   = dstat.LobReservedSizeMB &#x0A;    , LobUsedSizeMB       = dstat.LobUsedSizeMB &#x0A;    , LobUnUsedSizeMB     = dstat.LobUnUsedSizeMB &#x0A;    , LobUnUsedPct        = convert(decimal(12,1),  case when dstat.LobReservedSizeMB = 0 then null else (dstat.LobUnUsedSizeMB/dstat.LobReservedSizeMB) * 100.0 end) &#x0A;    , LobTableContentPct  = convert(decimal(12,1),  case when dstat.LobReservedSizeMB = 0 then null when dstat.ReservedSizeMB = 0 then 0 else (dstat.LobReservedSizeMB / dstat.ReservedSizeMB) * 100.0 end) &#x0A; &#x0A;    , DataStatsUpdated    = dstat.StatsUpdated &#x0A;    , NcIndexStatsUpdated = ncistat.StatsUpdated &#x0A; &#x0A;    , d_in_row_data_page_count           = dstat.in_row_data_page_count &#x0A;    , d_in_row_used_page_count           = dstat.in_row_used_page_count &#x0A;    , d_in_row_reserved_page_count       = dstat.in_row_reserved_page_count &#x0A;    , d_lob_used_page_count              = dstat.lob_used_page_count &#x0A;    , d_lob_reserved_page_count          = dstat.lob_reserved_page_count &#x0A;    , d_row_overflow_used_page_count     = dstat.row_overflow_used_page_count &#x0A;    , d_row_overflow_reserved_page_count = dstat.row_overflow_reserved_page_count &#x0A; &#x0A;    , i_in_row_data_page_count           = ncistat.in_row_data_page_count &#x0A;    , i_in_row_used_page_count           = ncistat.in_row_used_page_count &#x0A;    , i_in_row_reserved_page_count       = ncistat.in_row_reserved_page_count &#x0A;    , i_lob_used_page_count              = ncistat.lob_used_page_count &#x0A;    , i_lob_reserved_page_count          = ncistat.lob_reserved_page_count &#x0A;    , i_row_overflow_used_page_count     = ncistat.row_overflow_used_page_count &#x0A;    , i_row_overflow_reserved_page_count = ncistat.row_overflow_reserved_page_count &#x0A; &#x0A;    , database_id = db_id() &#x0A;    , dstat.object_id &#x0A; &#x0A;from #dstat dstat &#x0A;left outer join #ncistat ncistat on dstat.object_id = ncistat.object_id\" StatementId=\"7\" StatementCompId=\"9\" StatementType=\"SELECT\" RetrievedFromCache=\"true\" StatementSubTreeCost=\"0.0185899\" StatementEstRows=\"44\" SecurityPolicyApplied=\"false\" StatementOptmLevel=\"FULL\" QueryHash=\"0x0FDB5E56A8412F68\" QueryPlanHash=\"0xD808D6D908B241C7\" StatementOptmEarlyAbortReason=\"GoodEnoughPlanFound\" CardinalityEstimationModelVersion=\"150\"><StatementSetOptions QUOTED_IDENTIFIER=\"true\" ARITHABORT=\"false\" CONCAT_NULL_YIELDS_NULL=\"true\" ANSI_NULLS=\"true\" ANSI_PADDING=\"true\" ANSI_WARNINGS=\"true\" NUMERIC_ROUNDABORT=\"false\"/><QueryPlan CachedPlanSize=\"80\" CompileTime=\"4\" CompileCPU=\"4\" CompileMemory=\"624\"><MemoryGrantInfo SerialRequiredMemory=\"0\" SerialDesiredMemory=\"0\" GrantedMemory=\"0\" MaxUsedMemory=\"0\"/><OptimizerHardwareDependentProperties EstimatedAvailableMemoryGrant=\"1315430\" EstimatedPagesCached=\"328857\" EstimatedAvailableDegreeOfParallelism=\"2\" MaxCompileMemory=\"31018928\"/><OptimizerStatsUsage><StatisticsInfo LastUpdate=\"2022-02-07T16:41:09.88\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000001_AC1BEBA5]\" Table=\"[#ncistat____________________________________________________________________________________________________________000000AD0104]\" Schema=\"[dbo]\" Database=\"[tempdb]\"/><StatisticsInfo LastUpdate=\"2022-02-07T16:41:09.87\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000001_AB27C76C]\" Table=\"[#dstat______________________________________________________________________________________________________________000000AD0103]\" Schema=\"[dbo]\" Database=\"[tempdb]\"/></OptimizerStatsUsage><RelOp NodeId=\"0\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"44\" EstimateIO=\"0\" EstimateCPU=\"4.4e-06\" AvgRowSize=\"534\" EstimatedTotalSubtreeCost=\"0.0185899\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"object_id\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"StatsUpdated\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"HasClusteredIndex\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"PartitionCount\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"RowsPerPage\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"ReservedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UnUsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobReservedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobUsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobUnUsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"StatsUpdated\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"ReservedSizeMB\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"UsedSizeMB\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"UnUsedSizeMB\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Column=\"Expr1004\"/><ColumnReference Column=\"Expr1005\"/><ColumnReference Column=\"Expr1006\"/><ColumnReference Column=\"Expr1007\"/><ColumnReference Column=\"Expr1008\"/><ColumnReference Column=\"Expr1009\"/><ColumnReference Column=\"Expr1010\"/><ColumnReference Column=\"Expr1011\"/><ColumnReference Column=\"Expr1012\"/><ColumnReference Column=\"Expr1013\"/><ColumnReference Column=\"Expr1014\"/><ColumnReference Column=\"Expr1015\"/><ColumnReference Column=\"Expr1016\"/><ColumnReference Column=\"Expr1017\"/><ColumnReference Column=\"Expr1018\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1004\"/><ScalarOperator ScalarString=\"''\"><Const ConstValue=\"''\"/></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1005\"/><ScalarOperator ScalarString=\"''\"><Const ConstValue=\"''\"/></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1006\"/><ScalarOperator ScalarString=\"''\"><Const ConstValue=\"''\"/></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1007\"/><ScalarOperator ScalarString=\"isnull(#ncistat.[NcIndexCount] as [ncistat].[NcIndexCount],(0))\"><Intrinsic FunctionName=\"isnull\"><ScalarOperator><Identifier><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"NcIndexCount\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Intrinsic></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1008\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CASE WHEN #dstat.[UsedSizeMB] as [dstat].[UsedSizeMB]=(0.0) THEN NULL ELSE #ncistat.[UsedSizeMB] as [ncistat].[UsedSizeMB]/#dstat.[UsedSizeMB] as [dstat].[UsedSizeMB]*(100.0) END,0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UsedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0.0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Arithmetic Operation=\"MULT\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Identifier><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"UsedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UsedSizeMB\"/></Identifier></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(100.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1009\"/><ScalarOperator ScalarString=\"#dstat.[ReservedSizeMB] as [dstat].[ReservedSizeMB]+isnull(#ncistat.[ReservedSizeMB] as [ncistat].[ReservedSizeMB],(0.0))\"><Arithmetic Operation=\"ADD\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"ReservedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Intrinsic FunctionName=\"isnull\"><ScalarOperator><Identifier><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"ReservedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0.0)\"/></ScalarOperator></Intrinsic></ScalarOperator></Arithmetic></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1010\"/><ScalarOperator ScalarString=\"#dstat.[UsedSizeMB] as [dstat].[UsedSizeMB]+isnull(#ncistat.[UsedSizeMB] as [ncistat].[UsedSizeMB],(0.0))\"><Arithmetic Operation=\"ADD\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UsedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Intrinsic FunctionName=\"isnull\"><ScalarOperator><Identifier><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"UsedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0.0)\"/></ScalarOperator></Intrinsic></ScalarOperator></Arithmetic></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1011\"/><ScalarOperator ScalarString=\"#dstat.[UnUsedSizeMB] as [dstat].[UnUsedSizeMB]+isnull(#ncistat.[UnUsedSizeMB] as [ncistat].[UnUsedSizeMB],(0.0))\"><Arithmetic Operation=\"ADD\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UnUsedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Intrinsic FunctionName=\"isnull\"><ScalarOperator><Identifier><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"UnUsedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0.0)\"/></ScalarOperator></Intrinsic></ScalarOperator></Arithmetic></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1012\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CASE WHEN (#dstat.[ReservedSizeMB] as [dstat].[ReservedSizeMB]+isnull(#ncistat.[ReservedSizeMB] as [ncistat].[ReservedSizeMB],(0.0)))=(0.0) THEN NULL ELSE (#dstat.[UnUsedSizeMB] as [dstat].[UnUsedSizeMB]+isnull(#ncistat.[UnUsedSizeMB] as [ncistat].[UnUsedSizeMB],(0.0)))/(#dstat.[ReservedSizeMB] as [dstat].[ReservedSizeMB]+isnull(#ncistat.[ReservedSizeMB] as [ncistat].[ReservedSizeMB],(0.0)))*(100.0) END,0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Arithmetic Operation=\"ADD\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"ReservedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Intrinsic FunctionName=\"isnull\"><ScalarOperator><Identifier><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"ReservedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0.0)\"/></ScalarOperator></Intrinsic></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(0.0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Arithmetic Operation=\"MULT\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Arithmetic Operation=\"ADD\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UnUsedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Intrinsic FunctionName=\"isnull\"><ScalarOperator><Identifier><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"UnUsedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0.0)\"/></ScalarOperator></Intrinsic></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Arithmetic Operation=\"ADD\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"ReservedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Intrinsic FunctionName=\"isnull\"><ScalarOperator><Identifier><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"ReservedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0.0)\"/></ScalarOperator></Intrinsic></ScalarOperator></Arithmetic></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(100.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1015\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CASE WHEN #ncistat.[ReservedSizeMB] as [ncistat].[ReservedSizeMB]=(0.0) THEN NULL ELSE #ncistat.[UnUsedSizeMB] as [ncistat].[UnUsedSizeMB]/#ncistat.[ReservedSizeMB] as [ncistat].[ReservedSizeMB]*(100.0) END,0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"ReservedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0.0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Arithmetic Operation=\"MULT\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Identifier><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"UnUsedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"ReservedSizeMB\"/></Identifier></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(100.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1018\"/><ScalarOperator ScalarString=\"db_id()\"><Identifier><ColumnReference Column=\"ConstExpr1019\"><ScalarOperator><Intrinsic FunctionName=\"db_id\"><ScalarOperator><Const ConstValue=\"\"/></ScalarOperator></Intrinsic></ScalarOperator></ColumnReference></Identifier></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"1\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Left Outer Join\" EstimateRows=\"44\" EstimateIO=\"0\" EstimateCPU=\"0.0064372\" AvgRowSize=\"277\" EstimatedTotalSubtreeCost=\"0.0185855\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"object_id\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"StatsUpdated\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"HasClusteredIndex\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"PartitionCount\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"RowsPerPage\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"ReservedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UnUsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobReservedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobUsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobUnUsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"StatsUpdated\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"NcIndexCount\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"ReservedSizeMB\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"UsedSizeMB\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"UnUsedSizeMB\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Column=\"Expr1013\"/><ColumnReference Column=\"Expr1014\"/><ColumnReference Column=\"Expr1016\"/><ColumnReference Column=\"Expr1017\"/></OutputList><NestedLoops Optimized=\"0\"><Predicate><ScalarOperator ScalarString=\"#dstat.[object_id] as [dstat].[object_id]=#ncistat.[object_id] as [ncistat].[object_id]\"><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"object_id\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"object_id\"/></Identifier></ScalarOperator></Compare></ScalarOperator></Predicate><RelOp NodeId=\"2\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"44\" EstimateIO=\"0\" EstimateCPU=\"4.4e-06\" AvgRowSize=\"180\" EstimatedTotalSubtreeCost=\"0.0033348\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"object_id\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"StatsUpdated\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"HasClusteredIndex\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"PartitionCount\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"RowsPerPage\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"ReservedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UnUsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobReservedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobUsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobUnUsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_overflow_reserved_page_count\"/><ColumnReference Column=\"Expr1013\"/><ColumnReference Column=\"Expr1014\"/><ColumnReference Column=\"Expr1016\"/><ColumnReference Column=\"Expr1017\"/></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1013\"/><ScalarOperator ScalarString=\"CONVERT(bit,CASE WHEN #dstat.[lob_reserved_page_count] as [dstat].[lob_reserved_page_count]&gt;(0) THEN (1) ELSE (0) END,0)\"><Convert DataType=\"bit\" Style=\"0\" Implicit=\"0\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"GT\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"lob_reserved_page_count\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(1)\"/></ScalarOperator></Then><Else><ScalarOperator><Const ConstValue=\"(0)\"/></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1014\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CASE WHEN #dstat.[ReservedSizeMB] as [dstat].[ReservedSizeMB]=(0.0) THEN NULL ELSE #dstat.[UnUsedSizeMB] as [dstat].[UnUsedSizeMB]/#dstat.[ReservedSizeMB] as [dstat].[ReservedSizeMB]*(100.0) END,0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"ReservedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0.0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Arithmetic Operation=\"MULT\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UnUsedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"ReservedSizeMB\"/></Identifier></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(100.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1016\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CASE WHEN #dstat.[LobReservedSizeMB] as [dstat].[LobReservedSizeMB]=(0.0) THEN NULL ELSE #dstat.[LobUnUsedSizeMB] as [dstat].[LobUnUsedSizeMB]/#dstat.[LobReservedSizeMB] as [dstat].[LobReservedSizeMB]*(100.0) END,0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobReservedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0.0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><Arithmetic Operation=\"MULT\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobUnUsedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobReservedSizeMB\"/></Identifier></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(100.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1017\"/><ScalarOperator ScalarString=\"CONVERT(decimal(12,1),CASE WHEN #dstat.[LobReservedSizeMB] as [dstat].[LobReservedSizeMB]=(0.0) THEN NULL ELSE CASE WHEN #dstat.[ReservedSizeMB] as [dstat].[ReservedSizeMB]=(0.0) THEN (0.000000000000000) ELSE #dstat.[LobReservedSizeMB] as [dstat].[LobReservedSizeMB]/#dstat.[ReservedSizeMB] as [dstat].[ReservedSizeMB]*(100.0) END END,0)\"><Convert DataType=\"decimal\" Precision=\"12\" Scale=\"1\" Style=\"0\" Implicit=\"0\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobReservedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0.0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"NULL\"/></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"ReservedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0.0)\"/></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(0.000000000000000)\"/></ScalarOperator></Then><Else><ScalarOperator><Arithmetic Operation=\"MULT\"><ScalarOperator><Arithmetic Operation=\"DIV\"><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobReservedSizeMB\"/></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"ReservedSizeMB\"/></Identifier></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(100.0)\"/></ScalarOperator></Arithmetic></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"3\" PhysicalOp=\"Table Scan\" LogicalOp=\"Table Scan\" EstimateRows=\"44\" EstimatedRowsRead=\"44\" EstimateIO=\"0.003125\" EstimateCPU=\"0.0002054\" AvgRowSize=\"153\" EstimatedTotalSubtreeCost=\"0.0033304\" TableCardinality=\"44\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"object_id\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"StatsUpdated\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"HasClusteredIndex\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"PartitionCount\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"RowsPerPage\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"ReservedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UnUsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobReservedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobUsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobUnUsedSizeMB\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_overflow_reserved_page_count\"/></OutputList><TableScan Ordered=\"0\" ForcedIndex=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"object_id\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"StatsUpdated\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"HasClusteredIndex\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"PartitionCount\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"RowsPerPage\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"ReservedSizeMB\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UsedSizeMB\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"UnUsedSizeMB\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobReservedSizeMB\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobUsedSizeMB\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"LobUnUsedSizeMB\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_data_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"in_row_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"lob_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"lob_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_overflow_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#dstat\" Alias=\"[dstat]\" Column=\"row_overflow_reserved_page_count\"/></DefinedValue></DefinedValues><Object Database=\"[tempdb]\" Schema=\"[dbo]\" Table=\"[#dstat]\" Alias=\"[dstat]\" Storage=\"RowStore\"/></TableScan></RelOp></ComputeScalar></RelOp><RelOp NodeId=\"4\" PhysicalOp=\"Table Scan\" LogicalOp=\"Table Scan\" EstimateRows=\"35\" EstimatedRowsRead=\"35\" EstimateIO=\"0.0032035\" EstimateCPU=\"0.000117\" AvgRowSize=\"107\" EstimatedTotalSubtreeCost=\"0.0083515\" TableCardinality=\"35\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"43\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"object_id\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"StatsUpdated\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"NcIndexCount\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"ReservedSizeMB\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"UsedSizeMB\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"UnUsedSizeMB\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"in_row_data_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"in_row_used_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"in_row_reserved_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"lob_used_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"lob_reserved_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"row_overflow_used_page_count\"/><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"row_overflow_reserved_page_count\"/></OutputList><TableScan Ordered=\"0\" ForcedIndex=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"object_id\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"StatsUpdated\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"NcIndexCount\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"ReservedSizeMB\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"UsedSizeMB\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"UnUsedSizeMB\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"in_row_data_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"in_row_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"in_row_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"lob_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"lob_reserved_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"row_overflow_used_page_count\"/></DefinedValue><DefinedValue><ColumnReference Table=\"#ncistat\" Alias=\"[ncistat]\" Column=\"row_overflow_reserved_page_count\"/></DefinedValue></DefinedValues><Object Database=\"[tempdb]\" Schema=\"[dbo]\" Table=\"[#ncistat]\" Alias=\"[ncistat]\" Storage=\"RowStore\"/></TableScan></RelOp></NestedLoops></RelOp></ComputeScalar></RelOp></QueryPlan></StmtSimple><StmtSimple StatementText=\" &#x0A; &#x0A;-- Drop temp tables &#x0A;drop table #dstat\" StatementId=\"8\" StatementCompId=\"10\" StatementType=\"DROP OBJECT\" RetrievedFromCache=\"true\"/><StmtSimple StatementText=\" &#x0A;drop table #ncistat\" StatementId=\"9\" StatementCompId=\"11\" StatementType=\"DROP OBJECT\" RetrievedFromCache=\"true\"/></Statements></Batch></BatchSequence></ShowPlanXML>");
//}

//	/**
//	 * ObjectName details
//	 */
//	public static class ObjectName
//	{
//		public int    _dbid       = 0;
//		public int    _objectid   = 0;
//
//		public String _dbname     = "";
//		public String _schemaName = "";
//		public String _tableName  = "";
//	}
//
//	/**
//	 * Get object information
//	 * 
//	 * @param conn
//	 * @param dbid
//	 * @param objectid
//	 * @return ObjectName   null if problems
//	 */
//	public static ObjectName getObjectName(DbxConnection conn, int dbid, int objectid)
//	{
//		String sql    = "select db_name(?)";
//		String dbname = null;
//
//		try (PreparedStatement pstmnt = conn.prepareStatement(sql)) // Auto CLOSE
//		{
//			// Timeout after 1 second --- if we get blocked when doing: object_name()
//			pstmnt.setQueryTimeout(1);
//
//			// set SPID
//			pstmnt.setInt(1, dbid);
//		
//			try (ResultSet rs = pstmnt.executeQuery()) // Auto CLOSE
//			{
//				while(rs.next())
//				{
//					dbname = rs.getString(1);
//				}
//			}
//		}
//		catch (SQLException ex)
//		{
//			_logger.warn("Problems when executing sql: " + sql + ". SQLException Error=" + ex.getErrorCode() + ", Msg='" + StringUtil.stripNewLine(ex.getMessage()) + "'.", ex);
//		}
//
//		if (StringUtil.isNullOrBlank(dbname))
//			return null;
//		
//		return getObjectName(conn, dbname, objectid);
//	}
//	
//	/**
//	 * Get object information
//	 * 
//	 * @param conn
//	 * @param dbname
//	 * @param objectid
//	 * @return ObjectName   null if problems
//	 */
//	public static ObjectName getObjectName(DbxConnection conn, String dbname, int objectid)
//	{
//		String sql = ""
//			    + "select \n"
//			    + "     dbid       = (select db_id(?)) \n"
//			    + "    ,SchemaName = (select s.name from [" + dbname + "].sys.objects o inner join [" + dbname + "].sys.schemas s ON s.schema_id = o.schema_id where o.object_id = ?) \n"
//			    + "    ,ObjectName = (select o.name from [" + dbname + "].sys.objects o where o.object_id = ?) \n"
//			    + "";
//
//		ObjectName objName = new ObjectName();
//
//		try (PreparedStatement pstmnt = conn.prepareStatement(sql)) // Auto CLOSE
//		{
//			// Timeout after 1 second --- if we get blocked when doing: object_name()
//			pstmnt.setQueryTimeout(1);
//
//			// set SPID
//			pstmnt.setString(1, dbname);
//			pstmnt.setInt   (2, objectid);
//			pstmnt.setInt   (3, objectid);
//		
//			try (ResultSet rs = pstmnt.executeQuery()) // Auto CLOSE
//			{
//				while(rs.next())
//				{
//					int    dbid       = rs.getInt   (1);
//					String schemaName = rs.getString(2);
//					String tableName  = rs.getString(3);
//
//					objName._dbid       = dbid;
//					objName._dbname     = dbname;
//					
//					objName._objectid   = objectid;
//					objName._schemaName = schemaName;
//					objName._tableName  = tableName;
//				}
//			}
//		}
//		catch (SQLException ex)
//		{
//			_logger.warn("Problems when executing sql: " + sql + ". SQLException Error=" + ex.getErrorCode() + ", Msg='" + StringUtil.stripNewLine(ex.getMessage()) + "'.", ex);
//		}
//
//		if (StringUtil.isNullOrBlank(objName._dbname))
//			return null;
//		
//		return objName;
//	}

	/**
	 * Getting all ROOT Blockers (yes many records can be returned)
	 * @param conn
	 * @return A List of SPID's. Empty List if none was found.
	 */
	public static List<Integer> getRootBlockerList(DbxConnection conn)
	{
		if (conn == null)
			return Collections.emptyList();

		// Basic sql from: https://www.sqlshack.com/resolve-and-troubleshoot-sql-blocking-chain-with-root-session/
		// But with some changes
		String sql = ""
				+ ";WITH root_blocker \n"
				+ "AS \n"
				+ "( \n"
				+ "    SELECT  \n"
				+ "         session_id \n"
				+ "        ,blocking_session_id \n"
				+ "    FROM sys.dm_exec_requests \n"
				+ "    WHERE session_id > 49  \n"
				+ "      AND blocking_session_id != 0 \n"
				+ "\n"
				+ "    UNION ALL \n"
				+ "\n"
				+ "    SELECT  \n"
				+ "         X.blocking_session_id            AS session_id \n"
				+ "        ,ISNULL(Y.blocking_session_id, 0) AS blocking_session_id \n"
				+ "    FROM root_blocker X \n"
				+ "    OUTER APPLY (SELECT blocking_session_id FROM sys.dm_exec_requests WHERE session_id = X.blocking_session_id) as Y \n"
				+ "    WHERE X.blocking_session_id != 0 \n"
				+ ") \n"
				+ "SELECT DISTINCT session_id as root_blockers \n"
				+ "FROM root_blocker rb \n"
				+ "WHERE rb.blocking_session_id = 0 \n"
				;
		
		List<Integer> rootBlockers = new ArrayList<>();
		
		try (Statement stmnt = conn.createStatement(); ResultSet rs = stmnt.executeQuery(sql))
		{
			while(rs.next())
			{
				rootBlockers.add(rs.getInt(1));
			}
		}
		catch (SQLException ex)
		{
			_logger.warn("Problems getting root blockers. ErrorCode=" + ex.getErrorCode() + ", SqlState='" + ex.getSQLState() + "', Text='" + ex.getMessage()+ "'. SQL=|" + sql + "|, Caught: " + ex);
		}
		
		return rootBlockers;
	}
	
	/**
	 * Check ALL databases for the procedure 'name'
	 * <ul>
	 *     <li>First check in master</li>
	 *     <li>Then check in reversed database order, so we get 'master' last</li>
	 * </ul>
	 * The "last" database we see the procedure in, we will use <br>
	 */
	public static String findProcNameInAnyDatabases(DbxConnection conn, String procName, String defaultIfNotFound, boolean printInfoOnNotFound)
	{
		if (conn == null)
			return defaultIfNotFound;

		// Check ALL databases for the procedure 'name' (in reversed database order, so we get 'master' last)
		// The "last" database we see the procedure in, we will use
		// if NO procedure was found, print a info message
		String sql = ""
			    + "DECLARE @dbname NVARCHAR(128)  = NULL; \n"
			    + "DECLARE @dblist NVARCHAR(2000) = NULL; \n"
			    + "DECLARE @sql    NVARCHAR(MAX)  = ''; \n"
			    + " \n"
			    + "/* Check if it exists in: master */ \n"
			    + "IF EXISTS (select 1 from master.sys.all_objects where type = 'P' and name = 'sp_blitz') \n"
			    + "    set @dbname = 'master' \n"
			    + " \n"
			    + "/* Check if it exists in: 'any other database' */ \n"
			    + "IF (@dbname IS NULL) \n"
			    + "BEGIN \n"
			    + "    SELECT @sql = @sql + 'if exists(select 1 from ' + QUOTENAME(name) + '.sys.all_objects where type = ''P'' and name = ''" + procName + "'') set @dbname='''+name+'''' + char(10) \n"
			    + "          ,@dblist = COALESCE(@dblist + ', ', '') + name \n"
			    + "    FROM sys.databases \n"
			    + "    WHERE state = 0 \n"              // Only databases in ONLINE mode
			    + "      AND HAS_DBACCESS(name) = 1 \n" // Skips database that we do NOT have access to...
			    + "    ORDER BY database_id DESC \n"    // Check master database last...
			    + "     \n"
			    + "    EXEC SP_EXECUTESQL \n"
			    + "            @Query  = @sql \n"
			    + "          , @Params = N'@dbname NVARCHAR(128) OUTPUT' \n"
			    + "          , @dbname = @dbname OUTPUT \n"
			    + "     \n"
			    + "END \n"
			    + " \n"
			    + "select @dbname AS dbname, @dblist AS dblist \n"
			    ;
		
		try (Statement stmnt = conn.createStatement(); ResultSet rs = stmnt.executeQuery(sql))
		{
			String dbname = null;
			String dblist = null;

			while(rs.next())
			{
				dbname = rs.getString(1);
				dblist = rs.getString(2);
			}
			
			if (StringUtil.isNullOrBlank(dbname))
			{
				dbname = defaultIfNotFound;

				if (printInfoOnNotFound)
					_logger.info("findProcNameInAnyDatabases(procName='" + procName + "'): Not found in any database. Searched databases: " + dblist);
			}

			return dbname;
		}
		catch (SQLException ex)
		{
			_logger.warn("Problems looking up Procedure Name '" + procName + "' from any database. ErrorCode=" + ex.getErrorCode() + ", SqlState='" + ex.getSQLState() + "', Text='" + ex.getMessage()+ "'. SQL=|" + sql + "|, Caught: " + ex);
			return defaultIfNotFound;
		}
	}
}

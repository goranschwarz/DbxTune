/*******************************************************************************
 * Copyright (C) 2010-2019 Goran Schwarz
 * 
 * This file is part of DbxTune
 * DbxTune is a family of sub-products *Tune, hence the Dbx
 * Here are some of the tools: AseTune, IqTune, RsTune, RaxTune, HanaTune, 
 *          SqlServerTune, PostgresTune, MySqlTune, MariaDbTune, Db2Tune, ...
 * 
 * DbxTune is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DbxTune is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DbxTune.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package com.dbxtune.sql.showplan.transform;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.URL;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.apache.commons.text.StringEscapeUtils;

import com.dbxtune.utils.Configuration;

public class SqlServerShowPlanXmlTransformer
{
	public static final String PROKKEY_transform = "SqlServerShowPlanXmlTransformer.ShowPlan.toHtml";
	public static final String DEFAULT_transform = "simple_ul";

	/**
	 * Depending on configuration, transform the ShowPlanXML into some form of HTML
	 * 
	 * @param xmlPlan
	 * @return
	 * @throws Exception
	 */
	public String toHtml(String xmlPlan)
	throws Exception
	{
		String conf = Configuration.getCombinedConfiguration().getProperty(PROKKEY_transform, DEFAULT_transform);

		if (DEFAULT_transform.equalsIgnoreCase(conf))
		{
			return toHtmlSimpleUl(xmlPlan);
		}
		else
		{
			return toHtmlPre(xmlPlan);
		}
	}

	/**
	 * to a simple form of every "operator" will become a &lt;UL&gt;
	 * 
	 * @param xmlPlan
	 * @return
	 * @throws Exception
	 */
	public String toHtmlSimpleUl(String xmlPlan)
	throws Exception
	{
		// The URL of the JAR or CLASS location.
		String xsltFile = "qp_simple_ul.xslt";

//		InputStream xsltIs = SqlServerShowPlanXmlTransformer.class.getResourceAsStream(xsltFile);
//		if (xsltIs == null)
//			throw new FileNotFoundException("File '" + xsltFile + "' in class '" + this.getClass().getName() + "' at classpath could not be located.");
//		return transformUsingXslt(xsltIs, xmlPlan);

		URL xsltUrl = SqlServerShowPlanXmlTransformer.class.getResource(xsltFile);
//		URL xsltUrl = new URL("file:///C:/projects/DbxTune/src/com/dbxtune/sql/showplan/transform/qp_simple_ul.xslt");
//System.out.println("########################### REMOVE: The hardcoded file reference to: " + xsltUrl);
		if (xsltUrl == null)
			throw new FileNotFoundException("File '" + xsltFile + "' in class '" + this.getClass().getName() + "' at classpath could not be located.");

		return transformUsingXslt(xsltUrl, xmlPlan);
	}

	/**
	 * The XML as a &lt;PRE&gt; escapedXml &lt;/PRE&gt;
	 * 
	 * @param xmlPlan
	 * @return
	 */
	public String toHtmlPre(String xmlPlan)
	{
		return "<pre>" + StringEscapeUtils.escapeHtml4(xmlPlan) + "</pre>";
	}
	

	private String transformUsingXslt(URL xslt, String xmlPlan) 
	throws TransformerConfigurationException, TransformerException, IOException
	{
		return transformUsingXslt(xslt.openStream(), xmlPlan);
	}
	private String transformUsingXslt(InputStream xslt, String xmlPlan) 
	throws TransformerConfigurationException, TransformerException
	{
		TransformerFactory factory = TransformerFactory.newInstance();

		StreamSource xslStream = new StreamSource(xslt);

		StringWriter outStringWriter = new StringWriter();

		StreamSource in  = new StreamSource(new StringReader(xmlPlan));
		StreamResult out = new StreamResult(outStringWriter);

		Transformer transformer = factory.newTransformer(xslStream);
		transformer.transform(in, out);

		return outStringWriter.toString();
	}

	public static void main(String[] args)
	{
		// Set Log4j Log Level
//		Configurator.setRootLevel(Level.TRACE);

		try
		{
			// Note: A lot constant string didn't work.... watch out for "to long static strings" 
			StringBuilder xmlPlan = new StringBuilder();
			xmlPlan.append("<ShowPlanXML xmlns=\"http://schemas.microsoft.com/sqlserver/2004/07/showplan\" Version=\"1.481\" Build=\"14.0.3356.20\"><BatchSequence><Batch><Statements><StmtSimple StatementText=\"select o.*&#xa;from sysobjects o&#xa;INNER JOIN syscolumns c ON o.id = c.id&#xa;INNER JOIN dbo.systypes t ON c.type = t.type&#xa;INNER JOIN sysindexes i ON o.id = i.id\" StatementId=\"1\" StatementCompId=\"1\" StatementType=\"SELECT\" RetrievedFromCache=\"true\" StatementSubTreeCost=\"0.0825776\" StatementEstRows=\"1\" SecurityPolicyApplied=\"false\" StatementOptmLevel=\"FULL\" QueryHash=\"0x6691E1B4CD80CA1C\" QueryPlanHash=\"0x61555AC6949DC7FC\" StatementOptmEarlyAbortReason=\"GoodEnoughPlanFound\" CardinalityEstimationModelVersion=\"140\"><StatementSetOptions QUOTED_IDENTIFIER=\"true\" ARITHABORT=\"false\" CONCAT_NULL_YIELDS_NULL=\"true\" ANSI_NULLS=\"true\" ANSI_PADDING=\"true\" ANSI_WARNINGS=\"true\" NUMERIC_ROUNDABORT=\"false\">"); 
			xmlPlan.append("</StatementSetOptions><QueryPlan DegreeOfParallelism=\"0\" MemoryGrant=\"1056\" NonParallelPlanReason=\"CouldNotGenerateValidParallelPlan\" CachedPlanSize=\"176\" CompileTime=\"23\" CompileCPU=\"23\" CompileMemory=\"4176\"><MemoryGrantInfo SerialRequiredMemory=\"1024\" SerialDesiredMemory=\"1056\" RequiredMemory=\"1024\" DesiredMemory=\"1056\" RequestedMemory=\"1056\" GrantWaitTime=\"0\" GrantedMemory=\"1056\" MaxUsedMemory=\"384\" MaxQueryMemory=\"1072040\"></MemoryGrantInfo><OptimizerHardwareDependentProperties EstimatedAvailableMemoryGrant=\"326297\" EstimatedPagesCached=\"81574\" EstimatedAvailableDegreeOfParallelism=\"2\" MaxCompileMemory=\"2973912\"></OptimizerHardwareDependentProperties>");
			xmlPlan.append("<OptimizerStatsUsage><StatisticsInfo LastUpdate=\"2020-08-21T01:02:59.98\" ModificationCount=\"869\" SamplingPercent=\"100\" Statistics=\"[nc]\" Table=\"[syscolpars]\" Schema=\"[sys]\" Database=\"[mssqlsystemresource]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2017-03-11T23:32:37.58\" ModificationCount=\"83\" SamplingPercent=\"100\" Statistics=\"[nc]\" Table=\"[syscolpars]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2009-04-13T12:59:16.81\" ModificationCount=\"345\" SamplingPercent=\"100\" Statistics=\"[clst]\" Table=\"[sysidxstats]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2017-12-19T21:04:46.05\" ModificationCount=\"26\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_0000000C_00000022]\" Table=\"[sysschobjs]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2017-03-11T23:34:22.14\" ModificationCount=\"83\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000005_00000029]\" Table=\"[syscolpars]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2017-03-12T23:21:59.47\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000004_00000032]\" Table=\"[sysscalartypes]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2017-02-13T18:51:30.03\" ModificationCount=\"67\" SamplingPercent=\"100\" Statistics=\"[nc1]\" Table=\"[sysschobjs]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2017-02-13T18:51:30.04\" ModificationCount=\"67\" SamplingPercent=\"100\" Statistics=\"[nc2]\" Table=\"[sysschobjs]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2009-04-13T12:59:16.81\" ModificationCount=\"345\" SamplingPercent=\"100\" Statistics=\"[nc]\" Table=\"[sysidxstats]\" Schema=\"[sys]\" Database=\"[master]\">"); 
			xmlPlan.append("</StatisticsInfo><StatisticsInfo LastUpdate=\"2020-10-17T11:45:20.04\" ModificationCount=\"0\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000005_00000029_readonly_database_statistics]\" Table=\"[syscolpars]\" Schema=\"[sys]\" Database=\"[mssqlsystemresource]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2017-03-11T23:34:22.17\" ModificationCount=\"85\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_0000000B_00000029]\" Table=\"[syscolpars]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2017-03-11T23:34:22.26\" ModificationCount=\"55\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000004_00000036]\" Table=\"[sysidxstats]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2017-03-11T23:34:22.25\" ModificationCount=\"56\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000002_00000036]\" Table=\"[sysidxstats]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2020-08-21T01:03:00.09\" ModificationCount=\"2057\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_0000000B_00000029]\" Table=\"[syscolpars]\" Schema=\"[sys]\" Database=\"[mssqlsystemresource]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2017-02-13T18:51:26.66\" ModificationCount=\"67\" SamplingPercent=\"100\" Statistics=\"[clst]\" Table=\"[sysschobjs]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2009-04-13T12:59:16.84\" ModificationCount=\"7\" SamplingPercent=\"100\" Statistics=\"[nc1]\" Table=\"[sysscalartypes]\" Schema=\"[sys]\" Database=\"[master]\">" );
			xmlPlan.append("</StatisticsInfo><StatisticsInfo LastUpdate=\"2009-04-13T12:59:16.84\" ModificationCount=\"7\" SamplingPercent=\"100\" Statistics=\"[nc2]\" Table=\"[sysscalartypes]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2009-04-13T12:59:16.84\" ModificationCount=\"7\" SamplingPercent=\"100\" Statistics=\"[clst]\" Table=\"[sysscalartypes]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2017-03-11T23:32:37.58\" ModificationCount=\"83\" SamplingPercent=\"100\" Statistics=\"[clst]\" Table=\"[syscolpars]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2017-02-13T18:51:30.04\" ModificationCount=\"67\" SamplingPercent=\"100\" Statistics=\"[nc3]\" Table=\"[sysschobjs]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2020-08-21T01:03:00.07\" ModificationCount=\"869\" SamplingPercent=\"100\" Statistics=\"[clst]\" Table=\"[syscolpars]\" Schema=\"[sys]\" Database=\"[mssqlsystemresource]\"></StatisticsInfo><StatisticsInfo LastUpdate=\"2017-02-13T18:51:41.08\" ModificationCount=\"67\" SamplingPercent=\"100\" Statistics=\"[_WA_Sys_00000008_00000022]\" Table=\"[sysschobjs]\" Schema=\"[sys]\" Database=\"[master]\"></StatisticsInfo></OptimizerStatsUsage><TraceFlags IsCompileTime=\"1\"><TraceFlag Value=\"835\" Scope=\"Global\"></TraceFlag><TraceFlag Value=\"3105\" Scope=\"Global\"></TraceFlag><TraceFlag Value=\"5504\" Scope=\"Global\"></TraceFlag><TraceFlag Value=\"5521\" Scope=\"Global\"></TraceFlag><TraceFlag Value=\"6529\" Scope=\"Global\"></TraceFlag><TraceFlag Value=\"7412\" Scope=\"Global\"></TraceFlag><TraceFlag Value=\"8020\" Scope=\"Global\"></TraceFlag><TraceFlag Value=\"8415\" Scope=\"Global\"></TraceFlag></TraceFlags><TraceFlags IsCompileTime=\"0\">"); 
			xmlPlan.append("<TraceFlag Value=\"835\" Scope=\"Global\"></TraceFlag><TraceFlag Value=\"3105\" Scope=\"Global\"></TraceFlag><TraceFlag Value=\"5504\" Scope=\"Global\"></TraceFlag><TraceFlag Value=\"5521\" Scope=\"Global\"></TraceFlag><TraceFlag Value=\"6529\" Scope=\"Global\"></TraceFlag><TraceFlag Value=\"7412\" Scope=\"Global\"></TraceFlag><TraceFlag Value=\"8020\" Scope=\"Global\"></TraceFlag><TraceFlag Value=\"8415\" Scope=\"Global\"></TraceFlag></TraceFlags><QueryTimeStats ElapsedTime=\"132\" CpuTime=\"132\"></QueryTimeStats><RelOp NodeId=\"0\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"1e-007\" AvgRowSize=\"219\" EstimatedTotalSubtreeCost=\"0.0825776\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"id\">"); 
			xmlPlan.append("</ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"name\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"pid\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"created\"></ColumnReference><ColumnReference Column=\"Expr1002\"></ColumnReference><ColumnReference Column=\"Expr1003\"></ColumnReference><ColumnReference Column=\"Expr1004\"></ColumnReference><ColumnReference Column=\"Expr1005\"></ColumnReference><ColumnReference Column=\"Expr1006\"></ColumnReference><ColumnReference Column=\"Expr1007\"></ColumnReference><ColumnReference Column=\"Expr1008\"></ColumnReference><ColumnReference Column=\"Expr1009\"></ColumnReference><ColumnReference Column=\"Expr1010\"></ColumnReference><ColumnReference Column=\"Expr1011\"></ColumnReference><ColumnReference Column=\"Expr1012\"></ColumnReference><ColumnReference Column=\"Expr1013\"></ColumnReference><ColumnReference Column=\"Expr1014\"></ColumnReference><ColumnReference Column=\"Expr1015\"></ColumnReference><ColumnReference Column=\"Expr1016\"></ColumnReference><ColumnReference Column=\"Expr1017\"></ColumnReference><ColumnReference Column=\"Expr1018\"></ColumnReference><ColumnReference Column=\"Expr1019\"></ColumnReference><ColumnReference Column=\"Expr1020\"></ColumnReference><ColumnReference Column=\"Expr1021\"></ColumnReference></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1004\"></ColumnReference><ScalarOperator ScalarString=\"(0)\"><Const ConstValue=\"(0)\"></Const></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1005\"></ColumnReference><ScalarOperator ScalarString=\"(0)\"><Const ConstValue=\"(0)\"></Const></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1006\"></ColumnReference><ScalarOperator ScalarString=\"(0)\"><Const ConstValue=\"(0)\"></Const></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1007\"></ColumnReference><ScalarOperator ScalarString=\"(0)\"><Const ConstValue=\"(0)\"></Const></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1009\"></ColumnReference><ScalarOperator ScalarString=\"(0)\"><Const ConstValue=\"(0)\"></Const></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1010\"></ColumnReference><ScalarOperator ScalarString=\"(0)\"><Const ConstValue=\"(0)\"></Const></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1014\"></ColumnReference><ScalarOperator ScalarString=\"(0)\"><Const ConstValue=\"(0)\"></Const></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1015\"></ColumnReference><ScalarOperator ScalarString=\"(0)\"><Const ConstValue=\"(0)\"></Const></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1019\"></ColumnReference><ScalarOperator ScalarString=\"(0)\"><Const ConstValue=\"(0)\"></Const></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1021\"></ColumnReference><ScalarOperator ScalarString=\"(0)\"><Const ConstValue=\"(0)\"></Const></ScalarOperator></DefinedValue>"); 
			xmlPlan.append("</DefinedValues><RelOp NodeId=\"1\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"1.01781e-007\" AvgRowSize=\"184\" EstimatedTotalSubtreeCost=\"0.0825775\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"id\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"name\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"pid\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"created\"></ColumnReference><ColumnReference Column=\"Expr1002\"></ColumnReference><ColumnReference Column=\"Expr1003\"></ColumnReference><ColumnReference Column=\"Expr1008\"></ColumnReference><ColumnReference Column=\"Expr1011\"></ColumnReference><ColumnReference Column=\"Expr1012\"></ColumnReference><ColumnReference Column=\"Expr1013\"></ColumnReference><ColumnReference Column=\"Expr1016\"></ColumnReference><ColumnReference Column=\"Expr1017\"></ColumnReference><ColumnReference Column=\"Expr1018\"></ColumnReference><ColumnReference Column=\"Expr1020\"></ColumnReference></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1002\"></ColumnReference><ScalarOperator ScalarString=\"CONVERT(char(2),[master].[sys].[sysschobjs].[type],0)\"><Convert DataType=\"char\" Length=\"2\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1003\"></ColumnReference><ScalarOperator ScalarString=\"CONVERT(smallint,[master].[sys].[sysschobjs].[nsid],0)\"><Convert DataType=\"smallint\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"nsid\"></ColumnReference></Identifier></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1008\"></ColumnReference><ScalarOperator ScalarString=\"CONVERT(smallint,CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;U&apos; THEN objectproperty([master].[sys].[sysschobjs].[id],&apos;TableFulltextCatalogId&apos;) ELSE (0) END,0)\"><Convert DataType=\"smallint\" Style=\"0\" Implicit=\"0\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;U&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Intrinsic FunctionName=\"objectproperty\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"id\"></ColumnReference></Identifier></ScalarOperator>" );
			xmlPlan.append("<ScalarOperator><Const ConstValue=\"&apos;TableFulltextCatalogId&apos;\"></Const></ScalarOperator></Intrinsic></ScalarOperator></Then><Else><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1011\"></ColumnReference><ScalarOperator ScalarString=\"CONVERT(char(2),CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;UQ&apos; THEN &apos;K&apos; ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;PK&apos; THEN &apos;K&apos; ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;ET&apos; THEN &apos;U&apos; ELSE CONVERT(char(2),[master].[sys].[sysschobjs].[type],0) END END END,0)\"><Convert DataType=\"char\" Length=\"2\" Style=\"0\" Implicit=\"0\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;UQ&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"&apos;K&apos;\"></Const></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator>" );
			xmlPlan.append("<ScalarOperator><Const ConstValue=\"&apos;PK&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"&apos;K&apos;\"></Const></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;ET&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"&apos;U&apos;\"></Const></ScalarOperator></Then><Else><ScalarOperator><Convert DataType=\"char\" Length=\"2\" Style=\"0\" Implicit=\"0\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator></Convert></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1012\"></ColumnReference><ScalarOperator ScalarString=\"CONVERT(smallint,CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;S&apos; THEN (1) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;U&apos; THEN (1) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;ET&apos; THEN (1) ELSE (0) END END END,0)\"><Convert DataType=\"smallint\" Style=\"0\" Implicit=\"0\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\">"); 
			xmlPlan.append("<ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;S&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(1)\"></Const></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;U&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(1)\"></Const></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;ET&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(1)\"></Const></ScalarOperator></Then><Else><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1013\"></ColumnReference>" );
			xmlPlan.append("<ScalarOperator ScalarString=\"CONVERT(smallint,CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;S&apos; THEN (1) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;V&apos; THEN (2) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;U&apos; THEN (3) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;P&apos; THEN (4) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;RF&apos; THEN (4) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;X&apos; THEN (4) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;D&apos; THEN (6) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;R&apos; THEN (7) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;TR&apos; THEN (8) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;PK&apos; THEN (9) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;UQ&apos; THEN (9) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;C&apos; THEN (10) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;F&apos; THEN (11) ELSE (0) END END END END END END END END END END END END END,0)\"><Convert DataType=\"smallint\" Style=\"0\" Implicit=\"0\"><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;S&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(1)\"></Const>"); 
			xmlPlan.append("</ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;V&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(2)\"></Const></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;U&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(3)\"></Const></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;P&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(4)\"></Const></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\">"); 
			xmlPlan.append("</ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;RF&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(4)\"></Const></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;X&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(4)\"></Const></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;D&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(6)\"></Const></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;R&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(7)\"></Const></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator>"); 
			xmlPlan.append("<Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;TR&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(8)\"></Const></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;PK&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(9)\"></Const></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;UQ&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(9)\"></Const></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;C&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(10)\"></Const></ScalarOperator>"); 
			xmlPlan.append("</Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;F&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(11)\"></Const></ScalarOperator></Then><Else><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></Convert></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1016\"></ColumnReference><ScalarOperator ScalarString=\"CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;U&apos; THEN objectproperty([master].[sys].[sysschobjs].[id],&apos;TableDeleteTrigger&apos;) ELSE CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;TR&apos; THEN [master].[sys].[sysschobjs].[pid] ELSE (0) END END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;U&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Intrinsic FunctionName=\"objectproperty\">"); 
			xmlPlan.append("<ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"id\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;TableDeleteTrigger&apos;\"></Const></ScalarOperator></Intrinsic></ScalarOperator></Then><Else><ScalarOperator><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;TR&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"pid\"></ColumnReference></Identifier></ScalarOperator></Then><Else><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Else></IF></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1017\"></ColumnReference><ScalarOperator ScalarString=\"CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;U&apos; THEN objectproperty([master].[sys].[sysschobjs].[id],&apos;TableInsertTrigger&apos;) ELSE (0) END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;U&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Intrinsic FunctionName=\"objectproperty\"><ScalarOperator><Identifier>" );
			xmlPlan.append("<ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"id\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;TableInsertTrigger&apos;\"></Const></ScalarOperator></Intrinsic></ScalarOperator></Then><Else><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1018\"></ColumnReference><ScalarOperator ScalarString=\"CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;U&apos; THEN objectproperty([master].[sys].[sysschobjs].[id],&apos;TableUpdateTrigger&apos;) ELSE (0) END\"><IF><Condition><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;U&apos;\"></Const></ScalarOperator></Compare></ScalarOperator></Condition><Then><ScalarOperator><Intrinsic FunctionName=\"objectproperty\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"id\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;TableUpdateTrigger&apos;\"></Const></ScalarOperator></Intrinsic></ScalarOperator></Then><Else><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Else></IF></ScalarOperator></DefinedValue><DefinedValue><ColumnReference Column=\"Expr1020\"></ColumnReference>" );
			xmlPlan.append("<ScalarOperator ScalarString=\"CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;D&apos; AND [master].[sys].[sysschobjs].[pid]&lt;&gt;(0) THEN (2048) ELSE (0) END+CASE WHEN [master].[sys].[sysschobjs].[type]=&apos;P&apos; AND ([master].[sys].[sysschobjs].[status]&amp;(256))&lt;&gt;(0) THEN (16) ELSE (0) END+([master].[sys].[sysschobjs].[status]&amp;(1))*(2)+([master].[sys].[sysschobjs].[status]&amp;(16))*(2)\"><Arithmetic Operation=\"ADD\"><ScalarOperator><Arithmetic Operation=\"ADD\"><ScalarOperator><Arithmetic Operation=\"ADD\"><ScalarOperator><IF><Condition><ScalarOperator><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;D&apos;\"></Const></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"NE\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"pid\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Compare></ScalarOperator>" );
			xmlPlan.append("</Logical></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(2048)\"></Const></ScalarOperator></Then><Else><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Else></IF></ScalarOperator><ScalarOperator><IF><Condition><ScalarOperator><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"&apos;P&apos;\"></Const></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"NE\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"status\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(256)\"></Const></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Condition><Then><ScalarOperator><Const ConstValue=\"(16)\"></Const></ScalarOperator></Then><Else><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Else></IF></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Arithmetic Operation=\"MULT\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"status\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"></Const></ScalarOperator></Arithmetic></ScalarOperator>"); 
			xmlPlan.append("<ScalarOperator><Const ConstValue=\"(2)\"></Const></ScalarOperator></Arithmetic></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Arithmetic Operation=\"MULT\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"status\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(16)\"></Const></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(2)\"></Const></ScalarOperator></Arithmetic></ScalarOperator></Arithmetic></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"2\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Inner Join\" EstimateRows=\"1.01781\" EstimateIO=\"0\" EstimateCPU=\"4.18e-006\" AvgRowSize=\"165\" EstimatedTotalSubtreeCost=\"0.0825774\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"id\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"name\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"nsid\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"status\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"pid\"></ColumnReference>" );
			xmlPlan.append("<ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"created\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"5055\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"14\" ActualCPUms=\"14\" ActualEndOfScans=\"1\" ActualExecutions=\"1\"></RunTimeCountersPerThread></RunTimeInformation><NestedLoops Optimized=\"0\"><OuterReferences><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Alias=\"[obj]\" Column=\"id\"></ColumnReference></OuterReferences><RelOp NodeId=\"3\" PhysicalOp=\"Hash Match\" LogicalOp=\"Inner Join\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"0.0179873\" AvgRowSize=\"11\" EstimatedTotalSubtreeCost=\"0.0792886\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Alias=\"[obj]\" Column=\"id\"></ColumnReference></OutputList><MemoryFractions Input=\"1\" Output=\"1\"></MemoryFractions><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"5055\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"5\" ActualCPUms=\"5\" ActualScans=\"0\" ActualLogicalReads=\"0\" ActualPhysicalReads=\"0\" ActualReadAheads=\"0\" ActualLobLogicalReads=\"0\" ActualLobPhysicalReads=\"0\" ActualLobReadAheads=\"0\" ActualEndOfScans=\"1\" ActualExecutions=\"1\" InputMemoryGrant=\"1056\" OutputMemoryGrant=\"1056\" UsedMemoryGrant=\"384\"></RunTimeCountersPerThread></RunTimeInformation><Hash><DefinedValues></DefinedValues><HashKeysBuild><ColumnReference Column=\"Union1096\">"); 
			xmlPlan.append("</ColumnReference></HashKeysBuild><HashKeysProbe><ColumnReference Column=\"Expr1155\"></ColumnReference></HashKeysProbe><ProbeResidual><ScalarOperator ScalarString=\"[Union1096]=[Expr1155]\"><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Column=\"Union1096\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Identifier><ColumnReference Column=\"Expr1155\"></ColumnReference></Identifier></ScalarOperator></Compare></ScalarOperator></ProbeResidual><RelOp NodeId=\"4\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Inner Join\" EstimateRows=\"8.30873\" EstimateIO=\"0\" EstimateCPU=\"0.000735804\" AvgRowSize=\"12\" EstimatedTotalSubtreeCost=\"0.0579319\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Union1096\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Alias=\"[obj]\" Column=\"id\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"3042\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"3\" ActualCPUms=\"3\" ActualEndOfScans=\"1\" ActualExecutions=\"1\"></RunTimeCountersPerThread></RunTimeInformation><NestedLoops Optimized=\"0\"><OuterReferences><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Alias=\"[obj]\" Column=\"id\"></ColumnReference></OuterReferences><RelOp NodeId=\"6\" PhysicalOp=\"Nested Loops\" LogicalOp=\"Inner Join\" EstimateRows=\"2.91771\" EstimateIO=\"0\" EstimateCPU=\"0.000119827\" AvgRowSize=\"11\" EstimatedTotalSubtreeCost=\"0.0172343\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\">"); 
			xmlPlan.append("<OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Alias=\"[obj]\" Column=\"id\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"258\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"0\" ActualCPUms=\"0\" ActualEndOfScans=\"1\" ActualExecutions=\"1\"></RunTimeCountersPerThread></RunTimeInformation><NestedLoops Optimized=\"0\" WithUnorderedPrefetch=\"1\"><OuterReferences><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Alias=\"[i]\" Column=\"id\"></ColumnReference><ColumnReference Column=\"Expr1160\"></ColumnReference></OuterReferences><RelOp NodeId=\"8\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"28.6667\" EstimateIO=\"0\" EstimateCPU=\"0.00040764\" AvgRowSize=\"11\" EstimatedTotalSubtreeCost=\"0.00622146\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Alias=\"[i]\" Column=\"id\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"258\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"0\" ActualCPUms=\"0\" ActualEndOfScans=\"1\" ActualExecutions=\"1\"></RunTimeCountersPerThread></RunTimeInformation><Filter StartupExpression=\"0\"><RelOp NodeId=\"10\" PhysicalOp=\"Clustered Index Scan\" LogicalOp=\"Clustered Index Scan\" EstimateRows=\"28.6667\" EstimatedRowsRead=\"258\" EstimateIO=\"0.00534722\" EstimateCPU=\"0.0004408\" AvgRowSize=\"19\" EstimatedTotalSubtreeCost=\"0.00578802\" TableCardinality=\"258\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\">"); 
			xmlPlan.append("<OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Alias=\"[i]\" Column=\"id\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"258\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"0\" ActualCPUms=\"0\" ActualScans=\"1\" ActualLogicalReads=\"6\" ActualPhysicalReads=\"0\" ActualReadAheads=\"0\" ActualLobLogicalReads=\"0\" ActualLobPhysicalReads=\"0\" ActualLobReadAheads=\"0\" ActualRowsRead=\"258\" ActualEndOfScans=\"1\" ActualExecutions=\"1\"></RunTimeCountersPerThread></RunTimeInformation><IndexScan Ordered=\"0\" ForcedIndex=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Alias=\"[i]\" Column=\"id\"></ColumnReference></DefinedValue></DefinedValues><Object Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Index=\"[clst]\" Alias=\"[i]\" IndexKind=\"Clustered\" Storage=\"RowStore\"></Object><Predicate><ScalarOperator ScalarString=\"[master].[sys].[sysidxstats].[indid] as [i].[indid]&lt;(256000) AND ([master].[sys].[sysidxstats].[status] as [i].[status]&amp;(67108864))=(0)\"><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"LT\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Alias=\"[i]\" Column=\"indid\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(256000)\"></Const></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Alias=\"[i]\" Column=\"status\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(67108864)\"></Const></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Predicate></IndexScan></RelOp><Predicate><ScalarOperator ScalarString=\"has_access(&apos;CO&apos;,[master].[sys].[sysidxstats].[id] as [i].[id])=(1)\"><Compare CompareOp=\"EQ\"><ScalarOperator><Intrinsic FunctionName=\"has_access\"><ScalarOperator><Const ConstValue=\"&apos;CO&apos;\"></Const></ScalarOperator><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Alias=\"[i]\" Column=\"id\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"\"></Const></ScalarOperator><ScalarOperator><Const ConstValue=\"\"></Const></ScalarOperator>"); 
			xmlPlan.append("</Intrinsic></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"></Const></ScalarOperator></Compare></ScalarOperator></Predicate></Filter></RelOp><RelOp NodeId=\"11\" PhysicalOp=\"Clustered Index Seek\" LogicalOp=\"Clustered Index Seek\" EstimateRows=\"1\" EstimatedRowsRead=\"1\" EstimateIO=\"0.003125\" EstimateCPU=\"0.0001581\" AvgRowSize=\"15\" EstimatedTotalSubtreeCost=\"0.0108735\" TableCardinality=\"2458\" Parallel=\"0\" EstimateRebinds=\"26.1816\" EstimateRewinds=\"1.48505\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Alias=\"[obj]\" Column=\"id\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"258\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"0\" ActualCPUms=\"0\" ActualScans=\"0\" ActualLogicalReads=\"491\" ActualPhysicalReads=\"0\" ActualReadAheads=\"0\" ActualLobLogicalReads=\"0\" ActualLobPhysicalReads=\"0\" ActualLobReadAheads=\"0\" ActualRowsRead=\"258\" ActualEndOfScans=\"0\" ActualExecutions=\"258\"></RunTimeCountersPerThread></RunTimeInformation><IndexScan Ordered=\"1\" ScanDirection=\"FORWARD\" ForcedIndex=\"0\" ForceSeek=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Alias=\"[obj]\" Column=\"id\"></ColumnReference></DefinedValue></DefinedValues><Object Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Index=\"[clst]\" Alias=\"[obj]\" IndexKind=\"Clustered\" Storage=\"RowStore\"></Object><SeekPredicates><SeekPredicateNew><SeekKeys><Prefix ScanType=\"EQ\"><RangeColumns>"); 
			xmlPlan.append("<ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Alias=\"[obj]\" Column=\"id\"></ColumnReference></RangeColumns><RangeExpressions><ScalarOperator ScalarString=\"[master].[sys].[sysidxstats].[id] as [i].[id]\"><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysidxstats]\" Alias=\"[i]\" Column=\"id\"></ColumnReference></Identifier></ScalarOperator></RangeExpressions></Prefix></SeekKeys></SeekPredicateNew></SeekPredicates><Predicate><ScalarOperator ScalarString=\"([master].[sys].[sysschobjs].[status2] as [obj].[status2]&amp;(8))=(0)\"><Compare CompareOp=\"EQ\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Alias=\"[obj]\" Column=\"status2\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(8)\"></Const></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Compare></ScalarOperator></Predicate></IndexScan></RelOp></NestedLoops></RelOp><RelOp NodeId=\"12\" PhysicalOp=\"Concatenation\" LogicalOp=\"Concatenation\" EstimateRows=\"12.0663\" EstimateIO=\"0\" EstimateCPU=\"1.20663e-006\" AvgRowSize=\"9\" EstimatedTotalSubtreeCost=\"0.0399615\" Parallel=\"0\" EstimateRebinds=\"12.091\" EstimateRewinds=\"1.49756\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Union1096\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"3042\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"2\" ActualCPUms=\"2\" ActualEndOfScans=\"258\" ActualExecutions=\"258\"></RunTimeCountersPerThread></RunTimeInformation><Concat><DefinedValues><DefinedValue><ColumnReference Column=\"Union1096\"></ColumnReference><ColumnReference Column=\"Expr1037\"></ColumnReference><ColumnReference Column=\"Expr1063\"></ColumnReference></DefinedValue></DefinedValues><RelOp NodeId=\"13\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"10.7255\" EstimateIO=\"0\" EstimateCPU=\"1.07255e-006\" AvgRowSize=\"9\" EstimatedTotalSubtreeCost=\"0.0191248\" Parallel=\"0\" EstimateRebinds=\"12.091\" EstimateRewinds=\"1.49756\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Expr1037\"></ColumnReference></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1037\"></ColumnReference><ScalarOperator ScalarString=\"xtypetotds([master].[sys].[syscolpars].[xtype] as [c].[xtype],CONVERT_IMPLICIT(tinyint,(1)-([master].[sys].[syscolpars].[status] as [c].[status]&amp;(1)),0))\"><Intrinsic FunctionName=\"xtypetotds\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Alias=\"[c]\" Column=\"xtype\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Convert DataType=\"tinyint\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Arithmetic Operation=\"SUB\"><ScalarOperator><Const ConstValue=\"(1)\"></Const></ScalarOperator><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Alias=\"[c]\" Column=\"status\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"></Const></ScalarOperator></Arithmetic></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator></Intrinsic></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"14\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"10.7255\" EstimateIO=\"0\" EstimateCPU=\"9.43843e-006\" AvgRowSize=\"12\" EstimatedTotalSubtreeCost=\"0.0191091\" Parallel=\"0\" EstimateRebinds=\"12.091\" EstimateRewinds=\"1.49756\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Alias=\"[c]\" Column=\"xtype\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Alias=\"[c]\" Column=\"status\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"3042\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"1\" ActualCPUms=\"1\" ActualEndOfScans=\"258\" ActualExecutions=\"258\"></RunTimeCountersPerThread></RunTimeInformation><Filter StartupExpression=\"0\"><RelOp NodeId=\"15\" PhysicalOp=\"Clustered Index Seek\" LogicalOp=\"Clustered Index Seek\" EstimateRows=\"10.7255\" EstimatedRowsRead=\"10.7255\" EstimateIO=\"0.003125\" EstimateCPU=\"0.000168798\" AvgRowSize=\"16\" EstimatedTotalSubtreeCost=\"0.0189714\" TableCardinality=\"1094\" Parallel=\"0\" EstimateRebinds=\"12.091\" EstimateRewinds=\"1.49756\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Alias=\"[c]\" Column=\"id\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Alias=\"[c]\" Column=\"xtype\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Alias=\"[c]\" Column=\"status\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"3042\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"1\" ActualCPUms=\"1\" ActualScans=\"258\" ActualLogicalReads=\"626\" ActualPhysicalReads=\"0\" ActualReadAheads=\"0\" ActualLobLogicalReads=\"0\" ActualLobPhysicalReads=\"0\" ActualLobReadAheads=\"0\" ActualRowsRead=\"3042\" ActualEndOfScans=\"258\" ActualExecutions=\"258\"></RunTimeCountersPerThread></RunTimeInformation><IndexScan Ordered=\"1\" ScanDirection=\"FORWARD\" ForcedIndex=\"0\" ForceSeek=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Alias=\"[c]\" Column=\"id\"></ColumnReference></DefinedValue><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Alias=\"[c]\" Column=\"xtype\"></ColumnReference></DefinedValue><DefinedValue>"); 
			xmlPlan.append("<ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Alias=\"[c]\" Column=\"status\"></ColumnReference></DefinedValue></DefinedValues><Object Database=\"[master]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Index=\"[clst]\" Alias=\"[c]\" IndexKind=\"Clustered\" Storage=\"RowStore\"></Object><SeekPredicates><SeekPredicateNew><SeekKeys><Prefix ScanType=\"EQ\"><RangeColumns><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Alias=\"[c]\" Column=\"id\"></ColumnReference></RangeColumns><RangeExpressions><ScalarOperator ScalarString=\"[master].[sys].[sysschobjs].[id] as [obj].[id]\"><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Alias=\"[obj]\" Column=\"id\"></ColumnReference></Identifier></ScalarOperator></RangeExpressions></Prefix></SeekKeys></SeekPredicateNew></SeekPredicates></IndexScan></RelOp><Predicate><ScalarOperator ScalarString=\"has_access(&apos;CO&apos;,[master].[sys].[syscolpars].[id] as [c].[id])=(1)\"><Compare CompareOp=\"EQ\"><ScalarOperator><Intrinsic FunctionName=\"has_access\"><ScalarOperator><Const ConstValue=\"&apos;CO&apos;\"></Const></ScalarOperator><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Alias=\"[c]\" Column=\"id\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"\"></Const></ScalarOperator><ScalarOperator><Const ConstValue=\"\"></Const></ScalarOperator></Intrinsic></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"></Const></ScalarOperator></Compare></ScalarOperator></Predicate></Filter></RelOp></ComputeScalar></RelOp>"); 
			xmlPlan.append("<RelOp NodeId=\"16\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"1.3408\" EstimateIO=\"0\" EstimateCPU=\"2.35896e-007\" AvgRowSize=\"9\" EstimatedTotalSubtreeCost=\"0.0208192\" Parallel=\"0\" EstimateRebinds=\"12.091\" EstimateRewinds=\"1.49756\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Column=\"Expr1063\"></ColumnReference></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1063\"></ColumnReference><ScalarOperator ScalarString=\"xtypetotds([mssqlsystemresource].[sys].[syscolpars].[xtype],CONVERT_IMPLICIT(tinyint,(1)-([mssqlsystemresource].[sys].[syscolpars].[status]&amp;(1)),0))\"><Intrinsic FunctionName=\"xtypetotds\"><ScalarOperator><Identifier><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Column=\"xtype\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Convert DataType=\"tinyint\" Style=\"0\" Implicit=\"1\"><ScalarOperator><Arithmetic Operation=\"SUB\"><ScalarOperator><Const ConstValue=\"(1)\"></Const></ScalarOperator><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Column=\"status\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"></Const></ScalarOperator></Arithmetic></ScalarOperator></Arithmetic></ScalarOperator></Convert></ScalarOperator></Intrinsic></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"17\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"2.35896\" EstimateIO=\"0\" EstimateCPU=\"1.6613e-005\" AvgRowSize=\"12\" EstimatedTotalSubtreeCost=\"0.0208157\" Parallel=\"0\" EstimateRebinds=\"12.091\" EstimateRewinds=\"1.49756\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Column=\"xtype\"></ColumnReference><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Column=\"status\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"0\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"0\" ActualCPUms=\"0\" ActualEndOfScans=\"258\" ActualExecutions=\"258\"></RunTimeCountersPerThread></RunTimeInformation><Filter StartupExpression=\"0\"><RelOp NodeId=\"18\" PhysicalOp=\"Clustered Index Seek\" LogicalOp=\"Clustered Index Seek\" EstimateRows=\"2.35896\" EstimatedRowsRead=\"7.62065\" EstimateIO=\"0.003125\" EstimateCPU=\"0.000165383\" AvgRowSize=\"16\" EstimatedTotalSubtreeCost=\"0.0205734\" TableCardinality=\"24508\" Parallel=\"0\" EstimateRebinds=\"12.091\" EstimateRewinds=\"1.49756\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Column=\"id\"></ColumnReference><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Column=\"xtype\"></ColumnReference><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Column=\"status\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"0\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"0\" ActualCPUms=\"0\" ActualScans=\"258\" ActualLogicalReads=\"874\" ActualPhysicalReads=\"0\" ActualReadAheads=\"0\" ActualLobLogicalReads=\"0\" ActualLobPhysicalReads=\"0\" ActualLobReadAheads=\"0\" ActualRowsRead=\"2399\" ActualEndOfScans=\"258\" ActualExecutions=\"258\"></RunTimeCountersPerThread></RunTimeInformation><IndexScan Ordered=\"1\" ScanDirection=\"FORWARD\" ForcedIndex=\"0\" ForceSeek=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Column=\"id\"></ColumnReference></DefinedValue><DefinedValue><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Column=\"xtype\"></ColumnReference></DefinedValue><DefinedValue><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Column=\"status\"></ColumnReference></DefinedValue></DefinedValues><Object Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Index=\"[clst]\" IndexKind=\"Clustered\" Storage=\"RowStore\"></Object><SeekPredicates><SeekPredicateNew><SeekKeys><Prefix ScanType=\"EQ\"><RangeColumns><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Column=\"id\"></ColumnReference></RangeColumns><RangeExpressions><ScalarOperator ScalarString=\"[master].[sys].[sysschobjs].[id] as [obj].[id]\"><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Alias=\"[obj]\" Column=\"id\"></ColumnReference></Identifier></ScalarOperator></RangeExpressions></Prefix></SeekKeys></SeekPredicateNew></SeekPredicates><Predicate><ScalarOperator ScalarString=\"([mssqlsystemresource].[sys].[syscolpars].[status]&amp;(4096))=(4096) AND (serverproperty(&apos;EngineEdition&apos;)&lt;&gt;5 OR ([mssqlsystemresource].[sys].[syscolpars].[status]&amp;(134217728))&lt;&gt;(0))\"><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Column=\"status\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(4096)\"></Const></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(4096)\"></Const></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Logical Operation=\"OR\"><ScalarOperator><Identifier><ColumnReference Column=\"ConstExpr1154\"><ScalarOperator><Compare CompareOp=\"NE\"><ScalarOperator><Intrinsic FunctionName=\"serverproperty\"><ScalarOperator><Const ConstValue=\"&apos;EngineEdition&apos;\"></Const></ScalarOperator></Intrinsic></ScalarOperator><ScalarOperator><Const ConstValue=\"5\"></Const></ScalarOperator></Compare>"); 
			xmlPlan.append("</ScalarOperator></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Compare CompareOp=\"NE\"><ScalarOperator><Arithmetic Operation=\"BIT_AND\"><ScalarOperator><Identifier><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Column=\"status\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(134217728)\"></Const></ScalarOperator></Arithmetic></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Logical></ScalarOperator></Predicate></IndexScan></RelOp><Predicate><ScalarOperator ScalarString=\"has_access(&apos;RO&apos;,[mssqlsystemresource].[sys].[syscolpars].[id])=(1)\"><Compare CompareOp=\"EQ\"><ScalarOperator><Intrinsic FunctionName=\"has_access\"><ScalarOperator><Const ConstValue=\"&apos;RO&apos;\"></Const></ScalarOperator><ScalarOperator><Identifier><ColumnReference Database=\"[mssqlsystemresource]\" Schema=\"[sys]\" Table=\"[syscolpars]\" Column=\"id\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"\"></Const></ScalarOperator><ScalarOperator><Const ConstValue=\"\"></Const></ScalarOperator></Intrinsic></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"></Const></ScalarOperator></Compare></ScalarOperator></Predicate></Filter></RelOp></ComputeScalar></RelOp></Concat></RelOp></NestedLoops></RelOp><RelOp NodeId=\"19\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"34\" EstimateIO=\"0\" EstimateCPU=\"4.352e-005\" AvgRowSize=\"9\" EstimatedTotalSubtreeCost=\"0.00336632\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList>" );
			xmlPlan.append("<ColumnReference Column=\"Expr1155\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"34\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"0\" ActualCPUms=\"0\" ActualEndOfScans=\"1\" ActualExecutions=\"1\"></RunTimeCountersPerThread></RunTimeInformation><Filter StartupExpression=\"0\"><RelOp NodeId=\"20\" PhysicalOp=\"Compute Scalar\" LogicalOp=\"Compute Scalar\" EstimateRows=\"34\" EstimateIO=\"0\" EstimateCPU=\"3.4e-006\" AvgRowSize=\"12\" EstimatedTotalSubtreeCost=\"0.0033228\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysscalartypes]\" Alias=\"[t]\" Column=\"id\"></ColumnReference><ColumnReference Column=\"Expr1155\"></ColumnReference></OutputList><ComputeScalar><DefinedValues><DefinedValue><ColumnReference Column=\"Expr1155\"></ColumnReference><ScalarOperator ScalarString=\"xtypetotds([master].[sys].[sysscalartypes].[xtype] as [t].[xtype],(0))\"><Intrinsic FunctionName=\"xtypetotds\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysscalartypes]\" Alias=\"[t]\" Column=\"xtype\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Intrinsic></ScalarOperator></DefinedValue></DefinedValues><RelOp NodeId=\"21\" PhysicalOp=\"Clustered Index Scan\" LogicalOp=\"Clustered Index Scan\" EstimateRows=\"34\" EstimatedRowsRead=\"34\" EstimateIO=\"0.003125\" EstimateCPU=\"0.0001944\" AvgRowSize=\"12\" EstimatedTotalSubtreeCost=\"0.0033194\" TableCardinality=\"34\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysscalartypes]\" Alias=\"[t]\" Column=\"id\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysscalartypes]\" Alias=\"[t]\" Column=\"xtype\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"34\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"0\" ActualCPUms=\"0\" ActualScans=\"1\" ActualLogicalReads=\"2\" ActualPhysicalReads=\"0\" ActualReadAheads=\"0\" ActualLobLogicalReads=\"0\" ActualLobPhysicalReads=\"0\" ActualLobReadAheads=\"0\" ActualRowsRead=\"34\" ActualEndOfScans=\"1\" ActualExecutions=\"1\"></RunTimeCountersPerThread></RunTimeInformation><IndexScan Ordered=\"0\" ForcedIndex=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysscalartypes]\" Alias=\"[t]\" Column=\"id\"></ColumnReference></DefinedValue><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysscalartypes]\" Alias=\"[t]\" Column=\"xtype\"></ColumnReference></DefinedValue></DefinedValues><Object Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysscalartypes]\" Index=\"[clst]\" Alias=\"[t]\" IndexKind=\"Clustered\" Storage=\"RowStore\"></Object></IndexScan></RelOp></ComputeScalar></RelOp><Predicate><ScalarOperator ScalarString=\"[master].[sys].[sysscalartypes].[id] as [t].[id]&lt;=(256) OR has_access(&apos;UT&apos;,[master].[sys].[sysscalartypes].[id] as [t].[id])=(1)\"><Logical Operation=\"OR\"><ScalarOperator><Compare CompareOp=\"LE\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysscalartypes]\" Alias=\"[t]\" Column=\"id\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(256)\"></Const></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Intrinsic FunctionName=\"has_access\"><ScalarOperator><Const ConstValue=\"&apos;UT&apos;\"></Const></ScalarOperator><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysscalartypes]\" Alias=\"[t]\" Column=\"id\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"\"></Const></ScalarOperator><ScalarOperator><Const ConstValue=\"\"></Const></ScalarOperator></Intrinsic></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"></Const></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Predicate></Filter></RelOp></Hash></RelOp><RelOp NodeId=\"22\" PhysicalOp=\"Filter\" LogicalOp=\"Filter\" EstimateRows=\"1\" EstimateIO=\"0\" EstimateCPU=\"1.58e-006\" AvgRowSize=\"165\" EstimatedTotalSubtreeCost=\"0.00328468\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\"><OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"id\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"name\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"nsid\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"status\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"pid\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"created\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"5055\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"6\" ActualCPUms=\"6\" ActualEndOfScans=\"0\" ActualExecutions=\"5055\"></RunTimeCountersPerThread></RunTimeInformation><Filter StartupExpression=\"0\"><RelOp NodeId=\"23\" PhysicalOp=\"Clustered Index Seek\" LogicalOp=\"Clustered Index Seek\" EstimateRows=\"1\" EstimatedRowsRead=\"1\" EstimateIO=\"0.003125\" EstimateCPU=\"0.0001581\" AvgRowSize=\"168\" EstimatedTotalSubtreeCost=\"0.0032831\" TableCardinality=\"2458\" Parallel=\"0\" EstimateRebinds=\"0\" EstimateRewinds=\"0\" EstimatedExecutionMode=\"Row\">"); 
			xmlPlan.append("<OutputList><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"id\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"name\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"nsid\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"status\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"pid\"></ColumnReference><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"created\"></ColumnReference></OutputList><RunTimeInformation><RunTimeCountersPerThread Thread=\"0\" ActualRows=\"5055\" Batches=\"0\" ActualExecutionMode=\"Row\" ActualElapsedms=\"5\" ActualCPUms=\"5\" ActualScans=\"0\" ActualLogicalReads=\"10110\" ActualPhysicalReads=\"0\" ActualReadAheads=\"0\" ActualLobLogicalReads=\"0\" ActualLobPhysicalReads=\"0\" ActualLobReadAheads=\"0\" ActualRowsRead=\"5055\" ActualEndOfScans=\"0\" ActualExecutions=\"5055\"></RunTimeCountersPerThread></RunTimeInformation><IndexScan Ordered=\"1\" ScanDirection=\"FORWARD\" ForcedIndex=\"0\" ForceSeek=\"0\" ForceScan=\"0\" NoExpandHint=\"0\" Storage=\"RowStore\"><DefinedValues><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"id\"></ColumnReference></DefinedValue><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"name\"></ColumnReference></DefinedValue>" );
			xmlPlan.append("<DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"nsid\"></ColumnReference></DefinedValue><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"status\"></ColumnReference></DefinedValue><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"type\"></ColumnReference></DefinedValue><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"pid\"></ColumnReference></DefinedValue><DefinedValue><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"created\"></ColumnReference></DefinedValue></DefinedValues><Object Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Index=\"[clst]\" IndexKind=\"Clustered\" Storage=\"RowStore\"></Object><SeekPredicates><SeekPredicateNew><SeekKeys><Prefix ScanType=\"EQ\"><RangeColumns><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"id\"></ColumnReference></RangeColumns><RangeExpressions><ScalarOperator ScalarString=\"[master].[sys].[sysschobjs].[id] as [obj].[id]\"><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Alias=\"[obj]\" Column=\"id\"></ColumnReference></Identifier></ScalarOperator></RangeExpressions></Prefix></SeekKeys></SeekPredicateNew></SeekPredicates><Predicate><ScalarOperator ScalarString=\"[master].[sys].[sysschobjs].[nsclass]=(0) AND [master].[sys].[sysschobjs].[pclass]=(1)\"><Logical Operation=\"AND\"><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"nsclass\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(0)\"></Const></ScalarOperator></Compare></ScalarOperator><ScalarOperator><Compare CompareOp=\"EQ\"><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"pclass\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"></Const></ScalarOperator></Compare></ScalarOperator></Logical></ScalarOperator></Predicate></IndexScan></RelOp><Predicate><ScalarOperator ScalarString=\"has_access(&apos;MO&apos;,[master].[sys].[sysschobjs].[id])=(1)\"><Compare CompareOp=\"EQ\"><ScalarOperator><Intrinsic FunctionName=\"has_access\"><ScalarOperator><Const ConstValue=\"&apos;MO&apos;\"></Const></ScalarOperator><ScalarOperator><Identifier><ColumnReference Database=\"[master]\" Schema=\"[sys]\" Table=\"[sysschobjs]\" Column=\"id\"></ColumnReference></Identifier></ScalarOperator><ScalarOperator><Const ConstValue=\"\"></Const></ScalarOperator><ScalarOperator><Const ConstValue=\"\"></Const></ScalarOperator></Intrinsic></ScalarOperator><ScalarOperator><Const ConstValue=\"(1)\"></Const></ScalarOperator></Compare></ScalarOperator></Predicate></Filter></RelOp></NestedLoops></RelOp></ComputeScalar></RelOp></ComputeScalar></RelOp></QueryPlan></StmtSimple></Statements></Batch></BatchSequence></ShowPlanXML>");
//			String xmlPlan = FileUtils.readFileToString(new File("C:/tmp/xslt/xxx.xml"), StandardCharsets.UTF_8.name());

//			System.out.println("---------:");
//			System.out.println("XXXXXXXXX:" + mlPlan.toString() );
//			System.out.println("---------:");
			
			SqlServerShowPlanXmlTransformer t = new SqlServerShowPlanXmlTransformer();
			System.out.println("HTML: " + t.toHtml(xmlPlan.toString()));
		}
		catch (Exception e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

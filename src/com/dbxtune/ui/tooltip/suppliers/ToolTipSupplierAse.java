/*******************************************************************************
 * Copyright (C) 2010-2025 Goran Schwarz
 * 
 * This file is part of DbxTune
 * DbxTune is a family of sub-products *Tune, hence the Dbx
 * Here are some of the tools: AseTune, IqTune, RsTune, RaxTune, HanaTune, 
 *          SqlServerTune, PostgresTune, MySqlTune, MariaDbTune, Db2Tune, ...
 * 
 * DbxTune is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 * 
 * DbxTune is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DbxTune.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package com.dbxtune.ui.tooltip.suppliers;

import java.awt.Window;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.fife.ui.rtextarea.RTextArea;

import com.dbxtune.ui.autocomplete.CompletionProviderAbstract;
import com.dbxtune.utils.AseConnectionUtils;
import com.dbxtune.utils.ConnectionProvider;
import com.dbxtune.utils.StringUtil;


public class ToolTipSupplierAse
extends ToolTipSupplierAbstractSql
{
	public ToolTipSupplierAse(Window owner, CompletionProviderAbstract compleationProvider, ConnectionProvider connectionProvider)
	{
		super(owner, compleationProvider, connectionProvider);
	}

	@Override
	public String getName() 
	{
		return "ASE";
	}

	@Override
	public String getToolTipProviderFile() 
	{
//		String aseTuneHome  = System.getenv("APPL_HOME");;
//		String resourceFile = "/resources/ASE_tooltip_provider.xml";
//		return aseTuneHome + resourceFile;
		
		return StringUtil.envVariableSubstitution("${APPL_HOME}/resources/ASE_tooltip_provider.xml");
	}

	@Override
	public String getAllowedChars()
	{
		return "_[]@$.*";
	}

	@Override
	public String getFooter()
	{
		return "<b>Note:</b> The above output was generated by a static version of '<code>sp_syntax</code>'<br>" +
				"You can change or add content in the file '<code>"+getToolTipProviderFile()+"</code>'.";
	}
	
//	@Override
//	public String getToolTipText(RTextArea textArea, MouseEvent e, String word, String fullWord)
//	{
//		if (_connectionProvider != null)
//		{
//			Connection conn = _connectionProvider.getConnection();
//			if (conn == null)
//				return "Not yet Connected";
//			
//			if ( ! AseConnectionUtils.isConnectionOk(conn, false, null) )
//				return "Not Connected";
//
//			StringBuilder sb = new StringBuilder();
//			try
//			{
//				String sql = "sp_syntax '"+word+"'";
//				
//				Statement stmnt = conn.createStatement();
//				ResultSet rs    = stmnt.executeQuery(sql);
//				while (rs.next())
//				{
//					sb.append(rs.getString(1));
//					sb.append("\n");
//				}
//				stmnt.close();
//				rs.close();
//			}
//			catch(SQLException ex)
//			{
//				if ( ex.getErrorCode() == 17973)
//					return null;
//
//				if ( ex.getErrorCode() == 2812)
//					return "Please install the 'sybsyntax' database\n\nisql -Usa -Ppassword -Sservername -i $SYBASE/$SYBASE_ASE/scripts/ins_syn_sql";
//
//				sb.append("Problems getting current Working Database. Error Number: "+ex.getErrorCode()+", Message: " + ex.getMessage());
//			}
//			return sb.toString();
//		}
//		return "<html><h2>ToolTipSupplier - ASE</h2>"+word+"<br>"+fullWord+"</html>";
//	}



	public String generateSybsyntaxResultsDummy(RTextArea textArea, MouseEvent e, String word, String fullWord)
	{
		if (_connectionProvider != null)
		{
			Connection conn = _connectionProvider.getConnection();
			if (conn == null)
				return "Not yet Connected";
			
			if ( ! AseConnectionUtils.isConnectionOk(conn, false, null) )
				return "Not Connected";

			StringBuilder sb = new StringBuilder();
			try
			{
				String sql = "select x.commandname, x.module, x.linenum, x.syntax from sybsyntax.dbo.sybsyntax x ";
System.out.println("SQL: "+sql);

				Statement stmnt   = conn.createStatement();
				ResultSet rs      = stmnt.executeQuery(sql);
				String prevCmdName = "";
				String cmdname     = "";
				String module      = "";
				String syntax      = "";
				String desc        = "";
				while (rs.next())
				{
					String r_cmdname = rs.getString(1);
					String r_module  = rs.getString(2);
					int    r_linenum = rs.getInt   (3);
					String r_syntax  = rs.getString(4);

					if ( ! prevCmdName.equals(r_cmdname) )
					{
						System.out.println("<Entry>");
						System.out.println("    <CmdName>"+cmdname+"</CmdName>");
						System.out.println("    <Module>"+module+"</Module>");
						System.out.println("    <Description>"+desc+"</Description>");
						System.out.println("    <Syntax><![CDATA[");
						System.out.println(StringUtil.removeLastNewLine(syntax));
						System.out.println("    ]]></Syntax>");
						System.out.println("    <Example><![CDATA[]]></Example>");
						System.out.println("</Entry>");
						System.out.println();
					}
					
					if (r_linenum == 1)
					{
						syntax  = r_syntax + "\n";
						cmdname = r_cmdname;
						module  = r_module;
						desc    = r_syntax.trim() + " ";
					}
					else if (r_linenum == 2)
					{
						desc    = desc + r_syntax.trim();
						syntax  = syntax + r_syntax + "\n";
					}
					else
					{
						syntax  = syntax + r_syntax + "\n";
					}

					prevCmdName = cmdname;

//					sb.append(rs.getString(1));
					sb.append("\n");
				}
				stmnt.close();
				rs.close();

				// Write the last one
				System.out.println("<Entry>");
				System.out.println("    <CmdName>"+cmdname+"</CmdName>");
				System.out.println("    <Module>"+module+"</Module>");
				System.out.println("    <Description>"+desc+"</Description>");
				System.out.println("    <Syntax><![CDATA[");
				System.out.println(StringUtil.removeLastNewLine(syntax));
				System.out.println("    ]]></Syntax>");
				System.out.println("    <Example><![CDATA[]]></Example>");
				System.out.println("</Entry>");
				System.out.println();
			}
			catch(SQLException ex)
			{
				if ( ex.getErrorCode() == 17973)
					return null;

				if ( ex.getErrorCode() == 2812)
					return "Please install the 'sybsyntax' database\n\nisql -Usa -Ppassword -Sservername -i $SYBASE/$SYBASE_ASE/scripts/ins_syn_sql";

				sb.append("Problems getting current Working Database. Error Number: "+ex.getErrorCode()+", Message: " + ex.getMessage());
			}
			return sb.toString();
		}
		return "<html><h2>ToolTipSupplier - ASE</h2>"+word+"<br>"+fullWord+"</html>";
	}
}

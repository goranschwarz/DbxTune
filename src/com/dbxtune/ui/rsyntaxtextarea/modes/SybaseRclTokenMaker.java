/*******************************************************************************
 * Copyright (C) 2010-2025 Goran Schwarz
 * 
 * This file is part of DbxTune
 * DbxTune is a family of sub-products *Tune, hence the Dbx
 * Here are some of the tools: AseTune, IqTune, RsTune, RaxTune, HanaTune, 
 *          SqlServerTune, PostgresTune, MySqlTune, MariaDbTune, Db2Tune, ...
 * 
 * DbxTune is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 * 
 * DbxTune is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DbxTune.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
/* The following code was generated by JFlex 1.4.3 on 2012-11-09 10:17 */

/*
 * 2012-11-07
 *
 * SybaseRclTokenMaker.java - Scanner for SQL.
 *
 * Copyright (C) 2012 Goran Schwarz
 * Copyright (C) 2005 Robert Futrell
 * robert_futrell at users.sourceforge.net
 * http://fifesoft.com/rsyntaxtextarea
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.
 */
package com.dbxtune.ui.rsyntaxtextarea.modes;

import java.io.IOException;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;


/**
 * This class generates tokens representing a text stream as SQL.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated SQLTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class SybaseRclTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 6;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\1\25\0\1\4\1\0\1\52\4\0\1\53\2\15"+
    "\1\13\1\11\1\0\1\12\1\17\1\14\2\3\1\51\7\3\1\16"+
    "\1\0\1\10\1\7\1\6\2\0\1\21\1\22\1\26\1\32\1\20"+
    "\1\41\1\40\1\42\1\27\1\2\1\43\1\34\1\33\1\30\1\23"+
    "\1\37\1\50\1\24\1\36\1\25\1\44\1\31\1\35\1\46\1\45"+
    "\1\47\1\54\1\0\1\55\1\0\1\5\1\0\1\21\1\22\1\26"+
    "\1\32\1\20\1\41\1\40\1\42\1\27\1\2\1\43\1\34\1\33"+
    "\1\30\1\23\1\37\1\50\1\24\1\36\1\25\1\44\1\31\1\35"+
    "\1\46\1\45\1\47\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\1\3\1\4\1\1\5\5"+
    "\1\6\1\1\1\7\30\1\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\13\1\16\1\17\1\13\1\20\1\13"+
    "\24\0\1\21\1\22\5\1\1\23\4\1\1\23\4\1"+
    "\1\23\4\1\1\23\17\1\1\23\4\1\1\23\70\1"+
    "\1\24\1\13\1\25\1\7\2\0\1\26\3\0\2\26"+
    "\7\0\11\1\1\23\5\1\1\27\4\1\1\26\41\1"+
    "\1\27\6\1\1\23\4\1\1\26\33\1\1\23\24\1"+
    "\1\26\17\1\1\23\5\1\7\0\1\26\1\1\1\23"+
    "\41\1\1\27\1\1\1\23\2\1\1\27\17\1\1\23"+
    "\5\1\1\23\7\1\1\27\2\1\1\23\20\1\1\23"+
    "\1\1\1\23\36\1\1\23\3\1\11\0\23\1\1\23"+
    "\77\1\10\0\27\1\1\23\33\1\1\23\2\1\5\0"+
    "\1\26\2\0\2\1\1\23\7\1\1\23\16\1\1\23"+
    "\13\1\11\0\24\1\10\0\2\1\1\23\13\1\7\0"+
    "\1\26\12\1\6\0\4\1\6\0\3\1\6\0\3\1"+
    "\5\0\3\1\3\0\2\1\3\0\2\1\2\0\1\1"+
    "\1\0\1\1\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[786];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\270\0\346\0\u0114"+
    "\0\u0142\0\u0170\0\u019e\0\270\0\u01cc\0\u01fa\0\u0228\0\270"+
    "\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398"+
    "\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508"+
    "\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\u06d4\0\270\0\270\0\u0702\0\u0730\0\270\0\u075e"+
    "\0\u078c\0\270\0\u07ba\0\u07e8\0\270\0\u0816\0\u0844\0\u0872"+
    "\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2"+
    "\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52"+
    "\0\u0b80\0\u0bae\0\u0bdc\0\270\0\u0c0a\0\u0c38\0\u0c66\0\u0c94"+
    "\0\u0cc2\0\346\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6"+
    "\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46"+
    "\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6"+
    "\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226"+
    "\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396"+
    "\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6"+
    "\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956"+
    "\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6"+
    "\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36"+
    "\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\270\0\270"+
    "\0\270\0\u1d78\0\u1d78\0\u1da6\0\u0b52\0\u1dd4\0\u1e02\0\u1e30"+
    "\0\u0b80\0\270\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44"+
    "\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4"+
    "\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u2224"+
    "\0\346\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u230a\0\u2338\0\u2366"+
    "\0\u2394\0\u23c2\0\u23f0\0\u241e\0\u244c\0\u247a\0\u24a8\0\u24d6"+
    "\0\u2504\0\u2532\0\u2560\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646"+
    "\0\u2674\0\u26a2\0\u26d0\0\u26fe\0\u272c\0\u275a\0\u2788\0\u27b6"+
    "\0\u27e4\0\u2812\0\u2840\0\u286e\0\u289c\0\u28ca\0\u28f8\0\u2926"+
    "\0\u2954\0\u2982\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96"+
    "\0\u2ac4\0\u2af2\0\u2b20\0\346\0\u2b4e\0\u2b7c\0\u2baa\0\u2bd8"+
    "\0\u2c06\0\u2c34\0\u2c62\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\u2d48"+
    "\0\u2d76\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8"+
    "\0\u2ee6\0\u2f14\0\u2f42\0\u2f70\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028"+
    "\0\u3056\0\u3084\0\u30b2\0\u30e0\0\u310e\0\u313c\0\u316a\0\u3198"+
    "\0\u31c6\0\u31f4\0\u3222\0\u3250\0\u327e\0\u32ac\0\u32da\0\u3308"+
    "\0\u3336\0\u3364\0\u3392\0\u33c0\0\u33ee\0\u341c\0\u344a\0\u3478"+
    "\0\u34a6\0\u34d4\0\u3502\0\u3530\0\u355e\0\u358c\0\u35ba\0\u35e8"+
    "\0\u3616\0\u3644\0\u3672\0\u36a0\0\u36ce\0\u36fc\0\u372a\0\u3758"+
    "\0\u3786\0\u37b4\0\u37e2\0\u3810\0\u383e\0\u386c\0\u389a\0\u38c8"+
    "\0\u38f6\0\u3924\0\u3952\0\u3980\0\u39ae\0\u39dc\0\u3a0a\0\u3a38"+
    "\0\u3a66\0\u3a94\0\u3ac2\0\u3af0\0\u3b1e\0\u3b4c\0\u3b7a\0\u3ba8"+
    "\0\u3bd6\0\u3c04\0\u3c32\0\u3c60\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18"+
    "\0\u3d46\0\u3d74\0\u3da2\0\u3dd0\0\u3dfe\0\u3e2c\0\u3e5a\0\u3e88"+
    "\0\u3eb6\0\u3ee4\0\u3f12\0\u3f40\0\u3f6e\0\u3f9c\0\u3fca\0\u3ff8"+
    "\0\u4026\0\u4054\0\u4082\0\u40b0\0\u40de\0\u410c\0\u413a\0\u4168"+
    "\0\u4196\0\u41c4\0\u41f2\0\u4220\0\u424e\0\u427c\0\u42aa\0\u42d8"+
    "\0\u4306\0\u4334\0\u0d1e\0\u4362\0\u4390\0\u43be\0\u43ec\0\u441a"+
    "\0\u0c38\0\u4448\0\u4476\0\u44a4\0\u44d2\0\u4500\0\u452e\0\u455c"+
    "\0\u458a\0\u45b8\0\u45e6\0\u4614\0\u4642\0\u4670\0\u469e\0\u46cc"+
    "\0\u46fa\0\u4728\0\u4756\0\u4784\0\u47b2\0\u47e0\0\u480e\0\u483c"+
    "\0\u486a\0\u4898\0\u48c6\0\u48f4\0\u4922\0\u4950\0\u497e\0\u49ac"+
    "\0\u49da\0\u4a08\0\u4a36\0\u4a64\0\u4a92\0\u4ac0\0\u4aee\0\u4b1c"+
    "\0\u4b4a\0\u4b78\0\u4ba6\0\u4bd4\0\u4c02\0\u4c30\0\u4c5e\0\u4c8c"+
    "\0\u4cba\0\u4ce8\0\u4d16\0\u4d44\0\u4d72\0\u4da0\0\u4dce\0\u4dfc"+
    "\0\u4e2a\0\u4e58\0\u4e86\0\u4eb4\0\u4ee2\0\u4f10\0\u4f3e\0\u4f6c"+
    "\0\u4f9a\0\u4fc8\0\u4ff6\0\u5024\0\u5052\0\u5080\0\u50ae\0\u50dc"+
    "\0\u510a\0\u5138\0\u5166\0\u5194\0\u51c2\0\u51f0\0\u521e\0\u524c"+
    "\0\u527a\0\u52a8\0\u52d6\0\u5304\0\u5332\0\u5360\0\u538e\0\u53bc"+
    "\0\u53ea\0\u5418\0\u5446\0\u5474\0\u54a2\0\u2ffa\0\u54d0\0\u54fe"+
    "\0\u552c\0\u555a\0\u5588\0\u55b6\0\u55e4\0\u5612\0\u5640\0\u566e"+
    "\0\u569c\0\u56ca\0\u56f8\0\u5726\0\u5754\0\u5782\0\u57b0\0\u57de"+
    "\0\u580c\0\u583a\0\u5868\0\u5896\0\u58c4\0\u58f2\0\u5920\0\u594e"+
    "\0\u597c\0\u59aa\0\u59d8\0\u5a06\0\u5a34\0\u5a62\0\u5a90\0\u213e"+
    "\0\u5abe\0\u5aec\0\u5b1a\0\u5b48\0\u5b76\0\u5ba4\0\u5bd2\0\u5c00"+
    "\0\u5c2e\0\u5c5c\0\u5c8a\0\u5cb8\0\u5ce6\0\u5d14\0\u5d42\0\u5d70"+
    "\0\u5d9e\0\u5dcc\0\u5dfa\0\u5e28\0\u5e56\0\u5e84\0\u5eb2\0\u5ee0"+
    "\0\u5f0e\0\u5f3c\0\u5f6a\0\u5f98\0\u5fc6\0\u5ff4\0\u6022\0\u6050"+
    "\0\u607e\0\u60ac\0\u60da\0\u6108\0\u6136\0\u6164\0\u6192\0\u61c0"+
    "\0\u61ee\0\u621c\0\u624a\0\u6278\0\u62a6\0\u62d4\0\u6302\0\u6330"+
    "\0\u635e\0\u638c\0\u63ba\0\u63e8\0\u6416\0\u6444\0\u6472\0\u64a0"+
    "\0\u64ce\0\u2a68\0\u64fc\0\u652a\0\u6558\0\u6586\0\u65b4\0\u65e2"+
    "\0\u6610\0\u663e\0\u666c\0\u669a\0\u66c8\0\u66f6\0\u6724\0\u6752"+
    "\0\u6780\0\u67ae\0\u67dc\0\u680a\0\u6838\0\u6866\0\u6894\0\u68c2"+
    "\0\u68f0\0\u691e\0\u694c\0\u697a\0\u69a8\0\u69d6\0\u6a04\0\u6a32"+
    "\0\u6a60\0\u6a8e\0\u6abc\0\u6aea\0\u6b18\0\u6b46\0\u6b74\0\u6ba2"+
    "\0\u6bd0\0\u6bfe\0\u6c2c\0\u6c5a\0\u458a\0\u1c36\0\u6c88\0\u6cb6"+
    "\0\u6ce4\0\u6d12\0\u6d40\0\u6d6e\0\u6d9c\0\u6dca\0\u6df8\0\u6e26"+
    "\0\u6e54\0\u6e82\0\u6eb0\0\u6ede\0\u6f0c\0\u6f3a\0\u6f68\0\u6f96"+
    "\0\u6fc4\0\u6ff2\0\u7020\0\u704e\0\u707c\0\u70aa\0\u70d8\0\u7106"+
    "\0\u7134\0\u7162\0\u7190\0\u71be\0\u71ec\0\u721a\0\u7248\0\u7276"+
    "\0\u72a4\0\u72d2\0\u7300\0\u732e\0\u735c\0\u738a\0\u73b8\0\u73e6"+
    "\0\u7414\0\u7442\0\u7470\0\u749e\0\u74cc\0\u74fa\0\u7528\0\u7556"+
    "\0\u7584\0\u75b2\0\u75e0\0\u760e\0\u763c\0\u766a\0\u7698\0\u76c6"+
    "\0\u76f4\0\u7722\0\u7750\0\u777e\0\u77ac\0\u77da\0\u7808\0\u7836"+
    "\0\u7864\0\u7892\0\u78c0\0\u78ee\0\u791c\0\u794a\0\u7978\0\u79a6"+
    "\0\u79d4\0\u7a02\0\u7a30\0\u7a5e\0\u7a8c\0\u7aba\0\u7ae8\0\u7b16"+
    "\0\u7b44\0\u7b72\0\u7ba0\0\u7bce\0\u7bfc\0\u7c2a\0\u7c58\0\u7c86"+
    "\0\u7cb4\0\u7ce2\0\u7d10\0\u7d3e\0\u7d6c\0\u7d9a\0\u7dc8\0\u7df6"+
    "\0\u7e24\0\u0e8e\0\u7e52\0\u6a60\0\u7e80\0\u7eae\0\u7edc\0\u7f0a"+
    "\0\u7f38\0\u7f66\0\u7f94\0\u7fc2\0\u7ff0\0\u801e\0\u804c\0\u807a"+
    "\0\u80a8\0\u80d6\0\u8104\0\u8132\0\u8160\0\u818e\0\u81bc\0\u81ea"+
    "\0\u8218\0\u8246\0\u8274\0\u82a2\0\u82d0\0\u82fe\0\u832c\0\u835a"+
    "\0\u8388\0\u83b6\0\u83e4\0\u8412\0\u8440\0\u846e\0\u849c\0\u84ca"+
    "\0\u84f8\0\u8526\0\u8554\0\u8582\0\u85b0\0\u85de\0\u860c\0\u863a"+
    "\0\u8668\0\u8696\0\u86c4\0\u86f2\0\u8720\0\u874e\0\u877c\0\u87aa"+
    "\0\u87d8\0\u8806";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[786];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\14\1\16\1\14\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\7\1\51"+
    "\1\52\1\10\1\53\1\54\1\55\1\5\1\56\1\57"+
    "\50\56\1\60\3\56\1\61\1\62\51\61\1\63\2\61"+
    "\1\64\1\65\11\64\1\66\42\64\60\0\2\7\1\0"+
    "\1\7\12\0\32\7\7\0\1\10\13\0\1\22\1\67"+
    "\30\0\1\10\10\0\1\11\53\0\1\70\16\0\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\0"+
    "\1\101\1\102\1\0\1\103\1\104\1\105\1\0\1\106"+
    "\1\107\1\0\1\110\1\111\1\0\1\112\15\0\1\14"+
    "\54\0\2\14\60\0\1\113\56\0\1\114\44\0\1\7"+
    "\15\0\31\7\10\0\1\22\14\0\1\67\30\0\1\22"+
    "\6\0\2\7\1\0\1\7\12\0\4\7\1\115\3\7"+
    "\1\116\15\7\1\117\3\7\6\0\2\7\1\0\1\7"+
    "\12\0\2\7\1\120\1\7\1\121\1\122\1\123\1\7"+
    "\1\124\1\7\1\125\1\7\1\126\1\7\1\127\1\130"+
    "\1\7\1\131\10\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\132\6\7\1\133\22\7\6\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\122\3\7\1\134\1\135\3\7\1\136"+
    "\1\137\1\140\1\7\1\141\2\7\1\142\5\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\143\2\7\1\144\12\7"+
    "\1\145\1\146\12\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\147\1\150\1\7\1\122\1\151\2\7\1\152\5\7"+
    "\1\153\1\7\1\154\12\7\6\0\2\7\1\0\1\7"+
    "\12\0\3\7\1\155\1\156\2\7\1\122\4\7\1\157"+
    "\5\7\1\160\7\7\6\0\2\7\1\0\1\7\12\0"+
    "\10\7\1\161\2\7\1\162\4\7\1\163\11\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\164\1\165\1\7\1\166"+
    "\2\7\1\167\2\7\1\170\5\7\1\171\4\7\1\172"+
    "\5\7\6\0\2\7\1\0\1\7\12\0\1\173\1\174"+
    "\30\7\6\0\2\7\1\0\1\7\12\0\1\175\1\176"+
    "\1\7\1\177\1\200\2\7\1\201\2\7\1\202\3\7"+
    "\1\203\5\7\1\204\1\205\4\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\206\1\207\1\7\1\210\3\7\1\211"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\1\7\1\212"+
    "\1\7\1\213\26\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\214\2\7\1\215\2\7\1\216\12\7\1\217"+
    "\7\7\6\0\2\7\1\0\1\7\12\0\1\220\2\7"+
    "\1\221\1\7\1\222\1\223\1\224\3\7\1\225\1\7"+
    "\1\226\4\7\1\227\1\230\1\231\1\232\2\7\1\233"+
    "\1\7\6\0\2\7\1\0\1\7\12\0\1\7\1\234"+
    "\2\7\1\235\17\7\1\236\5\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\237\3\7\1\240\25\7\6\0\2\7"+
    "\1\0\1\7\12\0\3\7\1\241\1\242\2\7\1\243"+
    "\4\7\1\244\7\7\1\245\5\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\246\1\7\1\247\26\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\250\31\7\6\0\2\7"+
    "\1\0\1\7\12\0\10\7\1\251\5\7\1\252\1\253"+
    "\12\7\6\0\2\7\1\0\1\7\12\0\7\7\1\254"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\1\255\31\7"+
    "\6\0\2\7\1\0\1\7\12\0\24\7\1\256\5\7"+
    "\4\0\55\55\1\257\1\56\1\0\50\56\1\0\3\56"+
    "\52\0\1\260\3\0\1\61\1\0\51\61\1\0\2\61"+
    "\53\0\1\260\2\0\1\64\1\0\11\64\1\0\42\64"+
    "\14\0\1\261\44\0\1\262\5\0\2\263\36\0\1\262"+
    "\25\0\1\264\60\0\1\265\1\0\1\266\3\0\1\267"+
    "\1\0\1\270\2\0\1\271\1\0\1\272\54\0\2\272"+
    "\52\0\1\272\37\0\1\273\1\264\1\0\1\274\2\0"+
    "\1\272\5\0\1\272\1\0\1\275\1\276\1\0\1\272"+
    "\40\0\1\272\3\0\1\272\3\0\1\272\2\0\1\272"+
    "\51\0\1\272\6\0\1\272\43\0\1\277\5\0\1\300"+
    "\37\0\1\272\3\0\1\272\17\0\1\272\35\0\1\272"+
    "\7\0\1\276\1\0\1\272\41\0\1\301\1\0\1\272"+
    "\54\0\1\272\16\0\1\272\40\0\1\272\74\0\1\272"+
    "\40\0\1\272\47\0\1\272\73\0\1\272\50\0\1\272"+
    "\57\0\1\272\21\0\1\113\1\0\54\113\2\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\302\25\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\303\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\304\16\7\1\305\12\7\6\0"+
    "\2\7\1\0\1\7\12\0\3\7\1\306\26\7\6\0"+
    "\2\7\1\0\1\7\12\0\5\7\1\307\24\7\6\0"+
    "\2\7\1\0\1\7\12\0\5\7\1\310\24\7\6\0"+
    "\2\7\1\0\1\7\12\0\12\7\1\122\17\7\6\0"+
    "\2\7\1\0\1\7\12\0\12\7\1\122\1\311\16\7"+
    "\6\0\2\7\1\0\1\7\12\0\5\7\1\312\6\7"+
    "\1\313\1\314\14\7\6\0\2\7\1\0\1\7\12\0"+
    "\16\7\1\315\13\7\6\0\2\7\1\0\1\7\12\0"+
    "\17\7\1\316\12\7\6\0\2\7\1\0\1\7\12\0"+
    "\5\7\1\317\24\7\6\0\2\7\1\0\1\7\12\0"+
    "\20\7\1\311\1\320\10\7\6\0\2\7\1\0\1\7"+
    "\12\0\5\7\1\321\2\7\1\322\7\7\1\323\11\7"+
    "\6\0\2\7\1\0\1\7\12\0\14\7\1\250\15\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\324\31\7\6\0"+
    "\2\7\1\0\1\7\12\0\10\7\1\312\21\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\124\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\325\31\7\6\0\2\7"+
    "\1\0\1\7\12\0\21\7\1\326\10\7\6\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\327\24\7\6\0\1\330"+
    "\1\7\1\0\1\7\12\0\1\7\1\331\1\332\2\7"+
    "\1\333\1\334\2\7\1\335\1\7\1\336\2\7\1\337"+
    "\1\340\1\7\1\341\6\7\1\342\1\7\6\0\2\7"+
    "\1\0\1\7\12\0\14\7\1\343\1\122\6\7\1\344"+
    "\5\7\6\0\2\7\1\0\1\345\12\0\4\7\1\346"+
    "\25\7\6\0\2\7\1\0\1\7\12\0\6\7\1\122"+
    "\23\7\6\0\2\7\1\0\1\7\12\0\13\7\1\347"+
    "\12\7\1\350\3\7\6\0\2\7\1\0\1\7\12\0"+
    "\2\7\1\351\27\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\352\22\7\1\353\5\7\6\0\2\7\1\0"+
    "\1\7\12\0\10\7\1\354\2\7\1\355\16\7\6\0"+
    "\2\7\1\0\1\7\12\0\3\7\1\356\26\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\357\1\360\21\7"+
    "\6\0\2\7\1\0\1\7\12\0\10\7\1\361\2\7"+
    "\1\362\1\363\15\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\364\31\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\365\30\7\6\0\2\7\1\0\1\7\12\0\1\366"+
    "\1\367\30\7\6\0\2\7\1\0\1\7\12\0\5\7"+
    "\1\370\1\371\1\237\6\7\1\372\13\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\373\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\10\7\1\320\21\7\6\0\2\7"+
    "\1\0\1\7\12\0\11\7\1\374\3\7\1\122\10\7"+
    "\1\237\3\7\6\0\2\7\1\0\1\7\12\0\13\7"+
    "\1\375\16\7\6\0\2\7\1\0\1\376\12\0\5\7"+
    "\1\377\2\7\1\u0100\4\7\1\u0101\14\7\6\0\2\7"+
    "\1\0\1\7\12\0\22\7\1\u0102\7\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\u0103\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\15\7\1\u0104\14\7\6\0\2\7"+
    "\1\0\1\7\12\0\13\7\1\u0105\1\u0106\15\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\u0107\25\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\u0108\7\7\1\u0109"+
    "\15\7\6\0\2\7\1\0\1\7\12\0\2\7\1\u010a"+
    "\3\7\1\u010b\5\7\1\u010c\1\7\1\u010d\2\7\1\u010e"+
    "\10\7\6\0\2\7\1\0\1\7\12\0\5\7\1\u010f"+
    "\24\7\6\0\2\7\1\0\1\7\12\0\24\7\1\u0110"+
    "\5\7\6\0\2\7\1\0\1\7\12\0\3\7\1\u0111"+
    "\26\7\6\0\2\7\1\0\1\7\12\0\16\7\1\u0112"+
    "\13\7\6\0\2\7\1\0\1\7\12\0\14\7\1\122"+
    "\15\7\6\0\2\7\1\0\1\7\12\0\7\7\1\u0113"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\13\7\1\u0114"+
    "\16\7\6\0\2\7\1\0\1\7\12\0\10\7\1\u0115"+
    "\21\7\6\0\2\7\1\0\1\7\12\0\16\7\1\u0116"+
    "\13\7\6\0\2\7\1\0\1\7\12\0\4\7\1\u0117"+
    "\1\u0118\1\7\1\u0119\7\7\1\122\12\7\6\0\2\7"+
    "\1\0\1\7\12\0\10\7\1\u011a\1\u0100\20\7\6\0"+
    "\2\7\1\0\1\7\12\0\10\7\1\u011b\21\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\u011c\3\7\1\u011d"+
    "\5\7\1\237\13\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\124\6\7\1\u011e\5\7\1\u011f\1\7\1\u0120"+
    "\11\7\6\0\2\7\1\0\1\7\12\0\4\7\1\u0121"+
    "\2\7\1\237\22\7\6\0\2\7\1\0\1\7\12\0"+
    "\7\7\1\u0122\22\7\6\0\2\7\1\0\1\7\12\0"+
    "\5\7\1\u0123\24\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\u0124\31\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\u0125\2\7\1\u0126\1\122\2\7\1\u0127\3\7\1\330"+
    "\3\7\1\u0128\7\7\1\122\1\7\6\0\2\7\1\0"+
    "\1\7\12\0\24\7\1\u0129\5\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\u012a\2\7\1\u012b\5\7\1\u012c"+
    "\17\7\6\0\2\7\1\0\1\7\12\0\1\7\1\u012d"+
    "\20\7\1\u012e\7\7\6\0\2\7\1\0\1\7\12\0"+
    "\5\7\1\u0100\21\7\1\u0100\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\u012f\30\7\6\0\2\7\1\0"+
    "\1\7\12\0\7\7\1\u0130\22\7\6\0\2\7\1\0"+
    "\1\7\12\0\24\7\1\u0131\5\7\6\0\2\7\1\0"+
    "\1\7\12\0\7\7\1\u0114\22\7\6\0\2\7\1\0"+
    "\1\7\12\0\2\7\1\u0132\13\7\1\u0133\13\7\6\0"+
    "\2\7\1\0\1\7\12\0\16\7\1\u0134\13\7\6\0"+
    "\2\7\1\0\1\7\12\0\14\7\1\u0135\15\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\u0136\11\7\1\u0137"+
    "\13\7\6\0\2\7\1\0\1\7\12\0\1\u0138\2\7"+
    "\1\u0139\3\7\1\u013a\22\7\6\0\2\7\1\0\1\7"+
    "\12\0\2\7\1\u013b\1\7\1\u011c\25\7\6\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\122\24\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\u013c\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\122\25\7\6\0\2\7"+
    "\1\0\1\7\12\0\3\7\1\u013d\26\7\6\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\u013e\25\7\6\0\2\7"+
    "\1\0\1\7\12\0\3\7\1\u013f\26\7\6\0\2\7"+
    "\1\0\1\7\12\0\10\7\1\u0140\21\7\6\0\2\7"+
    "\1\0\1\7\12\0\16\7\1\u0141\13\7\6\0\2\7"+
    "\1\0\1\7\12\0\14\7\1\u0142\15\7\6\0\2\7"+
    "\1\0\1\7\12\0\25\7\1\122\4\7\6\0\2\7"+
    "\1\0\1\7\12\0\7\7\1\u0143\6\7\1\u0144\13\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u0145\6\7\1\u0146"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\12\7\1\364"+
    "\17\7\6\0\2\7\1\0\1\7\12\0\1\u0147\31\7"+
    "\6\0\2\7\1\0\1\7\12\0\4\7\1\u0148\25\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u0149\2\7\1\u014a"+
    "\26\7\7\0\1\262\45\0\1\262\30\0\1\272\54\0"+
    "\1\272\64\0\1\u014b\50\0\1\u014c\53\0\1\u014d\4\0"+
    "\1\u014e\5\0\1\u014f\45\0\1\272\34\0\1\u0150\20\0"+
    "\1\272\57\0\1\272\63\0\1\u0151\41\0\1\u0152\74\0"+
    "\1\272\16\0\2\7\1\0\1\7\12\0\3\7\1\241"+
    "\26\7\6\0\2\7\1\0\1\7\12\0\2\7\1\u0153"+
    "\27\7\6\0\2\7\1\0\1\7\12\0\6\7\1\u0154"+
    "\23\7\6\0\2\7\1\0\1\7\12\0\1\7\1\u0155"+
    "\30\7\6\0\2\7\1\0\1\7\12\0\4\7\1\237"+
    "\25\7\6\0\2\7\1\0\1\7\12\0\7\7\1\u0156"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\7\7\1\u0157"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\7\7\1\u012d"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\1\241\31\7"+
    "\6\0\2\7\1\0\1\7\12\0\3\7\1\u0158\26\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\u0159\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\7\7\1\u015a\22\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u0155\13\7\1\u015b"+
    "\15\7\6\0\2\7\1\0\1\7\12\0\1\u015c\31\7"+
    "\6\0\2\7\1\0\1\7\12\0\3\7\1\u0124\26\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\u015d\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\5\7\1\u015e\1\7"+
    "\1\u015f\2\7\1\u0160\17\7\6\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\u0161\25\7\6\0\2\7\1\0\1\7"+
    "\12\0\10\7\1\u0162\21\7\6\0\2\7\1\0\1\7"+
    "\12\0\16\7\1\u0163\13\7\6\0\2\7\1\0\1\7"+
    "\12\0\17\7\1\u0164\12\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\u0165\31\7\6\0\2\7\1\0\1\7\12\0"+
    "\14\7\1\321\15\7\6\0\2\7\1\0\1\7\12\0"+
    "\24\7\1\u0166\5\7\6\0\2\7\1\0\1\7\12\0"+
    "\4\7\1\250\25\7\6\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\u0167\26\7\6\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\u0168\26\7\6\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\u0169\26\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\u016a\23\7\1\u016b\1\u016c\4\7\6\0\2\7\1\0"+
    "\1\u016d\12\0\14\7\1\u016e\4\7\1\u016f\10\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u0170\31\7\6\0\2\7"+
    "\1\0\1\7\12\0\24\7\1\u0171\5\7\6\0\2\7"+
    "\1\0\1\7\12\0\14\7\1\u0172\15\7\6\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\u0100\24\7\6\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\u0173\1\u0174\24\7\6\0"+
    "\2\7\1\0\1\7\12\0\17\7\1\146\12\7\6\0"+
    "\2\7\1\0\1\7\12\0\17\7\1\u0175\12\7\6\0"+
    "\2\7\1\0\1\7\12\0\5\7\1\u0176\24\7\6\0"+
    "\2\7\1\0\1\7\12\0\14\7\1\u0177\15\7\6\0"+
    "\2\7\1\0\1\7\12\0\6\7\1\u0100\1\7\1\u0178"+
    "\21\7\6\0\2\7\1\0\1\7\12\0\10\7\1\u0179"+
    "\21\7\6\0\2\7\1\0\1\7\12\0\25\7\1\u017a"+
    "\4\7\6\0\2\7\1\0\1\7\12\0\1\u017b\31\7"+
    "\6\0\2\7\1\0\1\7\12\0\16\7\1\u017c\13\7"+
    "\6\0\2\7\1\0\1\7\12\0\10\7\1\u017d\21\7"+
    "\6\0\2\7\1\0\1\7\12\0\24\7\1\u017e\5\7"+
    "\6\0\2\7\1\0\1\7\12\0\5\7\1\u017f\2\7"+
    "\1\u0180\10\7\1\u0181\10\7\6\0\2\7\1\0\1\7"+
    "\12\0\13\7\1\u0182\16\7\6\0\2\7\1\0\1\7"+
    "\12\0\24\7\1\u0183\5\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\344\30\7\6\0\2\7\1\0\1\7"+
    "\12\0\16\7\1\u011f\13\7\6\0\2\7\1\0\1\7"+
    "\12\0\6\7\1\u0184\23\7\6\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\321\3\7\1\u0185\21\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\u0186\2\7\1\122\26\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\u0187\25\7\6\0"+
    "\2\7\1\0\1\7\12\0\5\7\1\u0188\24\7\6\0"+
    "\2\7\1\0\1\7\12\0\20\7\1\u0189\11\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u018a\31\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\u018b\31\7\6\0\2\7\1\0"+
    "\1\7\12\0\17\7\1\u018c\12\7\6\0\2\7\1\0"+
    "\1\7\12\0\4\7\1\u018d\25\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\122\31\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\u0182\30\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\u018e\30\7\6\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\u018f\25\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\u0190\31\7\6\0\2\7\1\0\1\7\12\0"+
    "\14\7\1\u0191\15\7\6\0\2\7\1\0\1\7\12\0"+
    "\7\7\1\u0192\6\7\1\u0104\13\7\6\0\2\7\1\0"+
    "\1\7\12\0\2\7\1\u0193\3\7\1\167\23\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\253\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\24\7\1\u0194\5\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\u0195\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u0196\6\7\1\u0126\22\7"+
    "\6\0\2\7\1\0\1\7\12\0\6\7\1\u0197\23\7"+
    "\6\0\2\7\1\0\1\7\12\0\7\7\1\u0198\22\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u0199\1\u019a\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\2\7\1\u019b\27\7"+
    "\6\0\2\7\1\0\1\7\12\0\17\7\1\u019c\12\7"+
    "\6\0\2\7\1\0\1\7\12\0\5\7\1\u019d\1\u019e"+
    "\10\7\1\u019f\12\7\6\0\2\7\1\0\1\u01a0\12\0"+
    "\32\7\6\0\2\7\1\0\1\7\12\0\17\7\1\122"+
    "\12\7\6\0\2\7\1\0\1\7\12\0\1\7\1\u01a1"+
    "\30\7\6\0\2\7\1\0\1\7\12\0\16\7\1\u01a2"+
    "\13\7\6\0\2\7\1\0\1\7\12\0\23\7\1\312"+
    "\6\7\6\0\2\7\1\0\1\7\12\0\1\u01a3\31\7"+
    "\6\0\2\7\1\0\1\7\12\0\10\7\1\u01a4\21\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u01a5\31\7\6\0"+
    "\2\7\1\0\1\u01a6\12\0\7\7\1\u01a7\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\20\7\1\u0100\11\7\6\0"+
    "\2\7\1\0\1\7\12\0\20\7\1\u01a8\11\7\6\0"+
    "\2\7\1\0\1\7\12\0\20\7\1\u01a9\11\7\6\0"+
    "\2\7\1\0\1\7\12\0\16\7\1\122\13\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\u01aa\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\13\7\1\u01ab\16\7\6\0"+
    "\2\7\1\0\1\7\12\0\5\7\1\u01ac\24\7\6\0"+
    "\2\7\1\0\1\7\12\0\22\7\1\u01ad\7\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\u0100\25\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\u01ae\25\7\6\0"+
    "\2\7\1\0\1\7\12\0\11\7\1\312\20\7\6\0"+
    "\2\7\1\0\1\7\12\0\12\7\1\u01af\17\7\6\0"+
    "\2\7\1\0\1\7\12\0\13\7\1\u01b0\16\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\u01b1\25\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\u01b2\1\u01b3\2\7"+
    "\1\u01b4\21\7\6\0\2\7\1\0\1\7\12\0\7\7"+
    "\1\u0146\22\7\6\0\2\7\1\0\1\7\12\0\2\7"+
    "\1\122\27\7\6\0\2\7\1\0\1\7\12\0\10\7"+
    "\1\122\21\7\6\0\2\7\1\0\1\7\12\0\1\u01b5"+
    "\31\7\6\0\2\7\1\0\1\7\12\0\14\7\1\u01b6"+
    "\15\7\6\0\2\7\1\0\1\7\12\0\5\7\1\u01b7"+
    "\24\7\6\0\2\7\1\0\1\7\12\0\5\7\1\u01b8"+
    "\24\7\6\0\2\7\1\0\1\7\12\0\16\7\1\u01b9"+
    "\13\7\6\0\2\7\1\0\1\7\12\0\17\7\1\u01ba"+
    "\12\7\6\0\2\7\1\0\1\u01bb\12\0\1\7\1\u01bc"+
    "\3\7\1\u01bd\2\7\1\u01be\21\7\6\0\2\7\1\0"+
    "\1\7\12\0\12\7\1\u01bf\17\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\u013c\1\u01c0\3\7\1\u01c1\24\7\6\0"+
    "\2\7\1\0\1\7\12\0\16\7\1\u01c2\13\7\6\0"+
    "\2\7\1\0\1\7\12\0\6\7\1\u01c3\23\7\6\0"+
    "\2\7\1\0\1\7\12\0\6\7\1\u01c4\12\7\1\u01c5"+
    "\10\7\6\0\2\7\1\0\1\7\12\0\13\7\1\u01c6"+
    "\16\7\6\0\2\7\1\0\1\7\12\0\14\7\1\u01c7"+
    "\15\7\6\0\2\7\1\0\1\7\12\0\10\7\1\237"+
    "\21\7\6\0\2\7\1\0\1\7\12\0\13\7\1\122"+
    "\16\7\6\0\2\7\1\0\1\7\12\0\16\7\1\237"+
    "\13\7\6\0\2\7\1\0\1\7\12\0\1\7\1\u01c8"+
    "\30\7\6\0\2\7\1\0\1\7\12\0\6\7\1\u01c9"+
    "\23\7\6\0\2\7\1\0\1\7\12\0\5\7\1\u01ca"+
    "\24\7\6\0\2\7\1\0\1\7\12\0\12\7\1\u01cb"+
    "\17\7\6\0\2\7\1\0\1\7\12\0\5\7\1\u01cc"+
    "\1\167\2\7\1\170\20\7\6\0\2\7\1\0\1\7"+
    "\12\0\7\7\1\u01cd\22\7\6\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\u01ce\25\7\6\0\2\7\1\0\1\7"+
    "\12\0\10\7\1\u0194\21\7\6\0\2\7\1\0\1\7"+
    "\12\0\14\7\1\u01cf\15\7\6\0\2\7\1\0\1\7"+
    "\12\0\3\7\1\u01d0\26\7\6\0\2\7\1\0\1\7"+
    "\12\0\24\7\1\u0177\5\7\6\0\2\7\1\0\1\7"+
    "\12\0\5\7\1\u01d1\24\7\11\0\1\u01d2\55\0\1\u01d3"+
    "\12\0\1\u01d4\61\0\1\u01d5\52\0\1\u01d6\54\0\1\u01d7"+
    "\56\0\1\u01d8\61\0\1\u01d9\57\0\1\u01da\30\0\2\7"+
    "\1\0\1\7\12\0\14\7\1\u0100\15\7\6\0\2\7"+
    "\1\0\1\7\12\0\24\7\1\344\5\7\6\0\2\7"+
    "\1\0\1\7\12\0\10\7\1\124\21\7\6\0\2\7"+
    "\1\0\1\7\12\0\6\7\1\351\23\7\6\0\2\7"+
    "\1\0\1\7\12\0\3\7\1\u012d\5\7\1\u01db\20\7"+
    "\6\0\2\7\1\0\1\7\12\0\15\7\1\122\14\7"+
    "\6\0\2\7\1\0\1\7\12\0\25\7\1\u01dc\4\7"+
    "\6\0\2\7\1\0\1\7\12\0\20\7\1\u012d\11\7"+
    "\6\0\2\7\1\0\1\7\12\0\7\7\1\u01d1\22\7"+
    "\6\0\2\7\1\0\1\7\12\0\4\7\1\u0104\25\7"+
    "\6\0\2\7\1\0\1\7\12\0\4\7\1\u01a5\25\7"+
    "\6\0\2\7\1\0\1\7\12\0\7\7\1\u01dd\22\7"+
    "\6\0\2\7\1\0\1\7\12\0\10\7\1\u01c8\21\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\u01de\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\15\7\1\u01df\14\7"+
    "\6\0\2\7\1\0\1\u01e0\12\0\32\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\u01e1\31\7\6\0\2\7\1\0"+
    "\1\7\12\0\24\7\1\237\5\7\6\0\2\7\1\0"+
    "\1\7\12\0\6\7\1\237\23\7\6\0\2\7\1\0"+
    "\1\7\12\0\7\7\1\u01e2\22\7\6\0\2\7\1\0"+
    "\1\7\12\0\10\7\1\u01e3\1\u01e4\20\7\6\0\2\7"+
    "\1\0\1\7\12\0\23\7\1\u0100\6\7\6\0\2\7"+
    "\1\0\1\7\12\0\11\7\1\u0100\20\7\6\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\u01e5\24\7\6\0\2\7"+
    "\1\0\1\7\12\0\13\7\1\u0100\16\7\6\0\2\7"+
    "\1\0\1\7\12\0\10\7\1\146\21\7\6\0\2\7"+
    "\1\0\1\7\12\0\7\7\1\u01e6\22\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\250\5\7\1\u01e7\22\7"+
    "\6\0\2\7\1\0\1\7\12\0\24\7\1\u016c\5\7"+
    "\6\0\2\7\1\0\1\7\12\0\4\7\1\u01e8\25\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u013e\31\7\6\0"+
    "\2\7\1\0\1\7\12\0\2\7\1\u01e9\27\7\6\0"+
    "\2\7\1\0\1\7\12\0\6\7\1\u01ea\23\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\u01eb\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\14\7\1\364\15\7\6\0"+
    "\2\7\1\0\1\7\12\0\6\7\1\u01ec\5\7\1\u01ed"+
    "\15\7\6\0\2\7\1\0\1\7\12\0\1\u01ee\31\7"+
    "\6\0\2\7\1\0\1\7\12\0\16\7\1\u01ef\13\7"+
    "\6\0\2\7\1\0\1\7\12\0\6\7\1\u01f0\23\7"+
    "\6\0\2\7\1\0\1\7\12\0\7\7\1\u015f\22\7"+
    "\6\0\2\7\1\0\1\7\12\0\16\7\1\u01f1\13\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\u01f2\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\7\7\1\u01e1\22\7"+
    "\6\0\2\7\1\0\1\7\12\0\14\7\1\u01ea\15\7"+
    "\6\0\2\7\1\0\1\7\12\0\4\7\1\u01f3\25\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u01f4\31\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\u01f5\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\237\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\13\7\1\u01f6\16\7\6\0"+
    "\2\7\1\0\1\7\12\0\23\7\1\122\6\7\6\0"+
    "\2\7\1\0\1\7\12\0\20\7\1\u01d1\11\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\u01f7\13\7\1\u01f8"+
    "\11\7\6\0\2\7\1\0\1\7\12\0\1\u01f9\31\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\u01fa\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\321\31\7\6\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\u01fb\25\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\u01fc\30\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u0114\31\7\6\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\321\25\7\6\0\2\7"+
    "\1\0\1\7\12\0\6\7\1\167\23\7\6\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\u01fd\25\7\6\0\2\7"+
    "\1\0\1\7\12\0\21\7\1\u01fe\10\7\6\0\2\7"+
    "\1\0\1\7\12\0\7\7\1\u01ff\22\7\6\0\2\7"+
    "\1\0\1\7\12\0\20\7\1\122\11\7\6\0\2\7"+
    "\1\0\1\7\12\0\13\7\1\u0200\16\7\6\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\u0201\24\7\6\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\u0202\25\7\6\0\2\7"+
    "\1\0\1\7\12\0\10\7\1\u0203\21\7\6\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\u015e\24\7\6\0\2\7"+
    "\1\0\1\7\12\0\2\7\1\u0204\1\7\1\u0205\11\7"+
    "\1\u0206\13\7\6\0\2\7\1\0\1\7\12\0\14\7"+
    "\1\u0189\15\7\6\0\2\7\1\0\1\u0207\12\0\32\7"+
    "\6\0\2\7\1\0\1\7\12\0\4\7\1\u0208\25\7"+
    "\6\0\2\7\1\0\1\7\12\0\3\7\1\u0209\26\7"+
    "\6\0\2\7\1\0\1\7\12\0\14\7\1\u020a\15\7"+
    "\6\0\2\7\1\0\1\7\12\0\16\7\1\u020b\13\7"+
    "\6\0\2\7\1\0\1\7\12\0\13\7\1\u020c\16\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\u011c\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\4\7\1\u020d\25\7"+
    "\6\0\2\7\1\0\1\7\12\0\5\7\1\u020e\24\7"+
    "\6\0\2\7\1\0\1\7\12\0\25\7\1\321\4\7"+
    "\6\0\2\7\1\0\1\7\12\0\2\7\1\u020f\1\7"+
    "\1\u0210\25\7\6\0\2\7\1\0\1\7\12\0\13\7"+
    "\1\u0211\16\7\6\0\2\7\1\0\1\7\12\0\24\7"+
    "\1\u01a2\5\7\6\0\2\7\1\0\1\7\12\0\16\7"+
    "\1\u0212\13\7\6\0\2\7\1\0\1\7\12\0\6\7"+
    "\1\u0211\23\7\6\0\2\7\1\0\1\7\12\0\16\7"+
    "\1\u0213\13\7\6\0\2\7\1\0\1\7\12\0\1\u0141"+
    "\31\7\6\0\2\7\1\0\1\7\12\0\3\7\1\u0214"+
    "\26\7\6\0\2\7\1\0\1\7\12\0\6\7\1\u0215"+
    "\23\7\6\0\2\7\1\0\1\7\12\0\1\7\1\u0216"+
    "\30\7\6\0\2\7\1\0\1\7\12\0\1\u013c\31\7"+
    "\6\0\2\7\1\0\1\7\12\0\6\7\1\u0100\23\7"+
    "\6\0\2\7\1\0\1\7\12\0\5\7\1\u012b\24\7"+
    "\6\0\2\7\1\0\1\7\12\0\24\7\1\u011f\5\7"+
    "\6\0\2\7\1\0\1\7\12\0\12\7\1\u0217\17\7"+
    "\6\0\2\7\1\0\1\7\12\0\12\7\1\u0218\17\7"+
    "\6\0\2\7\1\0\1\7\12\0\14\7\1\u0219\15\7"+
    "\6\0\2\7\1\0\1\7\12\0\6\7\1\u021a\23\7"+
    "\6\0\2\7\1\0\1\7\12\0\12\7\1\u021b\17\7"+
    "\6\0\2\7\1\0\1\7\12\0\6\7\1\u021c\23\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u021d\31\7\6\0"+
    "\2\7\1\0\1\7\12\0\16\7\1\u021e\13\7\6\0"+
    "\2\7\1\0\1\7\12\0\12\7\1\u021f\17\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u013d\31\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\u01dd\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\12\7\2\u01ea\16\7\6\0\2\7"+
    "\1\0\1\7\12\0\13\7\1\u0220\16\7\6\0\2\7"+
    "\1\0\1\7\12\0\7\7\1\u0221\22\7\6\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\u0222\7\7\1\u0223\14\7"+
    "\6\0\2\7\1\0\1\7\12\0\7\7\1\u0224\22\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u0225\31\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\u0153\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\333\30\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\u0226\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\5\7\1\321\24\7\6\0"+
    "\2\7\1\0\1\7\12\0\5\7\1\u0227\24\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u0228\31\7\6\0\2\7"+
    "\1\0\1\7\12\0\14\7\1\u0229\15\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\u022a\31\7\6\0\2\7\1\0"+
    "\1\7\12\0\20\7\1\u022b\11\7\6\0\2\7\1\0"+
    "\1\7\12\0\10\7\1\u022c\21\7\6\0\2\7\1\0"+
    "\1\7\12\0\12\7\1\u022d\17\7\6\0\2\7\1\0"+
    "\1\7\12\0\14\7\1\u01ed\15\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\124\31\7\30\0\1\u022e\52\0\1\u022f"+
    "\60\0\1\u0230\63\0\1\u0231\56\0\1\u0232\47\0\1\u0233"+
    "\64\0\1\u0234\23\0\1\272\103\0\1\u0235\27\0\2\7"+
    "\1\0\1\7\12\0\1\122\1\344\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\16\7\1\u0236\13\7\6\0\2\7"+
    "\1\0\1\7\12\0\13\7\1\u0189\16\7\6\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\u0237\24\7\6\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\u0238\25\7\6\0\2\7"+
    "\1\0\1\7\12\0\26\7\1\u0239\3\7\6\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\u0104\24\7\6\0\2\7"+
    "\1\0\1\7\12\0\14\7\1\124\15\7\6\0\2\7"+
    "\1\0\1\7\12\0\21\7\1\u0181\10\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\u023a\31\7\6\0\2\7\1\0"+
    "\1\7\12\0\30\7\1\u023b\1\7\6\0\2\7\1\0"+
    "\1\7\12\0\21\7\1\u023c\10\7\6\0\2\7\1\0"+
    "\1\7\12\0\6\7\1\u023d\23\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\u023e\31\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\366\30\7\6\0\2\7\1\0\1\7"+
    "\12\0\14\7\1\u0104\15\7\6\0\2\7\1\0\1\7"+
    "\12\0\6\7\1\u023f\23\7\6\0\2\7\1\0\1\7"+
    "\12\0\3\7\1\u01ea\26\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\u0240\31\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\u0140\17\7\1\312\10\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\u0241\30\7\6\0\2\7\1\0"+
    "\1\7\12\0\5\7\1\u0242\24\7\6\0\2\7\1\0"+
    "\1\7\12\0\11\7\1\u0243\20\7\6\0\2\7\1\0"+
    "\1\7\12\0\3\7\1\u0244\26\7\6\0\2\7\1\0"+
    "\1\7\12\0\6\7\1\u0245\23\7\6\0\2\7\1\0"+
    "\1\7\12\0\20\7\1\u0246\11\7\6\0\2\7\1\0"+
    "\1\7\12\0\10\7\1\u011f\21\7\6\0\2\7\1\0"+
    "\1\7\12\0\10\7\1\u0247\21\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\u018e\31\7\6\0\2\7\1\0\1\7"+
    "\12\0\13\7\1\u0248\16\7\6\0\2\7\1\0\1\7"+
    "\12\0\14\7\1\u0249\15\7\6\0\2\7\1\0\1\u024a"+
    "\12\0\32\7\6\0\2\7\1\0\1\7\12\0\16\7"+
    "\1\u024b\13\7\6\0\2\7\1\0\1\7\12\0\7\7"+
    "\1\u024c\22\7\6\0\2\7\1\0\1\7\12\0\25\7"+
    "\1\u024d\4\7\6\0\2\7\1\0\1\7\12\0\10\7"+
    "\1\322\21\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\331\30\7\6\0\2\7\1\0\1\7\12\0\1\u01d0"+
    "\31\7\6\0\2\7\1\0\1\7\12\0\7\7\1\u024e"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\1\122\6\7"+
    "\1\u024f\22\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\u0250\30\7\6\0\2\7\1\0\1\7\12\0\3\7"+
    "\1\171\26\7\6\0\2\7\1\0\1\7\12\0\1\u0251"+
    "\31\7\6\0\2\7\1\0\1\7\12\0\4\7\1\u0252"+
    "\25\7\6\0\2\7\1\0\1\7\12\0\7\7\1\u0253"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\10\7\1\u0254"+
    "\21\7\6\0\2\7\1\0\1\7\12\0\1\7\1\u0255"+
    "\30\7\6\0\2\7\1\0\1\7\12\0\24\7\1\u0256"+
    "\5\7\6\0\2\7\1\0\1\7\12\0\7\7\1\146"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\7\7\1\u0257"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\1\u0258\31\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u0259\31\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\202\30\7\6\0"+
    "\2\7\1\0\1\7\12\0\25\7\1\u025a\4\7\6\0"+
    "\2\7\1\0\1\7\12\0\5\7\1\u025b\24\7\6\0"+
    "\2\7\1\0\1\7\12\0\24\7\1\u025c\5\7\6\0"+
    "\2\7\1\0\1\7\12\0\22\7\1\116\7\7\6\0"+
    "\2\7\1\0\1\7\12\0\14\7\1\u025d\15\7\6\0"+
    "\2\7\1\0\1\7\12\0\2\7\1\250\27\7\6\0"+
    "\2\7\1\0\1\7\12\0\24\7\1\u0153\5\7\6\0"+
    "\2\7\1\0\1\7\12\0\7\7\1\u015f\2\7\1\u0160"+
    "\1\u025e\16\7\6\0\2\7\1\0\1\7\12\0\22\7"+
    "\1\122\7\7\6\0\2\7\1\0\1\7\12\0\3\7"+
    "\1\u025f\26\7\6\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\u0260\25\7\6\0\2\7\1\0\1\7\12\0\10\7"+
    "\1\u0261\21\7\6\0\2\7\1\0\1\7\12\0\17\7"+
    "\1\u0104\12\7\6\0\2\7\1\0\1\7\12\0\13\7"+
    "\1\311\16\7\6\0\2\7\1\0\1\7\12\0\1\u0262"+
    "\31\7\6\0\2\7\1\0\1\7\12\0\1\7\1\u0263"+
    "\3\7\1\u0264\24\7\6\0\2\7\1\0\1\7\12\0"+
    "\22\7\1\u0265\7\7\6\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\u0266\26\7\6\0\2\7\1\0\1\7\12\0"+
    "\16\7\1\u0267\13\7\6\0\2\7\1\0\1\7\12\0"+
    "\12\7\1\u0268\17\7\6\0\2\7\1\0\1\7\12\0"+
    "\6\7\1\u0269\23\7\6\0\2\7\1\0\1\7\12\0"+
    "\7\7\1\u026a\22\7\6\0\2\7\1\0\1\7\12\0"+
    "\26\7\1\237\3\7\6\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\366\26\7\6\0\2\7\1\0\1\7\12\0"+
    "\26\7\1\u01c8\3\7\6\0\2\7\1\0\1\7\12\0"+
    "\10\7\1\u01d1\21\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\u016b\30\7\6\0\2\7\1\0\1\7\12\0"+
    "\7\7\1\u026b\22\7\24\0\1\u026c\62\0\1\u026d\35\0"+
    "\1\u026e\70\0\1\u026f\55\0\1\u0270\105\0\1\u0271\32\0"+
    "\1\u0272\51\0\1\u0273\36\0\2\7\1\0\1\u0274\12\0"+
    "\32\7\6\0\2\7\1\0\1\7\12\0\1\u0275\31\7"+
    "\6\0\2\7\1\0\1\7\12\0\7\7\1\344\22\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\u0165\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\4\7\1\u0276\25\7"+
    "\6\0\2\7\1\0\1\7\12\0\24\7\1\u0277\5\7"+
    "\6\0\2\7\1\0\1\u0278\12\0\32\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\u0279\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\10\7\1\u027a\21\7\6\0\2\7"+
    "\1\0\1\7\12\0\23\7\1\u0163\6\7\6\0\2\7"+
    "\1\0\1\7\12\0\10\7\1\u0104\21\7\6\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\u027b\24\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\u027c\30\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\u0104\31\7\6\0\2\7\1\0"+
    "\1\7\12\0\14\7\1\u027d\15\7\6\0\2\7\1\0"+
    "\1\7\12\0\5\7\1\u027e\24\7\6\0\2\7\1\0"+
    "\1\7\12\0\24\7\1\u0124\5\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\u027f\30\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\u0280\31\7\6\0\2\7\1\0\1\7"+
    "\12\0\14\7\1\u0281\15\7\6\0\2\7\1\0\1\7"+
    "\12\0\16\7\1\u0282\13\7\6\0\2\7\1\0\1\7"+
    "\12\0\6\7\1\321\23\7\6\0\2\7\1\0\1\u0283"+
    "\12\0\32\7\6\0\2\7\1\0\1\7\12\0\17\7"+
    "\1\u024f\12\7\6\0\2\7\1\0\1\7\12\0\5\7"+
    "\1\u0264\24\7\6\0\2\7\1\0\1\7\12\0\16\7"+
    "\1\u0100\13\7\6\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\u0284\25\7\6\0\2\7\1\0\1\7\12\0\1\u0285"+
    "\31\7\6\0\2\7\1\0\1\7\12\0\2\7\1\u0286"+
    "\27\7\6\0\2\7\1\0\1\7\12\0\10\7\1\330"+
    "\21\7\6\0\2\7\1\0\1\7\12\0\25\7\1\u0287"+
    "\4\7\6\0\2\7\1\0\1\7\12\0\16\7\1\u0288"+
    "\13\7\6\0\2\7\1\0\1\7\12\0\1\7\1\u0289"+
    "\30\7\6\0\2\7\1\0\1\7\12\0\10\7\1\u028a"+
    "\21\7\6\0\2\7\1\0\1\7\12\0\21\7\1\320"+
    "\10\7\6\0\2\7\1\0\1\7\12\0\16\7\1\u028b"+
    "\13\7\6\0\2\7\1\0\1\7\12\0\12\7\1\u028c"+
    "\17\7\6\0\2\7\1\0\1\7\12\0\5\7\1\u028d"+
    "\24\7\6\0\2\7\1\0\1\7\12\0\14\7\1\u028e"+
    "\15\7\6\0\2\7\1\0\1\7\12\0\3\7\1\u028f"+
    "\26\7\6\0\2\7\1\0\1\7\12\0\15\7\1\u012d"+
    "\14\7\6\0\2\7\1\0\1\7\12\0\7\7\1\u0290"+
    "\22\7\6\0\2\7\1\0\1\7\12\0\12\7\1\122"+
    "\3\7\1\u0264\13\7\6\0\2\7\1\0\1\7\12\0"+
    "\5\7\1\u0291\24\7\6\0\2\7\1\0\1\7\12\0"+
    "\14\7\1\u0292\15\7\6\0\2\7\1\0\1\7\12\0"+
    "\7\7\1\u0293\22\7\6\0\2\7\1\0\1\7\12\0"+
    "\4\7\1\u0294\25\7\6\0\2\7\1\0\1\7\12\0"+
    "\4\7\1\124\25\7\6\0\2\7\1\0\1\7\12\0"+
    "\7\7\1\u0295\22\7\6\0\2\7\1\0\1\7\12\0"+
    "\24\7\1\u0296\5\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\u024f\30\7\6\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\u0297\26\7\6\0\2\7\1\0\1\7\12\0"+
    "\10\7\1\u0298\21\7\32\0\1\u0299\54\0\1\u029a\51\0"+
    "\1\u029b\4\0\1\u029c\53\0\1\u029d\36\0\1\u029e\114\0"+
    "\1\u029f\31\0\1\u02a0\61\0\1\u02a1\33\0\2\7\1\0"+
    "\1\7\12\0\4\7\1\u02a2\25\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\u02a3\31\7\6\0\2\7\1\0\1\7"+
    "\12\0\6\7\1\u02a4\23\7\6\0\2\7\1\0\1\7"+
    "\12\0\5\7\1\u02a5\24\7\6\0\2\7\1\0\1\7"+
    "\12\0\6\7\1\u02a6\23\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\122\6\7\1\u0293\22\7\6\0\2\7\1\0"+
    "\1\7\12\0\13\7\1\u02a7\16\7\6\0\2\7\1\0"+
    "\1\7\12\0\14\7\1\312\15\7\6\0\2\7\1\0"+
    "\1\7\12\0\3\7\1\241\3\7\1\u026a\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\14\7\1\u02a8\15\7\6\0"+
    "\2\7\1\0\1\7\12\0\10\7\1\u02a9\21\7\6\0"+
    "\1\u02aa\1\7\1\0\1\7\12\0\32\7\6\0\2\7"+
    "\1\0\1\7\12\0\15\7\1\u0223\14\7\6\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\u02ab\25\7\6\0\2\7"+
    "\1\0\1\7\12\0\11\7\1\317\20\7\6\0\2\7"+
    "\1\0\1\7\12\0\17\7\1\u02ac\12\7\6\0\2\7"+
    "\1\0\1\7\12\0\24\7\1\u02ad\5\7\6\0\2\7"+
    "\1\0\1\u02ae\12\0\32\7\6\0\2\7\1\0\1\7"+
    "\12\0\17\7\1\u02af\12\7\6\0\2\7\1\0\1\7"+
    "\12\0\14\7\1\u02b0\15\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\u02b1\30\7\6\0\2\7\1\0\1\7"+
    "\12\0\10\7\1\u01be\21\7\6\0\2\7\1\0\1\7"+
    "\12\0\2\7\1\u0104\27\7\6\0\2\7\1\0\1\7"+
    "\12\0\5\7\1\u021e\24\7\6\0\2\7\1\0\1\7"+
    "\12\0\26\7\1\u02b2\3\7\6\0\2\7\1\0\1\7"+
    "\12\0\10\7\1\u011a\21\7\6\0\2\7\1\0\1\7"+
    "\12\0\2\7\1\u0100\14\7\1\u024f\12\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\u02b3\31\7\6\0\2\7\1\0"+
    "\1\7\12\0\24\7\1\u02b4\5\7\6\0\2\7\1\0"+
    "\1\7\12\0\3\7\1\u012d\26\7\6\0\2\7\1\0"+
    "\1\7\12\0\24\7\1\u0104\5\7\6\0\2\7\1\0"+
    "\1\7\12\0\3\7\1\u02b5\26\7\6\0\2\7\1\0"+
    "\1\7\12\0\4\7\1\u0177\25\7\6\0\2\7\1\0"+
    "\1\7\12\0\10\7\1\u01ee\21\7\6\0\2\7\1\0"+
    "\1\7\12\0\20\7\1\u0104\11\7\27\0\1\u02b6\56\0"+
    "\1\u02b7\56\0\1\u02b8\53\0\1\u02b9\37\0\1\u02ba\107\0"+
    "\1\u02bb\36\0\1\u02bc\61\0\1\u02bd\76\0\1\272\12\0"+
    "\2\7\1\0\1\7\12\0\1\u02be\31\7\6\0\2\7"+
    "\1\0\1\7\12\0\24\7\1\u0100\5\7\6\0\2\7"+
    "\1\0\1\7\12\0\22\7\1\u02bf\7\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\u02c0\6\7\1\u0293\22\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u011f\31\7\6\0\2\7"+
    "\1\0\1\7\12\0\17\7\1\321\12\7\6\0\2\7"+
    "\1\0\1\u02c1\12\0\32\7\6\0\2\7\1\0\1\7"+
    "\12\0\5\7\1\u02c2\24\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\u02c3\30\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\u02c4\31\7\6\0\2\7\1\0\1\7\12\0"+
    "\12\7\1\u02c5\17\7\6\0\2\7\1\0\1\7\12\0"+
    "\5\7\1\u02c6\24\7\6\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\u02c7\26\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\u02c8\31\7\6\0\2\7\1\0\1\7\12\0\7\7"+
    "\1\u02c9\22\7\6\0\2\7\1\0\1\7\12\0\10\7"+
    "\1\u01b1\21\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\u02ca\30\7\6\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\u011f\25\7\6\0\2\7\1\0\1\7\12\0\17\7"+
    "\1\u02cb\12\7\6\0\2\7\1\0\1\7\12\0\10\7"+
    "\1\321\21\7\35\0\1\u02cc\75\0\1\272\31\0\1\u02cd"+
    "\64\0\1\u02ce\47\0\1\u02cf\71\0\1\u02d0\57\0\1\u02d1"+
    "\35\0\1\u02d2\33\0\2\7\1\0\1\7\12\0\17\7"+
    "\1\u02d3\12\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\u02d4\30\7\6\0\2\7\1\0\1\u016d\12\0\32\7"+
    "\6\0\2\7\1\0\1\7\12\0\24\7\1\u02d5\5\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\u02d6\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\11\7\1\u02d7\20\7"+
    "\6\0\2\7\1\0\1\7\12\0\17\7\1\u02d8\12\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u02d9\31\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u0104\2\7\1\241\3\7"+
    "\1\u0293\22\7\6\0\2\7\1\0\1\7\12\0\10\7"+
    "\1\u02da\21\7\6\0\2\7\1\0\1\7\12\0\10\7"+
    "\1\u02db\21\7\6\0\2\7\1\0\1\7\12\0\27\7"+
    "\1\u02dc\2\7\6\0\2\7\1\0\1\7\12\0\6\7"+
    "\1\u02dd\23\7\6\0\2\7\1\0\1\7\12\0\12\7"+
    "\1\u0104\17\7\11\0\1\u02de\74\0\1\u02df\36\0\1\u02e0"+
    "\73\0\1\u02e1\77\0\1\u02e2\30\0\1\272\55\0\1\u02e3"+
    "\37\0\2\7\1\0\1\7\12\0\14\7\1\u02e4\15\7"+
    "\6\0\2\7\1\0\1\7\12\0\10\7\1\u0185\21\7"+
    "\6\0\2\7\1\0\1\7\12\0\16\7\1\u02e5\13\7"+
    "\6\0\2\7\1\0\1\7\12\0\14\7\1\u02da\15\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\u0104\30\7"+
    "\6\0\2\7\1\0\1\7\12\0\16\7\1\u02e6\13\7"+
    "\6\0\2\7\1\0\1\7\12\0\21\7\1\u0104\10\7"+
    "\6\0\2\7\1\0\1\7\12\0\12\7\1\u02e7\17\7"+
    "\6\0\2\7\1\0\1\7\12\0\5\7\1\u011f\24\7"+
    "\43\0\1\u02e8\45\0\1\u02e9\51\0\1\u02ea\66\0\1\u02eb"+
    "\57\0\1\u02ec\56\0\1\u02ed\20\0\2\7\1\0\1\7"+
    "\12\0\7\7\1\u02ee\22\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\u02ef\31\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\u02f0\31\7\6\0\2\7\1\0\1\7\12\0\1\u02cb"+
    "\31\7\24\0\1\u02f1\57\0\1\u02f2\55\0\1\u02f3\77\0"+
    "\1\u02f4\36\0\1\u02f5\62\0\1\u02f6\25\0\2\7\1\0"+
    "\1\7\12\0\6\7\1\u02f7\23\7\6\0\2\7\1\0"+
    "\1\u02f8\12\0\32\7\6\0\2\7\1\0\1\7\12\0"+
    "\4\7\1\u02f9\25\7\34\0\1\u02fa\71\0\1\u02fb\13\0"+
    "\1\u02fc\106\0\1\u02fd\43\0\1\u02fe\54\0\1\301\37\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\u02ff\30\7\6\0"+
    "\2\7\1\0\1\7\12\0\3\7\1\u0300\26\7\6\0"+
    "\2\7\1\0\1\7\12\0\11\7\1\u0301\20\7\36\0"+
    "\1\u0302\50\0\1\u0303\57\0\1\111\56\0\1\73\47\0"+
    "\1\u0304\35\0\2\7\1\0\1\7\12\0\5\7\1\u0243"+
    "\24\7\6\0\2\7\1\0\1\7\12\0\10\7\1\u0305"+
    "\21\7\6\0\2\7\1\0\1\7\12\0\1\u0306\31\7"+
    "\33\0\1\u0307\46\0\1\u0308\71\0\1\u0309\23\0\2\7"+
    "\1\0\1\7\12\0\14\7\1\u030a\15\7\6\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\u030b\25\7\34\0\1\u030c"+
    "\63\0\1\u02b7\37\0\1\u030d\37\0\2\7\1\0\1\7"+
    "\12\0\25\7\1\u0104\4\7\6\0\2\7\1\0\1\u030e"+
    "\12\0\32\7\44\0\1\272\22\0\1\u030f\52\0\2\7"+
    "\1\0\1\7\12\0\6\7\1\u0310\23\7\34\0\1\u0311"+
    "\27\0\2\7\1\0\1\7\12\0\13\7\1\u02cb\16\7"+
    "\25\0\1\u0312\67\0\1\u02d1\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34868];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\5\1\1\11\3\1\1\11\32\1\2\11"+
    "\2\1\1\11\2\1\1\11\2\1\1\11\1\1\24\0"+
    "\1\1\1\11\142\1\3\11\1\1\2\0\1\1\3\0"+
    "\1\1\1\11\7\0\211\1\7\0\200\1\11\0\123\1"+
    "\10\0\66\1\5\0\1\1\2\0\45\1\11\0\24\1"+
    "\10\0\16\1\7\0\13\1\6\0\4\1\6\0\3\1"+
    "\6\0\3\1\5\0\3\1\3\0\2\1\3\0\2\1"+
    "\2\0\1\1\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[786];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
//  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public SybaseRclTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
//	public String[] getLineCommentStartAndEnd() {
		return new String[] { "--", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = STRING;
				start = text.offset;
				break;
			case Token.LITERAL_CHAR:
				state = CHAR;
				start = text.offset;
				break;
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
//			return new DefaultToken();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
//		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SybaseRclTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SybaseRclTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


//  /**
//   * Refills the input buffer.
//   *
//   * @return      <code>false</code>, iff there was new input.
//   * 
//   * @exception   java.io.IOException  if any I/O-Error occurs
//   */
//  private boolean zzRefill() throws java.io.IOException {
//
//    /* first: make room (if you can) */
//    if (zzStartRead > 0) {
//      System.arraycopy(zzBuffer, zzStartRead,
//                       zzBuffer, 0,
//                       zzEndRead-zzStartRead);
//
//      /* translate stored positions */
//      zzEndRead-= zzStartRead;
//      zzCurrentPos-= zzStartRead;
//      zzMarkedPos-= zzStartRead;
//      zzStartRead = 0;
//    }
//
//    /* is the buffer big enough? */
//    if (zzCurrentPos >= zzBuffer.length) {
//      /* if not: blow it up */
//      char newBuffer[] = new char[zzCurrentPos*2];
//      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
//      zzBuffer = newBuffer;
//    }
//
//    /* finally: fill the buffer with new input */
//    int numRead = zzReader.read(zzBuffer, zzEndRead,
//                                            zzBuffer.length-zzEndRead);
//
//    if (numRead > 0) {
//      zzEndRead+= numRead;
//      return false;
//    }
//    // unlikely but not impossible: read 0 characters, but not at end of stream    
//    if (numRead == 0) {
//      int c = zzReader.read();
//      if (c == -1) {
//        return true;
//      } else {
//        zzBuffer[zzEndRead++] = (char) c;
//        return false;
//      }     
//    }
//
//	// numRead < 0
//    return true;
//  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


//  /**
//   * Resets the scanner to read from a new input stream.
//   * Does not close the old reader.
//   *
//   * All internal variables are reset, the old input stream 
//   * <b>cannot</b> be reused (internal buffer is discarded and lost).
//   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
//   *
//   * @param reader   the new input stream 
//   */
//  public final void yyreset(java.io.Reader reader) {
//    zzReader = reader;
//    zzAtBOL  = true;
//    zzAtEOF  = false;
//    zzEOFDone = false;
//    zzEndRead = zzStartRead = 0;
//    zzCurrentPos = zzMarkedPos = 0;
//    yyline = yychar = yycolumn = 0;
//    zzLexicalState = YYINITIAL;
//  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  @Override
public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { addToken(Token.PREPROCESSOR);
          }
        case 24: break;
        case 2: 
          { addNullToken(); return firstToken;
          }
        case 25: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 26: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 27: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 28: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
          }
        case 29: break;
        case 9: 
          { start = zzMarkedPos-1; yybegin(CHAR);
          }
        case 30: break;
        case 7: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 31: break;
        case 19: 
          { addToken(Token.RESERVED_WORD);
          }
        case 32: break;
        case 6: 
          { addToken(Token.SEPARATOR);
          }
        case 33: break;
        case 15: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_CHAR);
          }
        case 34: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 35: break;
        case 23: 
          { addToken(Token.DATA_TYPE);
          }
        case 36: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
          }
        case 37: break;
        case 22: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 38: break;
        case 17: 
          { addToken(Token.COMMENT_EOL);
          }
        case 39: break;
        case 8: 
          { start = zzMarkedPos-1; yybegin(STRING);
          }
        case 40: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 41: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 42: break;
        case 13: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 43: break;
        case 10: 
          { addToken(Token.ERROR_IDENTIFIER); addNullToken(); return firstToken;
          }
        case 44: break;
        case 11: 
          { 
          }
        case 45: break;
        case 16: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 46: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case STRING: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 787: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 788: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 789: break;
            case CHAR: {
              addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
            }
            case 790: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
